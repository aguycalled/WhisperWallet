diff --git a/node_modules/@aguycalled/bitcore-mnemonic/lib/mnemonic.js b/node_modules/@aguycalled/bitcore-mnemonic/lib/mnemonic.js
index 6a2d3c4..e5c4f73 100644
--- a/node_modules/@aguycalled/bitcore-mnemonic/lib/mnemonic.js
+++ b/node_modules/@aguycalled/bitcore-mnemonic/lib/mnemonic.js
@@ -5,7 +5,7 @@ var BN = bitcore.crypto.BN;
 var unorm = require('unorm');
 var _ = bitcore.deps._;
 
-var pbkdf2 = require('./pbkdf2');
+var pbkdf2 = require('react-native-fast-crypto').pbkdf2.deriveAsync;
 var errors = require('./errors');
 
 var Hash = bitcore.crypto.Hash;
@@ -201,16 +201,10 @@ Mnemonic._getDictionary = function(mnemonic) {
  * @param {String} [passphrase]
  * @returns {Buffer}
  */
-Mnemonic.prototype.toSeed = function(passphrase) {
-  passphrase = passphrase || '';
-  return pbkdf2(unorm.nfkd(this.phrase), unorm.nfkd('mnemonic' + passphrase), 2048, 64);
-};
-
 Mnemonic.prototype.toSeedAsync = async function(passphrase) {
-  return new Promise((res, rej) => {
-    passphrase = passphrase || '';
-    res(pbkdf2(unorm.nfkd(this.phrase), unorm.nfkd('mnemonic' + passphrase), 2048, 64));
-  }
+  passphrase = passphrase || '';
+  let ret = await pbkdf2(Buffer.from(unorm.nfkd(this.phrase), 'utf8'), Buffer.from(unorm.nfkd('mnemonic' + passphrase), 'utf8'), 2048, 64, 'sha512');
+  return ret.toString('hex');
 };
 
 /**
@@ -235,10 +229,6 @@ Mnemonic.fromSeed = function(seed, wordlist) {
  * @param {Network|String|number=} [network] - The network: 'livenet' or 'testnet'
  * @returns {HDPrivateKey}
  */
-Mnemonic.prototype.toHDPrivateKey = function(passphrase, network) {
-  var seed = this.toSeed(passphrase);
-  return bitcore.HDPrivateKey.fromSeed(seed, network);
-};
 Mnemonic.prototype.toHDPrivateKeyAsync = async function(passphrase, network) {
   var seed = await this.toSeedAsync(passphrase);
   return bitcore.HDPrivateKey.fromSeed(seed, network);
