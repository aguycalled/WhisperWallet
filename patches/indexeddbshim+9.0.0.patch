diff --git a/node_modules/indexeddbshim/dist/indexeddbshim-noninvasive.js b/node_modules/indexeddbshim/dist/indexeddbshim-noninvasive.js
index 943562d..9274ba8 100644
--- a/node_modules/indexeddbshim/dist/indexeddbshim-noninvasive.js
+++ b/node_modules/indexeddbshim/dist/indexeddbshim-noninvasive.js
@@ -1,10 +1,11 @@
 /*! indexeddbshim - v9.0.0 - 1/5/2022 */
 
-(function (global, factory) {
-  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
-  typeof define === 'function' && define.amd ? define(factory) :
-  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.setGlobalVars = factory());
-})(this, (function () { 'use strict';
+(function(global, factory) {
+  typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() :
+    typeof define === "function" && define.amd ? define(factory) :
+      (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.setGlobalVars = factory());
+})(this, (function() {
+  "use strict";
 
   // ID_Start (includes Other_ID_Start)
   var UnicodeIDStart = "(?:[$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D])"; // ID_Continue (includes Other_ID_Continue)
@@ -16,7 +17,7 @@
 
     if (Object.getOwnPropertySymbols) {
       var symbols = Object.getOwnPropertySymbols(object);
-      enumerableOnly && (symbols = symbols.filter(function (sym) {
+      enumerableOnly && (symbols = symbols.filter(function(sym) {
         return Object.getOwnPropertyDescriptor(object, sym).enumerable;
       })), keys.push.apply(keys, symbols);
     }
@@ -27,9 +28,9 @@
   function _objectSpread2(target) {
     for (var i = 1; i < arguments.length; i++) {
       var source = null != arguments[i] ? arguments[i] : {};
-      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
+      i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
         _defineProperty(target, key, source[key]);
-      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
+      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
         Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
       });
     }
@@ -40,9 +41,9 @@
   function _typeof$1(obj) {
     "@babel/helpers - typeof";
 
-    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
+    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
       return typeof obj;
-    } : function (obj) {
+    } : function(obj) {
       return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
     }, _typeof$1(obj);
   }
@@ -67,7 +68,7 @@
     if (protoProps) _defineProperties(Constructor.prototype, protoProps);
     if (staticProps) _defineProperties(Constructor, staticProps);
     Object.defineProperty(Constructor, "prototype", {
-      writable: false
+      writable: false,
     });
     return Constructor;
   }
@@ -101,7 +102,7 @@
         value: value,
         enumerable: true,
         configurable: true,
-        writable: true
+        writable: true,
       });
     } else {
       obj[key] = value;
@@ -125,7 +126,8 @@
     if (typeof Proxy === "function") return true;
 
     try {
-      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
+      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
+      }));
       return true;
     } catch (e) {
       return false;
@@ -232,23 +234,24 @@
         if (it) o = it;
         var i = 0;
 
-        var F = function () {};
+        var F = function() {
+        };
 
         return {
           s: F,
-          n: function () {
+          n: function() {
             if (i >= o.length) return {
-              done: true
+              done: true,
             };
             return {
               done: false,
-              value: o[i++]
+              value: o[i++],
             };
           },
-          e: function (e) {
+          e: function(e) {
             throw e;
           },
-          f: F
+          f: F,
         };
       }
 
@@ -256,28 +259,28 @@
     }
 
     var normalCompletion = true,
-        didErr = false,
-        err;
+      didErr = false,
+      err;
     return {
-      s: function () {
+      s: function() {
         it = it.call(o);
       },
-      n: function () {
+      n: function() {
         var step = it.next();
         normalCompletion = step.done;
         return step;
       },
-      e: function (e) {
+      e: function(e) {
         didErr = true;
         err = e;
       },
-      f: function () {
+      f: function() {
         try {
           if (!normalCompletion && it.return != null) it.return();
         } finally {
           if (didErr) throw err;
         }
-      }
+      },
     };
   }
 
@@ -300,6 +303,7 @@
 
     return _typeof(obj);
   }
+
   /* eslint-disable no-sync, no-restricted-syntax */
   // Todo: Switch to ES6 classes
 
@@ -308,44 +312,44 @@
     NONE: 0,
     CAPTURING_PHASE: 1,
     AT_TARGET: 2,
-    BUBBLING_PHASE: 3
-  };
-  var ShimDOMException$1 = typeof DOMException === 'undefined' // Todo: Better polyfill (if even needed here)
-  // eslint-disable-next-line no-shadow
-  ? function DOMException(msg, name) {
-    // No need for `toString` as same as for `Error`
-    var err = new Error(msg);
-    err.name = name;
-    return err;
-  } : DOMException;
+    BUBBLING_PHASE: 3,
+  };
+  var ShimDOMException$1 = typeof DOMException === "undefined" // Todo: Better polyfill (if even needed here)
+    // eslint-disable-next-line no-shadow
+    ? function DOMException(msg, name) {
+      // No need for `toString` as same as for `Error`
+      var err = new Error(msg);
+      err.name = name;
+      return err;
+    } : DOMException;
   var ev = new WeakMap();
   var evCfg = new WeakMap(); // Todo: Set _ev argument outside of this function
 
   /* eslint-disable func-name-matching, no-shadow */
 
   /**
-  * We use an adapter class rather than a proxy not only for compatibility
-  * but also since we have to clone native event properties anyways in order
-  * to properly set `target`, etc.
-  * The regular DOM method `dispatchEvent` won't work with this polyfill as
-  * it expects a native event.
-  * @class
-  * @param {string} type
-  */
+   * We use an adapter class rather than a proxy not only for compatibility
+   * but also since we have to clone native event properties anyways in order
+   * to properly set `target`, etc.
+   * The regular DOM method `dispatchEvent` won't work with this polyfill as
+   * it expects a native event.
+   * @class
+   * @param {string} type
+   */
 
   var ShimEvent = function Event(type) {
     /* eslint-enable func-name-matching, no-shadow */
     // For WebIDL checks of function's `length`, we check `arguments` for the optional arguments
-    this[Symbol.toStringTag] = 'Event';
+    this[Symbol.toStringTag] = "Event";
 
-    this.toString = function () {
-      return '[object Event]';
+    this.toString = function() {
+      return "[object Event]";
     }; // eslint-disable-next-line prefer-rest-params
 
 
     var _arguments = Array.prototype.slice.call(arguments),
-        evInit = _arguments[1],
-        _ev = _arguments[2];
+      evInit = _arguments[1],
+      _ev = _arguments[2];
 
     if (!arguments.length) {
       throw new TypeError("Failed to construct 'Event': 1 argument required, but only 0 present.");
@@ -355,7 +359,7 @@
     _ev = _ev || {};
     var _evCfg = {};
 
-    if ('composed' in evInit) {
+    if ("composed" in evInit) {
       _evCfg.composed = evInit.composed;
     } // _evCfg.isTrusted = true; // We are not always using this for user-created events
     // _evCfg.timeStamp = new Date().valueOf(); // This is no longer a timestamp, but monotonic (elapsed?)
@@ -364,40 +368,40 @@
     ev.set(this, _ev);
     evCfg.set(this, _evCfg);
     this.initEvent(type, evInit.bubbles, evInit.cancelable);
-    Object.defineProperties(this, ['target', 'currentTarget', 'eventPhase', 'defaultPrevented'].reduce(function (obj, prop) {
+    Object.defineProperties(this, ["target", "currentTarget", "eventPhase", "defaultPrevented"].reduce(function(obj, prop) {
       obj[prop] = {
         get: function get() {
           return (
             /* prop in _evCfg && */
             _evCfg[prop] !== undefined ? _evCfg[prop] : prop in _ev ? _ev[prop] : // Defaults
-            prop === 'eventPhase' ? 0 : prop === 'defaultPrevented' ? false : null
+              prop === "eventPhase" ? 0 : prop === "defaultPrevented" ? false : null
           );
-        }
+        },
       };
       return obj;
     }, {}));
     var props = [// Event
-    'type', 'bubbles', 'cancelable', // Defaults to false
-    'isTrusted', 'timeStamp', 'initEvent', // Other event properties (not used by our code)
-    'composedPath', 'composed'];
+      "type", "bubbles", "cancelable", // Defaults to false
+      "isTrusted", "timeStamp", "initEvent", // Other event properties (not used by our code)
+      "composedPath", "composed"];
 
-    if (this.toString() === '[object CustomEvent]') {
-      props.push('detail', 'initCustomEvent');
+    if (this.toString() === "[object CustomEvent]") {
+      props.push("detail", "initCustomEvent");
     }
 
-    Object.defineProperties(this, props.reduce(function (obj, prop) {
+    Object.defineProperties(this, props.reduce(function(obj, prop) {
       obj[prop] = {
         get: function get() {
-          return prop in _evCfg ? _evCfg[prop] : prop in _ev ? _ev[prop] : ['bubbles', 'cancelable', 'composed'].includes(prop) ? false : undefined;
-        }
+          return prop in _evCfg ? _evCfg[prop] : prop in _ev ? _ev[prop] : ["bubbles", "cancelable", "composed"].includes(prop) ? false : undefined;
+        },
       };
       return obj;
     }, {}));
   };
 
-  ShimEvent.prototype.preventDefault = function () {
+  ShimEvent.prototype.preventDefault = function() {
     if (!(this instanceof ShimEvent)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     var _ev = ev.get(this);
@@ -407,26 +411,26 @@
     if (this.cancelable && !_evCfg._passive) {
       _evCfg.defaultPrevented = true;
 
-      if (typeof _ev.preventDefault === 'function') {
+      if (typeof _ev.preventDefault === "function") {
         // Prevent any predefined defaults
         _ev.preventDefault();
       }
     }
   };
 
-  ShimEvent.prototype.stopImmediatePropagation = function () {
+  ShimEvent.prototype.stopImmediatePropagation = function() {
     var _evCfg = evCfg.get(this);
 
     _evCfg._stopImmediatePropagation = true;
   };
 
-  ShimEvent.prototype.stopPropagation = function () {
+  ShimEvent.prototype.stopPropagation = function() {
     var _evCfg = evCfg.get(this);
 
     _evCfg._stopPropagation = true;
   };
 
-  ShimEvent.prototype.initEvent = function (type, bubbles, cancelable) {
+  ShimEvent.prototype.initEvent = function(type, bubbles, cancelable) {
     // Chrome currently has function length 1 only but WebIDL says 3
     // const bubbles = arguments[1];
     // const cancelable = arguments[2];
@@ -447,39 +451,39 @@
     }
   };
 
-  ['type', 'target', 'currentTarget'].forEach(function (prop) {
+  ["type", "target", "currentTarget"].forEach(function(prop) {
     Object.defineProperty(ShimEvent.prototype, prop, {
       enumerable: true,
       configurable: true,
       get: function get() {
-        throw new TypeError('Illegal invocation');
-      }
+        throw new TypeError("Illegal invocation");
+      },
     });
   });
-  ['eventPhase', 'defaultPrevented', 'bubbles', 'cancelable', 'timeStamp'].forEach(function (prop) {
+  ["eventPhase", "defaultPrevented", "bubbles", "cancelable", "timeStamp"].forEach(function(prop) {
     Object.defineProperty(ShimEvent.prototype, prop, {
       enumerable: true,
       configurable: true,
       get: function get() {
-        throw new TypeError('Illegal invocation');
-      }
+        throw new TypeError("Illegal invocation");
+      },
     });
   });
-  ['NONE', 'CAPTURING_PHASE', 'AT_TARGET', 'BUBBLING_PHASE'].forEach(function (prop, i) {
+  ["NONE", "CAPTURING_PHASE", "AT_TARGET", "BUBBLING_PHASE"].forEach(function(prop, i) {
     Object.defineProperty(ShimEvent, prop, {
       enumerable: true,
       writable: false,
-      value: i
+      value: i,
     });
     Object.defineProperty(ShimEvent.prototype, prop, {
       writable: false,
-      value: i
+      value: i,
     });
   });
-  ShimEvent[Symbol.toStringTag] = 'Function';
-  ShimEvent.prototype[Symbol.toStringTag] = 'EventPrototype';
-  Object.defineProperty(ShimEvent, 'prototype', {
-    writable: false
+  ShimEvent[Symbol.toStringTag] = "Function";
+  ShimEvent.prototype[Symbol.toStringTag] = "EventPrototype";
+  Object.defineProperty(ShimEvent, "prototype", {
+    writable: false,
   });
   /* eslint-disable func-name-matching, no-shadow */
 
@@ -493,31 +497,31 @@
     /* eslint-enable func-name-matching, no-shadow */
     // eslint-disable-next-line prefer-rest-params
     var _arguments2 = Array.prototype.slice.call(arguments),
-        evInit = _arguments2[1],
-        _ev = _arguments2[2];
+      evInit = _arguments2[1],
+      _ev = _arguments2[2];
 
     ShimEvent.call(this, type, evInit, _ev);
-    this[Symbol.toStringTag] = 'CustomEvent';
+    this[Symbol.toStringTag] = "CustomEvent";
 
-    this.toString = function () {
-      return '[object CustomEvent]';
+    this.toString = function() {
+      return "[object CustomEvent]";
     }; // var _evCfg = evCfg.get(this);
 
 
     evInit = evInit || {};
-    this.initCustomEvent(type, evInit.bubbles, evInit.cancelable, 'detail' in evInit ? evInit.detail : null);
+    this.initCustomEvent(type, evInit.bubbles, evInit.cancelable, "detail" in evInit ? evInit.detail : null);
   };
 
-  Object.defineProperty(ShimCustomEvent.prototype, 'constructor', {
+  Object.defineProperty(ShimCustomEvent.prototype, "constructor", {
     enumerable: false,
     writable: true,
     configurable: true,
-    value: ShimCustomEvent
+    value: ShimCustomEvent,
   });
 
-  ShimCustomEvent.prototype.initCustomEvent = function (type, bubbles, cancelable, detail) {
+  ShimCustomEvent.prototype.initCustomEvent = function(type, bubbles, cancelable, detail) {
     if (!(this instanceof ShimCustomEvent)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     var _evCfg = evCfg.get(this);
@@ -525,7 +529,7 @@
     ShimCustomEvent.call(this, type, {
       bubbles: bubbles,
       cancelable: cancelable,
-      detail: detail // eslint-disable-next-line prefer-rest-params
+      detail: detail, // eslint-disable-next-line prefer-rest-params
 
     }, arguments[4]);
 
@@ -537,25 +541,26 @@
       _evCfg.detail = detail;
     }
 
-    Object.defineProperty(this, 'detail', {
+    Object.defineProperty(this, "detail", {
       get: function get() {
         return _evCfg.detail;
-      }
+      },
     });
   };
 
-  ShimCustomEvent[Symbol.toStringTag] = 'Function';
-  ShimCustomEvent.prototype[Symbol.toStringTag] = 'CustomEventPrototype';
-  Object.defineProperty(ShimCustomEvent.prototype, 'detail', {
+  ShimCustomEvent[Symbol.toStringTag] = "Function";
+  ShimCustomEvent.prototype[Symbol.toStringTag] = "CustomEventPrototype";
+  Object.defineProperty(ShimCustomEvent.prototype, "detail", {
     enumerable: true,
     configurable: true,
     get: function get() {
-      throw new TypeError('Illegal invocation');
-    }
+      throw new TypeError("Illegal invocation");
+    },
   });
-  Object.defineProperty(ShimCustomEvent, 'prototype', {
-    writable: false
+  Object.defineProperty(ShimCustomEvent, "prototype", {
+    writable: false,
   });
+
   /**
    *
    * @param {Event} e
@@ -564,53 +569,54 @@
 
   function copyEvent(e) {
     var bubbles = e.bubbles,
-        cancelable = e.cancelable,
-        detail = e.detail,
-        type = e.type;
+      cancelable = e.cancelable,
+      detail = e.detail,
+      type = e.type;
 
-    if ('detail' in e) {
+    if ("detail" in e) {
       return new ShimCustomEvent(type, {
         bubbles: bubbles,
         cancelable: cancelable,
-        detail: detail
+        detail: detail,
       }, e);
     }
 
     return new ShimEvent(type, {
       bubbles: bubbles,
-      cancelable: cancelable
+      cancelable: cancelable,
     }, e);
   }
+
   /**
-  * @typedef {PlainObject} ListenerOptions
-  * @property {boolean} once Remove listener after invoking once
-  * @property {boolean} passive Don't allow `preventDefault`
-  * @property {boolean} capture Use `_children` and set `eventPhase`
-  */
+   * @typedef {PlainObject} ListenerOptions
+   * @property {boolean} once Remove listener after invoking once
+   * @property {boolean} passive Don't allow `preventDefault`
+   * @property {boolean} capture Use `_children` and set `eventPhase`
+   */
 
   /**
-  * @typedef {PlainObject} ListenerAndOptions
-  * @property {listener} listener
-  * @property {ListenerOptions} options
-  */
+   * @typedef {PlainObject} ListenerAndOptions
+   * @property {listener} listener
+   * @property {ListenerOptions} options
+   */
 
   /**
-  * @typedef {PlainObject} ListenerInfo
-  * @property {ListenerAndOptions[]} listenersByTypeOptions
-  * @property {ListenerOptions} options
-  * @property {ListenerAndOptions[]} listenersByType
-  */
+   * @typedef {PlainObject} ListenerInfo
+   * @property {ListenerAndOptions[]} listenersByTypeOptions
+   * @property {ListenerOptions} options
+   * @property {ListenerAndOptions[]} listenersByType
+   */
 
   /**
-  * @callback Listener
-  * @param {Event} e
-  * @returns {boolean}
-  */
+   * @callback Listener
+   * @param {Event} e
+   * @returns {boolean}
+   */
 
   /**
    * Keys are event types.
    * @typedef {Object<string,Listener[]>} Listeners
-  */
+   */
 
   /**
    *
@@ -624,17 +630,17 @@
   function getListenersOptions(listeners, type, options) {
     var listenersByType = listeners[type];
     if (listenersByType === undefined) listeners[type] = listenersByType = [];
-    options = typeof options === 'boolean' ? {
-      capture: options
+    options = typeof options === "boolean" ? {
+      capture: options,
     } : options || {};
     var stringifiedOptions = JSON.stringify(options);
-    var listenersByTypeOptions = listenersByType.filter(function (obj) {
+    var listenersByTypeOptions = listenersByType.filter(function(obj) {
       return stringifiedOptions === JSON.stringify(obj.options);
     });
     return {
       listenersByTypeOptions: listenersByTypeOptions,
       options: options,
-      listenersByType: listenersByType
+      listenersByType: listenersByType,
     };
   }
 
@@ -644,19 +650,19 @@
       var listenersByTypeOptions = listenerOptions.listenersByTypeOptions;
       options = listenerOptions.options;
       var listenersByType = listenerOptions.listenersByType;
-      if (listenersByTypeOptions.some(function (l) {
+      if (listenersByTypeOptions.some(function(l) {
         return l.listener === listener;
       })) return;
       listenersByType.push({
         listener: listener,
-        options: options
+        options: options,
       });
     },
     removeListener: function removeListener(listeners, listener, type, options) {
       var listenerOptions = getListenersOptions(listeners, type, options);
       var listenersByType = listenerOptions.listenersByType;
       var stringifiedOptions = JSON.stringify(listenerOptions.options);
-      listenersByType.some(function (l, i) {
+      listenersByType.some(function(l, i) {
         if (l.listener === listener && stringifiedOptions === JSON.stringify(l.options)) {
           listenersByType.splice(i, 1);
           if (!listenersByType.length) delete listeners[type];
@@ -669,11 +675,12 @@
     hasListener: function hasListener(listeners, listener, type, options) {
       var listenerOptions = getListenersOptions(listeners, type, options);
       var listenersByTypeOptions = listenerOptions.listenersByTypeOptions;
-      return listenersByTypeOptions.some(function (l) {
+      return listenersByTypeOptions.some(function(l) {
         return l.listener === listener;
       });
-    }
+    },
   };
+
   /* eslint-disable no-shadow */
 
   /**
@@ -682,19 +689,19 @@
 
   function EventTarget() {
     /* eslint-enable no-shadow */
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
-  Object.assign(EventTarget.prototype, ['Early', '', 'Late', 'Default'].reduce(function (obj, listenerType) {
-    ['add', 'remove', 'has'].forEach(function (method) {
-      obj[method + listenerType + 'EventListener'] = function (type, listener) {
+  Object.assign(EventTarget.prototype, ["Early", "", "Late", "Default"].reduce(function(obj, listenerType) {
+    ["add", "remove", "has"].forEach(function(method) {
+      obj[method + listenerType + "EventListener"] = function(type, listener) {
         // eslint-disable-next-line prefer-rest-params
         var options = arguments[2]; // We keep the listener `length` as per WebIDL
 
-        if (arguments.length < 2) throw new TypeError('2 or more arguments required');
+        if (arguments.length < 2) throw new TypeError("2 or more arguments required");
 
-        if (typeof type !== 'string') {
-          throw new ShimDOMException$1('UNSPECIFIED_EVENT_TYPE_ERR', 'UNSPECIFIED_EVENT_TYPE_ERR');
+        if (typeof type !== "string") {
+          throw new ShimDOMException$1("UNSPECIFIED_EVENT_TYPE_ERR", "UNSPECIFIED_EVENT_TYPE_ERR");
         }
 
         try {
@@ -706,18 +713,18 @@
           }
         } catch (err) {
           // eslint-disable-next-line no-console
-          console.log('Uncaught `handleEvent` error', err);
+          console.log("Uncaught `handleEvent` error", err);
         }
 
-        var arrStr = '_' + listenerType.toLowerCase() + (listenerType === '' ? 'l' : 'L') + 'isteners';
+        var arrStr = "_" + listenerType.toLowerCase() + (listenerType === "" ? "l" : "L") + "isteners";
 
         if (!this[arrStr]) {
           Object.defineProperty(this, arrStr, {
-            value: {}
+            value: {},
           });
         }
 
-        return methods[method + 'Listener'](this[arrStr], listener, type, options);
+        return methods[method + "Listener"](this[arrStr], listener, type, options);
       };
     });
     return obj;
@@ -733,7 +740,7 @@
         // IndexedDB
         this._legacyOutputDidListenersThrowCheck = true;
 
-        this._extraProperties.push('__legacyOutputDidListenersThrowError');
+        this._extraProperties.push("__legacyOutputDidListenersThrowError");
       }
     },
     dispatchEvent: function dispatchEvent(e) {
@@ -742,12 +749,12 @@
     _dispatchEvent: function _dispatchEvent(e, setTarget) {
       var _this = this;
 
-      ['early', '', 'late', 'default'].forEach(function (listenerType) {
-        var arrStr = '_' + listenerType + (listenerType === '' ? 'l' : 'L') + 'isteners';
+      ["early", "", "late", "default"].forEach(function(listenerType) {
+        var arrStr = "_" + listenerType + (listenerType === "" ? "l" : "L") + "isteners";
 
         if (!_this[arrStr]) {
           Object.defineProperty(_this, arrStr, {
-            value: {}
+            value: {},
           });
         }
       });
@@ -755,7 +762,7 @@
       var _evCfg = evCfg.get(e);
 
       if (_evCfg && setTarget && _evCfg._dispatched) {
-        throw new ShimDOMException$1('The object is in an invalid state.', 'InvalidStateError');
+        throw new ShimDOMException$1("The object is in an invalid state.", "InvalidStateError");
       }
 
       var eventCopy;
@@ -767,7 +774,7 @@
         _evCfg = evCfg.get(eventCopy);
         _evCfg._dispatched = true;
 
-        this._extraProperties.forEach(function (prop) {
+        this._extraProperties.forEach(function(prop) {
           if (prop in e) {
             eventCopy[prop] = e[prop]; // Todo: Put internal to `ShimEvent`?
           }
@@ -775,7 +782,8 @@
       }
 
       var _eventCopy = eventCopy,
-          type = _eventCopy.type;
+        type = _eventCopy.type;
+
       /**
        *
        * @returns {void}
@@ -786,6 +794,7 @@
         _evCfg.currentTarget = null;
         delete _evCfg._children;
       }
+
       /**
        *
        * @returns {void}
@@ -834,56 +843,54 @@
 
       switch (eventCopy.eventPhase) {
         default:
-        case phases.NONE:
-          {
-            _evCfg.eventPhase = phases.AT_TARGET; // Temporarily set before we invoke early listeners
-
-            this.invokeCurrentListeners(this._earlyListeners, eventCopy, type);
-
-            if (!this.__getParent) {
-              _evCfg.eventPhase = phases.AT_TARGET;
-              return this._dispatchEvent(eventCopy, false);
-            }
-            /* eslint-disable consistent-this */
+        case phases.NONE: {
+          _evCfg.eventPhase = phases.AT_TARGET; // Temporarily set before we invoke early listeners
 
+          this.invokeCurrentListeners(this._earlyListeners, eventCopy, type);
 
-            var par = this;
-            var root = this;
-            /* eslint-enable consistent-this */
+          if (!this.__getParent) {
+            _evCfg.eventPhase = phases.AT_TARGET;
+            return this._dispatchEvent(eventCopy, false);
+          }
+          /* eslint-disable consistent-this */
 
-            while (par.__getParent && (par = par.__getParent()) !== null) {
-              if (!_evCfg._children) {
-                _evCfg._children = [];
-              }
 
-              _evCfg._children.push(root);
+          var par = this;
+          var root = this;
+          /* eslint-enable consistent-this */
 
-              root = par;
+          while (par.__getParent && (par = par.__getParent()) !== null) {
+            if (!_evCfg._children) {
+              _evCfg._children = [];
             }
 
-            root._defaultSync = this._defaultSync;
-            _evCfg.eventPhase = phases.CAPTURING_PHASE;
-            return root._dispatchEvent(eventCopy, false);
+            _evCfg._children.push(root);
+
+            root = par;
           }
 
-        case phases.CAPTURING_PHASE:
-          {
-            if (_evCfg._stopPropagation) {
-              return continueEventDispatch();
-            }
+          root._defaultSync = this._defaultSync;
+          _evCfg.eventPhase = phases.CAPTURING_PHASE;
+          return root._dispatchEvent(eventCopy, false);
+        }
 
-            this.invokeCurrentListeners(this._listeners, eventCopy, type);
+        case phases.CAPTURING_PHASE: {
+          if (_evCfg._stopPropagation) {
+            return continueEventDispatch();
+          }
 
-            var child = _evCfg._children && _evCfg._children.length && _evCfg._children.pop();
+          this.invokeCurrentListeners(this._listeners, eventCopy, type);
 
-            if (!child || child === eventCopy.target) {
-              _evCfg.eventPhase = phases.AT_TARGET;
-            }
+          var child = _evCfg._children && _evCfg._children.length && _evCfg._children.pop();
 
-            if (child) child._defaultSync = this._defaultSync;
-            return (child || this)._dispatchEvent(eventCopy, false);
+          if (!child || child === eventCopy.target) {
+            _evCfg.eventPhase = phases.AT_TARGET;
           }
 
+          if (child) child._defaultSync = this._defaultSync;
+          return (child || this)._dispatchEvent(eventCopy, false);
+        }
+
         case phases.AT_TARGET:
           if (_evCfg._stopPropagation) {
             return continueEventDispatch();
@@ -898,22 +905,21 @@
           _evCfg.eventPhase = phases.BUBBLING_PHASE;
           return this._dispatchEvent(eventCopy, false);
 
-        case phases.BUBBLING_PHASE:
-          {
-            if (_evCfg._stopPropagation) {
-              return continueEventDispatch();
-            }
-
-            var parent = this.__getParent && this.__getParent();
+        case phases.BUBBLING_PHASE: {
+          if (_evCfg._stopPropagation) {
+            return continueEventDispatch();
+          }
 
-            if (!parent) {
-              return continueEventDispatch();
-            }
+          var parent = this.__getParent && this.__getParent();
 
-            parent.invokeCurrentListeners(parent._listeners, eventCopy, type, true);
-            parent._defaultSync = this._defaultSync;
-            return parent._dispatchEvent(eventCopy, false);
+          if (!parent) {
+            return continueEventDispatch();
           }
+
+          parent.invokeCurrentListeners(parent._listeners, eventCopy, type, true);
+          parent._defaultSync = this._defaultSync;
+          return parent._dispatchEvent(eventCopy, false);
+        }
       }
     },
     invokeCurrentListeners: function invokeCurrentListeners(listeners, eventCopy, type, checkOnListeners) {
@@ -925,14 +931,14 @@
       var listOpts = getListenersOptions(listeners, type, {});
       var listenersByType = listOpts.listenersByType.concat();
       var dummyIPos = listenersByType.length ? 1 : 0;
-      listenersByType.some(function (listenerObj, i) {
-        var onListener = checkOnListeners ? _this2['on' + type] : null;
+      listenersByType.some(function(listenerObj, i) {
+        var onListener = checkOnListeners ? _this2["on" + type] : null;
         if (_evCfg._stopImmediatePropagation) return true;
 
-        if (i === dummyIPos && typeof onListener === 'function') {
+        if (i === dummyIPos && typeof onListener === "function") {
           // We don't splice this in as could be overwritten; executes here per
           //    https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-attributes:event-handlers-14
-          _this2.tryCatch(eventCopy, function () {
+          _this2.tryCatch(eventCopy, function() {
             var ret = onListener.call(eventCopy.currentTarget, eventCopy);
 
             if (ret === false) {
@@ -943,14 +949,14 @@
 
         var options = listenerObj.options;
         var once = options.once,
-            passive = options.passive,
-            capture = options.capture;
+          passive = options.passive,
+          capture = options.capture;
         _evCfg._passive = passive;
 
         if (capture && eventCopy.target !== eventCopy.currentTarget && eventCopy.eventPhase === phases.CAPTURING_PHASE || eventCopy.eventPhase === phases.AT_TARGET || !capture && eventCopy.target !== eventCopy.currentTarget && eventCopy.eventPhase === phases.BUBBLING_PHASE) {
           var listener = listenerObj.listener;
 
-          _this2.tryCatch(eventCopy, function () {
+          _this2.tryCatch(eventCopy, function() {
             listener.call(eventCopy.currentTarget, eventCopy);
           });
 
@@ -961,10 +967,10 @@
 
         return false;
       });
-      this.tryCatch(eventCopy, function () {
-        var onListener = checkOnListeners ? _this2['on' + type] : null;
+      this.tryCatch(eventCopy, function() {
+        var onListener = checkOnListeners ? _this2["on" + type] : null;
 
-        if (typeof onListener === 'function' && listenersByType.length < 2) {
+        if (typeof onListener === "function" && listenersByType.length < 2) {
           var ret = onListener.call(eventCopy.currentTarget, eventCopy); // Won't have executed if too short
 
           if (ret === false) {
@@ -990,18 +996,18 @@
     triggerErrorEvent: function triggerErrorEvent(err, evt) {
       var error = err;
 
-      if (typeof err === 'string') {
-        error = new Error('Uncaught exception: ' + err);
+      if (typeof err === "string") {
+        error = new Error("Uncaught exception: " + err);
       }
 
       var triggerGlobalErrorEvent;
       var useNodeImpl = false;
 
-      if (typeof window === 'undefined' || typeof ErrorEvent === 'undefined' || window && (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && !window.dispatchEvent) {
+      if (typeof window === "undefined" || typeof ErrorEvent === "undefined" || window && (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && !window.dispatchEvent) {
         useNodeImpl = true;
 
         triggerGlobalErrorEvent = function triggerGlobalErrorEvent() {
-          setTimeout(function () {
+          setTimeout(function() {
             // Node won't be able to catch in this way if we throw in the main thread
             // console.log(err); // Should we auto-log for user?
             throw error; // Let user listen to `process.on('uncaughtException', (err) => {});`
@@ -1017,13 +1023,13 @@
           // Note also that the following line won't handle `window.addEventListener` handlers
           //        if (window.onerror) window.onerror(error.message, err.fileName, err.lineNumber, error.columnNumber, error);
           // `ErrorEvent` properly triggers `window.onerror` and `window.addEventListener('error')` handlers
-          var errEv = new ErrorEvent('error', {
+          var errEv = new ErrorEvent("error", {
             error: err,
-            message: error.message || '',
+            message: error.message || "",
             // We can't get the actually useful user's values!
-            filename: error.fileName || '',
+            filename: error.fileName || "",
             lineno: error.lineNumber || 0,
-            colno: error.columnNumber || 0
+            colno: error.columnNumber || 0,
           });
           window.dispatchEvent(errEv); // console.log(err); // Should we auto-log for user?
         };
@@ -1041,11 +1047,11 @@
       if (this._legacyOutputDidListenersThrowCheck) {
         evt.__legacyOutputDidListenersThrowError = error;
       }
-    }
+    },
   });
-  EventTarget.prototype[Symbol.toStringTag] = 'EventTargetPrototype';
-  Object.defineProperty(EventTarget, 'prototype', {
-    writable: false
+  EventTarget.prototype[Symbol.toStringTag] = "EventTargetPrototype";
+  Object.defineProperty(EventTarget, "prototype", {
+    writable: false,
   });
   var ShimEventTarget = EventTarget;
   var EventTargetFactory = {
@@ -1062,13 +1068,14 @@
 
       EventTarget.prototype = ShimEventTarget.prototype;
       return new EventTarget();
-    }
+    },
   };
   EventTarget.ShimEvent = ShimEvent;
   EventTarget.ShimCustomEvent = ShimCustomEvent;
   EventTarget.ShimDOMException = ShimDOMException$1;
   EventTarget.ShimEventTarget = EventTarget;
   EventTarget.EventTargetFactory = EventTargetFactory;
+
   /**
    * @returns {void}
    */
@@ -1082,100 +1089,100 @@
   var map$1 = {};
   var CFG = {};
   [// Boolean for verbose reporting
-  'DEBUG', // Effectively defaults to false (ignored unless `true`)
-  // Boolean (effectively defaults to true) on whether to cache WebSQL
-  //  `openDatabase` instances
-  'cacheDatabaseInstances', // Boolean on whether to auto-name databases (based on an
-  //   auto-increment) when the empty string is supplied; useful with
-  //   `memoryDatabase`; defaults to `false` which means the empty string
-  //   will be used as the (valid) database name
-  'autoName', // Determines whether the slow-performing `Object.setPrototypeOf`
-  //    calls required for full WebIDL compliance will be used. Probably
-  //    only needed for testing or environments where full introspection
-  //    on class relationships is required; see
-  //    http://stackoverflow.com/questions/41927589/rationales-consequences-of-webidl-class-inheritance-requirements
-  'fullIDLSupport', // Effectively defaults to false (ignored unless `true`)
-  // Boolean on whether to perform origin checks in `IDBFactory` methods
-  // Effectively defaults to `true` (must be set to `false` to cancel checks)
-  'checkOrigin', // Used by `IDBCursor` continue methods for number of records to cache;
-  //  Defaults to 100
-  'cursorPreloadPackSize', // See optional API (`shimIndexedDB.__setUnicodeIdentifiers`);
-  //    or just use the Unicode builds which invoke this method
-  //    automatically using the large, fully spec-compliant, regular
-  //    expression strings of `src/UnicodeIdentifiers.js`)
-  // In the non-Unicode builds, defaults to /[$A-Z_a-z]/
-  'UnicodeIDStart', // In the non-Unicode builds, defaults to /[$0-9A-Z_a-z]/
-  'UnicodeIDContinue', // Used by SCA.js for optional restructuring of typeson-registry
-  //   Structured Cloning Algorithm; should only be needed for ensuring data
-  //   created in 3.* versions of IndexedDBShim continue to work; see the
-  //   library `typeson-registry-sca-reverter` to get a function to do this
-  'registerSCA', // BROWSER-SPECIFIC CONFIG
-  'avoidAutoShim', // Where WebSQL is detected but where `indexedDB` is
-  //    missing or poor support is known (non-Chrome Android or
-  //    non-Safari iOS9), the shim will be auto-applied without
-  //   `shimIndexedDB.__useShim()`. Set this to `true` to avoid forcing
-  //    the shim for such cases.
-  // -----------SQL CONFIG----------
-  // Object (`window` in the browser) on which there may be an
-  //  `openDatabase` method (if any) for WebSQL. (The browser
-  //  throws if attempting to call `openDatabase` without the window
-  //  so this is why the config doesn't just allow the function.)
-  // Defaults to `window` or `self` in browser builds or
-  //  a singleton object with the `openDatabase` method set to
-  //  the "websql" package in Node.
-  'win', // For internal `openDatabase` calls made by `IDBFactory` methods;
-  //  per the WebSQL spec, "User agents are expected to use the display name
-  //  and the estimated database size to optimize the user experience.
-  //  For example, a user agent could use the estimated size to suggest an
-  //  initial quota to the user. This allows a site that is aware that it
-  //  will try to use hundreds of megabytes to declare this upfront, instead
-  //  of the user agent prompting the user for permission to increase the
-  //  quota every five megabytes."
-  // Defaults to (4 * 1024 * 1024) or (25 * 1024 * 1024) in Safari
-  'DEFAULT_DB_SIZE', // Whether to create indexes on SQLite tables (and also whether to try
-  //   dropping)
-  // Effectively defaults to `false` (ignored unless `true`)
-  'useSQLiteIndexes', // NODE-IMPINGING SETTINGS (created for sake of limitations in Node
-  //    or desktop file system implementation but applied by default in
-  //    browser for parity)
-  // File system module with `unlink` to remove deleted database files
-  'fs', // Used when setting global shims to determine whether to try to add
-  //   other globals shimmed by the library (`ShimDOMException`,
-  //   `ShimDOMStringList`, `ShimEvent`, `ShimCustomEvent`, `ShimEventTarget`)
-  // Effectively defaults to `false` (ignored unless `true`)
-  'addNonIDBGlobals', // Used when setting global shims to determine whether to try to overwrite
-  //   other globals shimmed by the library (`DOMException`, `DOMStringList`,
-  //   `Event`, `CustomEvent`, `EventTarget`)
-  // Effectively defaults to `false` (ignored unless `true`)
-  'replaceNonIDBGlobals', // Overcoming limitations with node-sqlite3/storing database name on
-  //   file systems
-  // https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words
-  // Defaults to prefixing database with `D_`, escaping
-  //   `databaseCharacterEscapeList`, escaping NUL, and
-  //   escaping upper case letters, as well as enforcing
-  //   `databaseNameLengthLimit`
-  'escapeDatabaseName', // Not used internally; usable as a convenience method
-  'unescapeDatabaseName', // Defaults to global regex representing the following
-  //   (characters nevertheless commonly reserved in modern,
-  //   Unicode-supporting systems): 0x00-0x1F 0x7F " * / : < > ? \ |
-  'databaseCharacterEscapeList', // Defaults to 254 (shortest typical modern file length limit)
-  'databaseNameLengthLimit', // Boolean defaulting to true on whether to escape NFD-escaping
-  //   characters to avoid clashes on MacOS which performs NFD on files
-  'escapeNFDForDatabaseNames', // Boolean on whether to add the `.sqlite` extension to file names;
-  //   defaults to `true`
-  'addSQLiteExtension', // Various types of in-memory databases that can auto-delete
-  ['memoryDatabase', function (val) {
-    if (!/^(?::memory:|file::memory:(\?(?:(?!#)[\s\S])*)?(#(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?)?$/.test(val)) {
-      throw new TypeError('`memoryDatabase` must be the empty string, ":memory:", or a ' + '"file::memory:[?queryString][#hash] URL".');
-    }
-  }], // NODE-SPECIFIC CONFIG
-  // Boolean on whether to delete the database file itself after
-  //   `deleteDatabase`; defaults to `true` as the database will be empty
-  'deleteDatabaseFiles', 'databaseBasePath', 'sysDatabaseBasePath', // NODE-SPECIFIC WEBSQL CONFIG
-  'sqlBusyTimeout', // Defaults to 1000
-  'sqlTrace', // Callback not used by default
-  'sqlProfile' // Callback not used by default
-  ].forEach(function (prop) {
+    "DEBUG", // Effectively defaults to false (ignored unless `true`)
+    // Boolean (effectively defaults to true) on whether to cache WebSQL
+    //  `openDatabase` instances
+    "cacheDatabaseInstances", // Boolean on whether to auto-name databases (based on an
+    //   auto-increment) when the empty string is supplied; useful with
+    //   `memoryDatabase`; defaults to `false` which means the empty string
+    //   will be used as the (valid) database name
+    "autoName", // Determines whether the slow-performing `Object.setPrototypeOf`
+    //    calls required for full WebIDL compliance will be used. Probably
+    //    only needed for testing or environments where full introspection
+    //    on class relationships is required; see
+    //    http://stackoverflow.com/questions/41927589/rationales-consequences-of-webidl-class-inheritance-requirements
+    "fullIDLSupport", // Effectively defaults to false (ignored unless `true`)
+    // Boolean on whether to perform origin checks in `IDBFactory` methods
+    // Effectively defaults to `true` (must be set to `false` to cancel checks)
+    "checkOrigin", // Used by `IDBCursor` continue methods for number of records to cache;
+    //  Defaults to 100
+    "cursorPreloadPackSize", // See optional API (`shimIndexedDB.__setUnicodeIdentifiers`);
+    //    or just use the Unicode builds which invoke this method
+    //    automatically using the large, fully spec-compliant, regular
+    //    expression strings of `src/UnicodeIdentifiers.js`)
+    // In the non-Unicode builds, defaults to /[$A-Z_a-z]/
+    "UnicodeIDStart", // In the non-Unicode builds, defaults to /[$0-9A-Z_a-z]/
+    "UnicodeIDContinue", // Used by SCA.js for optional restructuring of typeson-registry
+    //   Structured Cloning Algorithm; should only be needed for ensuring data
+    //   created in 3.* versions of IndexedDBShim continue to work; see the
+    //   library `typeson-registry-sca-reverter` to get a function to do this
+    "registerSCA", // BROWSER-SPECIFIC CONFIG
+    "avoidAutoShim", // Where WebSQL is detected but where `indexedDB` is
+    //    missing or poor support is known (non-Chrome Android or
+    //    non-Safari iOS9), the shim will be auto-applied without
+    //   `shimIndexedDB.__useShim()`. Set this to `true` to avoid forcing
+    //    the shim for such cases.
+    // -----------SQL CONFIG----------
+    // Object (`window` in the browser) on which there may be an
+    //  `openDatabase` method (if any) for WebSQL. (The browser
+    //  throws if attempting to call `openDatabase` without the window
+    //  so this is why the config doesn't just allow the function.)
+    // Defaults to `window` or `self` in browser builds or
+    //  a singleton object with the `openDatabase` method set to
+    //  the "websql" package in Node.
+    "win", // For internal `openDatabase` calls made by `IDBFactory` methods;
+    //  per the WebSQL spec, "User agents are expected to use the display name
+    //  and the estimated database size to optimize the user experience.
+    //  For example, a user agent could use the estimated size to suggest an
+    //  initial quota to the user. This allows a site that is aware that it
+    //  will try to use hundreds of megabytes to declare this upfront, instead
+    //  of the user agent prompting the user for permission to increase the
+    //  quota every five megabytes."
+    // Defaults to (4 * 1024 * 1024) or (25 * 1024 * 1024) in Safari
+    "DEFAULT_DB_SIZE", // Whether to create indexes on SQLite tables (and also whether to try
+    //   dropping)
+    // Effectively defaults to `false` (ignored unless `true`)
+    "useSQLiteIndexes", // NODE-IMPINGING SETTINGS (created for sake of limitations in Node
+    //    or desktop file system implementation but applied by default in
+    //    browser for parity)
+    // File system module with `unlink` to remove deleted database files
+    "fs", // Used when setting global shims to determine whether to try to add
+    //   other globals shimmed by the library (`ShimDOMException`,
+    //   `ShimDOMStringList`, `ShimEvent`, `ShimCustomEvent`, `ShimEventTarget`)
+    // Effectively defaults to `false` (ignored unless `true`)
+    "addNonIDBGlobals", // Used when setting global shims to determine whether to try to overwrite
+    //   other globals shimmed by the library (`DOMException`, `DOMStringList`,
+    //   `Event`, `CustomEvent`, `EventTarget`)
+    // Effectively defaults to `false` (ignored unless `true`)
+    "replaceNonIDBGlobals", // Overcoming limitations with node-sqlite3/storing database name on
+    //   file systems
+    // https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words
+    // Defaults to prefixing database with `D_`, escaping
+    //   `databaseCharacterEscapeList`, escaping NUL, and
+    //   escaping upper case letters, as well as enforcing
+    //   `databaseNameLengthLimit`
+    "escapeDatabaseName", // Not used internally; usable as a convenience method
+    "unescapeDatabaseName", // Defaults to global regex representing the following
+    //   (characters nevertheless commonly reserved in modern,
+    //   Unicode-supporting systems): 0x00-0x1F 0x7F " * / : < > ? \ |
+    "databaseCharacterEscapeList", // Defaults to 254 (shortest typical modern file length limit)
+    "databaseNameLengthLimit", // Boolean defaulting to true on whether to escape NFD-escaping
+    //   characters to avoid clashes on MacOS which performs NFD on files
+    "escapeNFDForDatabaseNames", // Boolean on whether to add the `.sqlite` extension to file names;
+    //   defaults to `true`
+    "addSQLiteExtension", // Various types of in-memory databases that can auto-delete
+    ["memoryDatabase", function(val) {
+      if (!/^(?::memory:|file::memory:(\?(?:(?!#)[\s\S])*)?(#(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?)?$/.test(val)) {
+        throw new TypeError("`memoryDatabase` must be the empty string, \":memory:\", or a " + "\"file::memory:[?queryString][#hash] URL\".");
+      }
+    }], // NODE-SPECIFIC CONFIG
+    // Boolean on whether to delete the database file itself after
+    //   `deleteDatabase`; defaults to `true` as the database will be empty
+    "deleteDatabaseFiles", "databaseBasePath", "sysDatabaseBasePath", // NODE-SPECIFIC WEBSQL CONFIG
+    "sqlBusyTimeout", // Defaults to 1000
+    "sqlTrace", // Callback not used by default
+    "sqlProfile", // Callback not used by default
+  ].forEach(function(prop) {
     var validator;
 
     if (Array.isArray(prop)) {
@@ -1197,7 +1204,7 @@
         }
 
         map$1[prop] = val;
-      }
+      },
     });
   });
 
@@ -1205,37 +1212,37 @@
 
   function escapeUnmatchedSurrogates(arg) {
     // http://stackoverflow.com/a/6701665/271577
-    return arg.replace(/((?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])))(?!(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))|(^|(?:(?![\uD800-\uDBFF](?![\uDC00-\uDFFF]))[\s\S]))((?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))/g, function (_, unmatchedHighSurrogate, precedingLow, unmatchedLowSurrogate) {
+    return arg.replace(/((?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])))(?!(?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))|(^|(?:(?![\uD800-\uDBFF](?![\uDC00-\uDFFF]))[\s\S]))((?:(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))/g, function(_, unmatchedHighSurrogate, precedingLow, unmatchedLowSurrogate) {
       // Could add a corresponding surrogate for compatibility with `node-sqlite3`: http://bugs.python.org/issue12569 and http://stackoverflow.com/a/6701665/271577
       //   but Chrome having problems
       if (unmatchedHighSurrogate) {
-        return '^2' + unmatchedHighSurrogate.codePointAt().toString(16).padStart(4, '0');
+        return "^2" + unmatchedHighSurrogate.codePointAt().toString(16).padStart(4, "0");
       }
 
-      return (precedingLow || '') + '^3' + unmatchedLowSurrogate.codePointAt().toString(16).padStart(4, '0');
+      return (precedingLow || "") + "^3" + unmatchedLowSurrogate.codePointAt().toString(16).padStart(4, "0");
     });
   }
 
   function escapeNameForSQLiteIdentifier(arg) {
     // http://stackoverflow.com/a/6701665/271577
-    return '_' + // Prevent empty string
-    escapeUnmatchedSurrogates(arg.replace(/\^/g, '^^') // Escape our escape
-    // http://www.sqlite.org/src/tktview?name=57c971fc74
-    .replace(/\0/g, '^0') // We need to avoid identifiers being treated as duplicates based on SQLite's ASCII-only case-insensitive table and column names
-    // (For SQL in general, however, see http://stackoverflow.com/a/17215009/271577
-    // See also https://www.sqlite.org/faq.html#q18 re: Unicode (non-ASCII) case-insensitive not working
-    .replace(/([A-Z])/g, '^$1'));
+    return "_" + // Prevent empty string
+      escapeUnmatchedSurrogates(arg.replace(/\^/g, "^^") // Escape our escape
+        // http://www.sqlite.org/src/tktview?name=57c971fc74
+        .replace(/\0/g, "^0") // We need to avoid identifiers being treated as duplicates based on SQLite's ASCII-only case-insensitive table and column names
+        // (For SQL in general, however, see http://stackoverflow.com/a/17215009/271577
+        // See also https://www.sqlite.org/faq.html#q18 re: Unicode (non-ASCII) case-insensitive not working
+        .replace(/([A-Z])/g, "^$1"));
   } // The escaping of unmatched surrogates was needed by Chrome but not Node
 
 
   function escapeSQLiteStatement(arg) {
-    return escapeUnmatchedSurrogates(arg.replace(/\^/g, '^^').replace(/\0/g, '^0'));
+    return escapeUnmatchedSurrogates(arg.replace(/\^/g, "^^").replace(/\0/g, "^0"));
   }
 
   function unescapeSQLiteResponse(arg) {
-    return unescapeUnmatchedSurrogates(arg).replace(/(\^+)0/g, function (_, esc) {
-      return esc.length % 2 ? esc.slice(1) + '\0' : _;
-    }).replace(/\^\^/g, '^');
+    return unescapeUnmatchedSurrogates(arg).replace(/(\^+)0/g, function(_, esc) {
+      return esc.length % 2 ? esc.slice(1) + "\0" : _;
+    }).replace(/\^\^/g, "^");
   }
 
   function sqlEscape(arg) {
@@ -1244,11 +1251,11 @@
     // There is no need to escape ', `, or [], as
     //   we should always be within double quotes
     // NUL should have already been stripped
-    return arg.replace(/"/g, '""');
+    return arg.replace(/"/g, "\"\"");
   }
 
   function sqlQuote(arg) {
-    return '"' + sqlEscape(arg) + '"';
+    return "\"" + sqlEscape(arg) + "\"";
   }
 
   function escapeDatabaseNameForSQLAndFiles(db) {
@@ -1260,55 +1267,55 @@
       return CFG.escapeDatabaseName(escapeSQLiteStatement(db));
     }
 
-    db = 'D' + escapeNameForSQLiteIdentifier(db);
+    db = "D" + escapeNameForSQLiteIdentifier(db);
 
     if (CFG.escapeNFDForDatabaseNames !== false) {
       // ES6 copying of regex with different flags
-      db = db.replace(new RegExp(regex, 'gu'), function (expandable) {
-        return '^4' + expandable.codePointAt().toString(16).padStart(6, '0');
+      db = db.replace(new RegExp(regex, "gu"), function(expandable) {
+        return "^4" + expandable.codePointAt().toString(16).padStart(6, "0");
       });
     }
 
     if (CFG.databaseCharacterEscapeList !== false) {
-      db = db.replace(CFG.databaseCharacterEscapeList ? new RegExp(CFG.databaseCharacterEscapeList, 'gu') : /[\0-\x1F"\*\/:<>\?\\\|\x7F]/g, // eslint-disable-line no-control-regex
-      function (n0) {
-        // eslint-disable-next-line unicorn/prefer-code-point -- Switch to `codePointAt`?
-        return '^1' + n0.charCodeAt().toString(16).padStart(2, '0');
-      });
+      db = db.replace(CFG.databaseCharacterEscapeList ? new RegExp(CFG.databaseCharacterEscapeList, "gu") : /[\0-\x1F"\*\/:<>\?\\\|\x7F]/g, // eslint-disable-line no-control-regex
+        function(n0) {
+          // eslint-disable-next-line unicorn/prefer-code-point -- Switch to `codePointAt`?
+          return "^1" + n0.charCodeAt().toString(16).padStart(2, "0");
+        });
     }
 
     if (CFG.databaseNameLengthLimit !== false && db.length >= (CFG.databaseNameLengthLimit || 254) - (CFG.addSQLiteExtension !== false ? 7
-    /* '.sqlite'.length */
-    : 0)) {
-      throw new Error('Unexpectedly long database name supplied; length limit required for Node compatibility; passed length: ' + db.length + '; length limit setting: ' + (CFG.databaseNameLengthLimit || 254) + '.');
+      /* '.sqlite'.length */
+      : 0)) {
+      throw new Error("Unexpectedly long database name supplied; length limit required for Node compatibility; passed length: " + db.length + "; length limit setting: " + (CFG.databaseNameLengthLimit || 254) + ".");
     }
 
-    return db + (CFG.addSQLiteExtension !== false ? '.sqlite' : ''); // Shouldn't have quoting (do we even need NUL/case escaping here?)
+    return db + (CFG.addSQLiteExtension !== false ? ".sqlite" : ""); // Shouldn't have quoting (do we even need NUL/case escaping here?)
   }
 
   function unescapeUnmatchedSurrogates(arg) {
-    return arg.replace(/(\^+)3(d[0-9a-f]{3})/g, function (_, esc, lowSurr) {
+    return arg.replace(/(\^+)3(d[0-9a-f]{3})/g, function(_, esc, lowSurr) {
       return esc.length % 2 ? esc.slice(1) + String.fromCodePoint(Number.parseInt(lowSurr, 16)) : _;
-    }).replace(/(\^+)2(d[0-9a-f]{3})/g, function (_, esc, highSurr) {
+    }).replace(/(\^+)2(d[0-9a-f]{3})/g, function(_, esc, highSurr) {
       return esc.length % 2 ? esc.slice(1) + String.fromCodePoint(Number.parseInt(highSurr, 16)) : _;
     });
   } // Not in use internally but supplied for convenience
 
   function escapeStoreNameForSQL(store) {
-    return sqlQuote('S' + escapeNameForSQLiteIdentifier(store));
+    return sqlQuote("S" + escapeNameForSQLiteIdentifier(store));
   }
 
   function escapeIndexNameForSQL(index) {
-    return sqlQuote('I' + escapeNameForSQLiteIdentifier(index));
+    return sqlQuote("I" + escapeNameForSQLiteIdentifier(index));
   }
 
   function escapeIndexNameForSQLKeyColumn(index) {
-    return 'I' + escapeNameForSQLiteIdentifier(index);
+    return "I" + escapeNameForSQLiteIdentifier(index);
   }
 
   function sqlLIKEEscape(str) {
     // https://www.sqlite.org/lang_expr.html#like
-    return sqlEscape(str).replace(/\^/g, '^^');
+    return sqlEscape(str).replace(/\^/g, "^^");
   } // Babel doesn't seem to provide a means of using the `instanceof` operator with Symbol.hasInstance (yet?)
 
 
@@ -1317,39 +1324,39 @@
   }
 
   function isObj(obj) {
-    return obj && _typeof$1(obj) === 'object';
+    return obj && _typeof$1(obj) === "object";
   }
 
   function isDate(obj) {
-    return isObj(obj) && typeof obj.getDate === 'function';
+    return isObj(obj) && typeof obj.getDate === "function";
   }
 
   function isBlob(obj) {
-    return isObj(obj) && typeof obj.size === 'number' && typeof obj.slice === 'function' && !('lastModified' in obj);
+    return isObj(obj) && typeof obj.size === "number" && typeof obj.slice === "function" && !("lastModified" in obj);
   }
 
   function isFile(obj) {
-    return isObj(obj) && typeof obj.name === 'string' && typeof obj.slice === 'function' && 'lastModified' in obj;
+    return isObj(obj) && typeof obj.name === "string" && typeof obj.slice === "function" && "lastModified" in obj;
   }
 
   function isBinary(obj) {
-    return isObj(obj) && typeof obj.byteLength === 'number' && (typeof obj.slice === 'function' || // `TypedArray` (view on buffer) or `ArrayBuffer`
-    typeof obj.getFloat64 === 'function' // `DataView` (view on buffer)
+    return isObj(obj) && typeof obj.byteLength === "number" && (typeof obj.slice === "function" || // `TypedArray` (view on buffer) or `ArrayBuffer`
+      typeof obj.getFloat64 === "function" // `DataView` (view on buffer)
     );
   }
 
   function isIterable(obj) {
-    return isObj(obj) && typeof obj[Symbol.iterator] === 'function';
+    return isObj(obj) && typeof obj[Symbol.iterator] === "function";
   }
 
   function defineOuterInterface(obj, props) {
-    props.forEach(function (prop) {
+    props.forEach(function(prop) {
       var _o, _mutatorMap;
 
-      var o = (_o = {}, _mutatorMap = {}, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].get = function () {
-        throw new TypeError('Illegal invocation');
-      }, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].set = function (val) {
-        throw new TypeError('Illegal invocation');
+      var o = (_o = {}, _mutatorMap = {}, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].get = function() {
+        throw new TypeError("Illegal invocation");
+      }, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].set = function(val) {
+        throw new TypeError("Illegal invocation");
       }, _defineEnumerableProperties(_o, _mutatorMap), _o);
       var desc = Object.getOwnPropertyDescriptor(o, prop);
       Object.defineProperty(obj, prop, desc);
@@ -1357,11 +1364,11 @@
   }
 
   function defineReadonlyOuterInterface(obj, props) {
-    props.forEach(function (prop) {
+    props.forEach(function(prop) {
       var _o2, _mutatorMap2;
 
-      var o = (_o2 = {}, _mutatorMap2 = {}, _mutatorMap2[prop] = _mutatorMap2[prop] || {}, _mutatorMap2[prop].get = function () {
-        throw new TypeError('Illegal invocation');
+      var o = (_o2 = {}, _mutatorMap2 = {}, _mutatorMap2[prop] = _mutatorMap2[prop] || {}, _mutatorMap2[prop].get = function() {
+        throw new TypeError("Illegal invocation");
       }, _defineEnumerableProperties(_o2, _mutatorMap2), _o2);
       var desc = Object.getOwnPropertyDescriptor(o, prop);
       Object.defineProperty(obj, prop, desc);
@@ -1369,29 +1376,29 @@
   }
 
   function defineListenerProperties(obj, listeners) {
-    listeners = typeof listeners === 'string' ? [listeners] : listeners;
-    listeners.forEach(function (listener) {
+    listeners = typeof listeners === "string" ? [listeners] : listeners;
+    listeners.forEach(function(listener) {
       var _o3, _mutatorMap3;
 
-      var o = (_o3 = {}, _mutatorMap3 = {}, _mutatorMap3[listener] = _mutatorMap3[listener] || {}, _mutatorMap3[listener].get = function () {
-        return obj['__' + listener];
-      }, _mutatorMap3[listener] = _mutatorMap3[listener] || {}, _mutatorMap3[listener].set = function (val) {
-        obj['__' + listener] = val;
+      var o = (_o3 = {}, _mutatorMap3 = {}, _mutatorMap3[listener] = _mutatorMap3[listener] || {}, _mutatorMap3[listener].get = function() {
+        return obj["__" + listener];
+      }, _mutatorMap3[listener] = _mutatorMap3[listener] || {}, _mutatorMap3[listener].set = function(val) {
+        obj["__" + listener] = val;
       }, _defineEnumerableProperties(_o3, _mutatorMap3), _o3);
       var desc = Object.getOwnPropertyDescriptor(o, listener); // desc.enumerable = true; // Default
       // desc.configurable = true; // Default // Needed by support.js in W3C IndexedDB tests (for openListeners)
 
       Object.defineProperty(obj, listener, desc);
     });
-    listeners.forEach(function (l) {
+    listeners.forEach(function(l) {
       obj[l] = null;
     });
   }
 
   function defineReadonlyProperties(obj, props) {
     var getter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
-    props = typeof props === 'string' ? [props] : props;
-    props.forEach(function (prop) {
+    props = typeof props === "string" ? [props] : props;
+    props.forEach(function(prop) {
       var o;
 
       if (getter && prop in getter) {
@@ -1399,15 +1406,15 @@
       } else {
         var _o4, _mutatorMap4;
 
-        Object.defineProperty(obj, '__' + prop, {
+        Object.defineProperty(obj, "__" + prop, {
           enumerable: false,
           configurable: false,
-          writable: true
+          writable: true,
         }); // We must resort to this to get "get <name>" as
         //   the function `name` for proper IDL
 
-        o = (_o4 = {}, _mutatorMap4 = {}, _mutatorMap4[prop] = _mutatorMap4[prop] || {}, _mutatorMap4[prop].get = function () {
-          return this['__' + prop];
+        o = (_o4 = {}, _mutatorMap4 = {}, _mutatorMap4[prop] = _mutatorMap4[prop] || {}, _mutatorMap4[prop].get = function() {
+          return this["__" + prop];
         }, _defineEnumerableProperties(_o4, _mutatorMap4), _o4);
       }
 
@@ -1423,26 +1430,26 @@
     //   expression for identifiers, but these can be passed in, using the expressions
     //   found at https://gist.github.com/brettz9/b4cd6821d990daa023b2e604de371407
     // ID_Start (includes Other_ID_Start)
-    var UnicodeIDStart = CFG.UnicodeIDStart || '[$A-Z_a-z]'; // ID_Continue (includes Other_ID_Continue)
+    var UnicodeIDStart = CFG.UnicodeIDStart || "[$A-Z_a-z]"; // ID_Continue (includes Other_ID_Continue)
 
-    var UnicodeIDContinue = CFG.UnicodeIDContinue || '[$0-9A-Z_a-z]';
-    var IdentifierStart = '(?:' + UnicodeIDStart + '|[$_])';
-    var IdentifierPart = '(?:' + UnicodeIDContinue + "|[$_\u200C\u200D])";
-    return new RegExp('^' + IdentifierStart + IdentifierPart + '*$', 'u').test(item);
+    var UnicodeIDContinue = CFG.UnicodeIDContinue || "[$0-9A-Z_a-z]";
+    var IdentifierStart = "(?:" + UnicodeIDStart + "|[$_])";
+    var IdentifierPart = "(?:" + UnicodeIDContinue + "|[$_\u200C\u200D])";
+    return new RegExp("^" + IdentifierStart + IdentifierPart + "*$", "u").test(item);
   }
 
   function isValidKeyPathString(keyPathString) {
-    return typeof keyPathString === 'string' && (keyPathString === '' || isIdentifier(keyPathString) || keyPathString.split('.').every(function (pathComponent) {
+    return typeof keyPathString === "string" && (keyPathString === "" || isIdentifier(keyPathString) || keyPathString.split(".").every(function(pathComponent) {
       return isIdentifier(pathComponent);
     }));
   }
 
   function isValidKeyPath(keyPath) {
     return isValidKeyPathString(keyPath) || Array.isArray(keyPath) && keyPath.length && // Convert array from sparse to dense http://www.2ality.com/2012/06/dense-arrays.html
-    // See also https://heycam.github.io/webidl/#idl-DOMString
-    _toConsumableArray(keyPath).every(function (pathComponent) {
-      return isValidKeyPathString(pathComponent);
-    });
+      // See also https://heycam.github.io/webidl/#idl-DOMString
+      _toConsumableArray(keyPath).every(function(pathComponent) {
+        return isValidKeyPathString(pathComponent);
+      });
   }
 
   function enforceRange(number, type) {
@@ -1450,41 +1457,39 @@
     var max, min;
 
     switch (type) {
-      case 'unsigned long long':
-        {
-          max = 0x1FFFFFFFFFFFFF; // 2^53 - 1
+      case "unsigned long long": {
+        max = 0x1FFFFFFFFFFFFF; // 2^53 - 1
 
-          min = 0;
-          break;
-        }
+        min = 0;
+        break;
+      }
 
-      case 'unsigned long':
-        {
-          max = 0xFFFFFFFF; // 2^32 - 1
+      case "unsigned long": {
+        max = 0xFFFFFFFF; // 2^32 - 1
 
-          min = 0;
-          break;
-        }
+        min = 0;
+        break;
+      }
 
       default:
-        throw new Error('Unrecognized type supplied to enforceRange');
+        throw new Error("Unrecognized type supplied to enforceRange");
     }
 
     if (!Number.isFinite(number) || number > max || number < min) {
-      throw new TypeError('Invalid range: ' + number);
+      throw new TypeError("Invalid range: " + number);
     }
 
     return number;
   }
 
   function convertToDOMString(v, treatNullAs) {
-    return v === null && treatNullAs ? '' : ToString(v);
+    return v === null && treatNullAs ? "" : ToString(v);
   }
 
   function ToString(o) {
     // Todo: See `es-abstract/es7`
     // `String()` will not throw with Symbols
-    return '' + o; // eslint-disable-line no-implicit-coercion
+    return "" + o; // eslint-disable-line no-implicit-coercion
   }
 
   function convertToSequenceDOMString(val) {
@@ -1492,7 +1497,7 @@
     if (isIterable(val)) {
       // We don't want conversion to array to convert primitives
       // Per <https://heycam.github.io/webidl/#es-DOMString>, converting to a `DOMString` to be via `ToString`: https://tc39.github.io/ecma262/#sec-tostring
-      return _toConsumableArray(val).map(function (item) {
+      return _toConsumableArray(val).map(function(item) {
         return ToString(item);
       });
     }
@@ -1525,21 +1530,21 @@
 
   Object.defineProperty(ShimEvent, Symbol.hasInstance, {
     value: function value(obj) {
-      return isObj(obj) && 'target' in obj && typeof obj.bubbles === 'boolean';
-    }
+      return isObj(obj) && "target" in obj && typeof obj.bubbles === "boolean";
+    },
   });
 
-  var readonlyProperties$6 = ['oldVersion', 'newVersion']; // Babel apparently having a problem adding `hasInstance` to a class, so we are redefining as a function
+  var readonlyProperties$6 = ["oldVersion", "newVersion"]; // Babel apparently having a problem adding `hasInstance` to a class, so we are redefining as a function
 
-  function IDBVersionChangeEvent(type
-  /* , eventInitDict */
+  function IDBVersionChangeEvent(type,
+                                 /* , eventInitDict */
   ) {
     // eventInitDict is a IDBVersionChangeEventInit (but is not defined as a global)
     ShimEvent.call(this, type);
-    this[Symbol.toStringTag] = 'IDBVersionChangeEvent';
+    this[Symbol.toStringTag] = "IDBVersionChangeEvent";
 
-    this.toString = function () {
-      return '[object IDBVersionChangeEvent]';
+    this.toString = function() {
+      return "[object IDBVersionChangeEvent]";
     }; // eslint-disable-next-line prefer-rest-params
 
 
@@ -1547,17 +1552,17 @@
   }
 
   IDBVersionChangeEvent.prototype = Object.create(ShimEvent.prototype);
-  IDBVersionChangeEvent.prototype[Symbol.toStringTag] = 'IDBVersionChangeEventPrototype';
-  readonlyProperties$6.forEach(function (prop) {
+  IDBVersionChangeEvent.prototype[Symbol.toStringTag] = "IDBVersionChangeEventPrototype";
+  readonlyProperties$6.forEach(function(prop) {
     var _o, _mutatorMap;
 
     // Ensure for proper interface testing that "get <name>" is the function name
-    var o = (_o = {}, _mutatorMap = {}, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].get = function () {
+    var o = (_o = {}, _mutatorMap = {}, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].get = function() {
       if (!(this instanceof IDBVersionChangeEvent)) {
-        throw new TypeError('Illegal invocation');
+        throw new TypeError("Illegal invocation");
       }
 
-      return this.__eventInitDict && this.__eventInitDict[prop] || (prop === 'oldVersion' ? 0 : null);
+      return this.__eventInitDict && this.__eventInitDict[prop] || (prop === "oldVersion" ? 0 : null);
     }, _defineEnumerableProperties(_o, _mutatorMap), _o);
     var desc = Object.getOwnPropertyDescriptor(o, prop); // desc.enumerable = true; // Default
     // desc.configurable = true; // Default
@@ -1566,17 +1571,17 @@
   });
   Object.defineProperty(IDBVersionChangeEvent, Symbol.hasInstance, {
     value: function value(obj) {
-      return isObj(obj) && 'oldVersion' in obj && typeof obj.defaultPrevented === 'boolean';
-    }
+      return isObj(obj) && "oldVersion" in obj && typeof obj.defaultPrevented === "boolean";
+    },
   });
-  Object.defineProperty(IDBVersionChangeEvent.prototype, 'constructor', {
+  Object.defineProperty(IDBVersionChangeEvent.prototype, "constructor", {
     enumerable: false,
     writable: true,
     configurable: true,
-    value: IDBVersionChangeEvent
+    value: IDBVersionChangeEvent,
   });
-  Object.defineProperty(IDBVersionChangeEvent, 'prototype', {
-    writable: false
+  Object.defineProperty(IDBVersionChangeEvent, "prototype", {
+    writable: false,
   });
 
   /**
@@ -1587,7 +1592,7 @@
    */
 
   function createNativeDOMException(name, message) {
-    return new DOMException.prototype.constructor(message, name || 'DOMException');
+    return new DOMException.prototype.constructor(message, name || "DOMException");
   } // From web-platform-tests testharness.js name_code_map (though not in new spec)
 
 
@@ -1623,7 +1628,7 @@
     ReadOnlyError: 0,
     VersionError: 0,
     OperationError: 0,
-    NotAllowedError: 0
+    NotAllowedError: 0,
   };
   var legacyCodes = {
     INDEX_SIZE_ERR: 1,
@@ -1650,8 +1655,9 @@
     QUOTA_EXCEEDED_ERR: 22,
     TIMEOUT_ERR: 23,
     INVALID_NODE_TYPE_ERR: 24,
-    DATA_CLONE_ERR: 25
+    DATA_CLONE_ERR: 25,
   };
+
   /**
    *
    * @returns {DOMException}
@@ -1660,34 +1666,34 @@
   function createNonNativeDOMExceptionClass() {
     function DOMException(message, name) {
       // const err = Error.prototype.constructor.call(this, message); // Any use to this? Won't set this.message
-      this[Symbol.toStringTag] = 'DOMException';
+      this[Symbol.toStringTag] = "DOMException";
       this._code = name in codes ? codes[name] : legacyCodes[name] || 0;
-      this._name = name || 'Error'; // We avoid `String()` in this next line as it converts Symbols
+      this._name = name || "Error"; // We avoid `String()` in this next line as it converts Symbols
 
-      this._message = message === undefined ? '' : '' + message; // eslint-disable-line no-implicit-coercion
+      this._message = message === undefined ? "" : "" + message; // eslint-disable-line no-implicit-coercion
 
-      Object.defineProperty(this, 'code', {
+      Object.defineProperty(this, "code", {
         configurable: true,
         enumerable: true,
         writable: true,
-        value: this._code
+        value: this._code,
       });
 
       if (name !== undefined) {
-        Object.defineProperty(this, 'name', {
+        Object.defineProperty(this, "name", {
           configurable: true,
           enumerable: true,
           writable: true,
-          value: this._name
+          value: this._name,
         });
       }
 
       if (message !== undefined) {
-        Object.defineProperty(this, 'message', {
+        Object.defineProperty(this, "message", {
           configurable: true,
           enumerable: false,
           writable: true,
-          value: this._message
+          value: this._message,
         });
       }
     } // Necessary for W3C tests which complains if `DOMException` has properties on its "own" prototype
@@ -1701,65 +1707,66 @@
 
     DummyDOMException.prototype = Object.create(Error.prototype); // Intended for subclassing
 
-    ['name', 'message'].forEach(function (prop) {
+    ["name", "message"].forEach(function(prop) {
       Object.defineProperty(DummyDOMException.prototype, prop, {
         enumerable: true,
         get: function get() {
           if (!(this instanceof DOMException || this instanceof DummyDOMException || this instanceof Error)) {
-            throw new TypeError('Illegal invocation');
+            throw new TypeError("Illegal invocation");
           }
 
-          return this['_' + prop];
-        }
+          return this["_" + prop];
+        },
       });
     }); // DOMException uses the same `toString` as `Error`
 
-    Object.defineProperty(DummyDOMException.prototype, 'code', {
+    Object.defineProperty(DummyDOMException.prototype, "code", {
       configurable: true,
       enumerable: true,
       get: function get() {
-        throw new TypeError('Illegal invocation');
-      }
+        throw new TypeError("Illegal invocation");
+      },
     });
     DOMException.prototype = new DummyDOMException();
-    DOMException.prototype[Symbol.toStringTag] = 'DOMExceptionPrototype';
-    Object.defineProperty(DOMException, 'prototype', {
-      writable: false
+    DOMException.prototype[Symbol.toStringTag] = "DOMExceptionPrototype";
+    Object.defineProperty(DOMException, "prototype", {
+      writable: false,
     });
-    Object.keys(codes).forEach(function (codeName) {
+    Object.keys(codes).forEach(function(codeName) {
       Object.defineProperty(DOMException.prototype, codeName, {
         enumerable: true,
         configurable: false,
-        value: codes[codeName]
+        value: codes[codeName],
       });
       Object.defineProperty(DOMException, codeName, {
         enumerable: true,
         configurable: false,
-        value: codes[codeName]
+        value: codes[codeName],
       });
     });
-    Object.keys(legacyCodes).forEach(function (codeName) {
+    Object.keys(legacyCodes).forEach(function(codeName) {
       Object.defineProperty(DOMException.prototype, codeName, {
         enumerable: true,
         configurable: false,
-        value: legacyCodes[codeName]
+        value: legacyCodes[codeName],
       });
       Object.defineProperty(DOMException, codeName, {
         enumerable: true,
         configurable: false,
-        value: legacyCodes[codeName]
+        value: legacyCodes[codeName],
       });
     });
-    Object.defineProperty(DOMException.prototype, 'constructor', {
+    Object.defineProperty(DOMException.prototype, "constructor", {
       writable: true,
       configurable: true,
       enumerable: false,
-      value: DOMException
+      value: DOMException,
     });
     return DOMException;
   }
 
   var ShimNonNativeDOMException = createNonNativeDOMExceptionClass();
+
   /**
    * Creates a generic Error object.
    * @param {string} name
@@ -1770,6 +1777,7 @@
   function createNonNativeDOMException(name, message) {
     return new ShimNonNativeDOMException(message, name);
   }
+
   /**
    * Logs detailed error information to the console.
    * @param {string} name
@@ -1785,16 +1793,17 @@
         error = error.message;
       }
 
-      var method = typeof console.error === 'function' ? 'error' : 'log';
-      console[method](name + ': ' + message + '. ' + (error || ''));
+      var method = typeof console.error === "function" ? "error" : "log";
+      console[method](name + ": " + message + ". " + (error || ""));
       console.trace && console.trace();
     }
   }
 
   function isErrorOrDOMErrorOrDOMException(obj) {
-    return obj && _typeof$1(obj) === 'object' && // We don't use util.isObj here as mutual dependency causing problems in Babel with browser
-    typeof obj.name === 'string';
+    return obj && _typeof$1(obj) === "object" && // We don't use util.isObj here as mutual dependency causing problems in Babel with browser
+      typeof obj.name === "string";
   }
+
   /**
    * Finds the error argument.  This is useful because some WebSQL callbacks
    * pass the error as the first argument, and some pass it as the second
@@ -1813,7 +1822,7 @@
       }
 
       var _iterator = _createForOfIteratorHelper(args),
-          _step;
+        _step;
 
       try {
         for (_iterator.s(); !(_step = _iterator.n()).done;) {
@@ -1823,7 +1832,7 @@
             return arg;
           }
 
-          if (arg && typeof arg.message === 'string') {
+          if (arg && typeof arg.message === "string") {
             err = arg;
           }
         }
@@ -1836,6 +1845,7 @@
 
     return err;
   }
+
   /**
    *
    * @param {external:WebSQLError} webSQLErr
@@ -1847,13 +1857,12 @@
     var name, message;
 
     switch (webSQLErr.code) {
-      case 4:
-        {
-          // SQLError.QUOTA_ERR
-          name = 'QuotaExceededError';
-          message = 'The operation failed because there was not enough ' + 'remaining storage space, or the storage quota was reached ' + 'and the user declined to give more space to the database.';
-          break;
-        }
+      case 4: {
+        // SQLError.QUOTA_ERR
+        name = "QuotaExceededError";
+        message = "The operation failed because there was not enough " + "remaining storage space, or the storage quota was reached " + "and the user declined to give more space to the database.";
+        break;
+      }
 
       /*
       // Should a WebSQL timeout treat as IndexedDB `TransactionInactiveError` or `UnknownError`?
@@ -1865,44 +1874,45 @@
       }
       */
 
-      default:
-        {
-          name = 'UnknownError';
-          message = 'The operation failed for reasons unrelated to the database itself and not covered by any other errors.';
-          break;
-        }
+      default: {
+        name = "UnknownError";
+        message = "The operation failed for reasons unrelated to the database itself and not covered by any other errors.";
+        break;
+      }
     }
 
-    message += ' (' + webSQLErr.message + ')--(' + webSQLErr.code + ')';
+    message += " (" + webSQLErr.message + ")--(" + webSQLErr.code + ")";
     var err = createDOMException(name, message);
     err.sqlError = webSQLErr;
     return err;
   }
 
   var test,
-      useNativeDOMException = false; // Test whether we can use the browser's native DOMException class
+    useNativeDOMException = false; // Test whether we can use the browser's native DOMException class
 
   try {
-    test = createNativeDOMException('test name', 'test message');
+    test = createNativeDOMException("test name", "test message");
 
-    if (isErrorOrDOMErrorOrDOMException(test) && test.name === 'test name' && test.message === 'test message') {
+    if (isErrorOrDOMErrorOrDOMException(test) && test.name === "test name" && test.message === "test message") {
       // Native DOMException works as expected
       useNativeDOMException = true;
     }
-  } catch (e) {}
+  } catch (e) {
+  }
 
-  var createDOMException = useNativeDOMException ? function (name, message, error) {
+  var createDOMException = useNativeDOMException ? function(name, message, error) {
     logError(name, message, error);
     return createNativeDOMException(name, message);
-  } : function (name, message, error) {
+  } : function(name, message, error) {
     logError(name, message, error);
     return createNonNativeDOMException(name, message);
   };
   var ShimDOMException = useNativeDOMException ? DOMException : ShimNonNativeDOMException;
 
-  var listeners$2 = ['onsuccess', 'onerror'];
-  var readonlyProperties$5 = ['source', 'transaction', 'readyState'];
-  var doneFlagGetters = ['result', 'error'];
+  var listeners$2 = ["onsuccess", "onerror"];
+  var readonlyProperties$5 = ["source", "transaction", "readyState"];
+  var doneFlagGetters = ["result", "error"];
+
   /**
    * The IDBRequest Object that is returns for all async calls.
    * @see http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#request-api
@@ -1910,45 +1920,45 @@
    */
 
   function IDBRequest() {
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   } // eslint-disable-next-line func-name-matching
 
 
   IDBRequest.__super = function IDBRequest() {
     var _this = this;
 
-    this[Symbol.toStringTag] = 'IDBRequest';
+    this[Symbol.toStringTag] = "IDBRequest";
 
     this.__setOptions({
-      legacyOutputDidListenersThrowFlag: true // Event hook for IndexedB
+      legacyOutputDidListenersThrowFlag: true, // Event hook for IndexedB
 
     });
 
-    doneFlagGetters.forEach(function (prop) {
-      Object.defineProperty(_this, '__' + prop, {
+    doneFlagGetters.forEach(function(prop) {
+      Object.defineProperty(_this, "__" + prop, {
         enumerable: false,
         configurable: false,
-        writable: true
+        writable: true,
       });
       Object.defineProperty(_this, prop, {
         enumerable: true,
         configurable: true,
         get: function get() {
           if (!this.__done) {
-            throw createDOMException('InvalidStateError', "Can't get " + prop + '; the request is still pending.');
+            throw createDOMException("InvalidStateError", "Can't get " + prop + "; the request is still pending.");
           }
 
-          return this['__' + prop];
-        }
+          return this["__" + prop];
+        },
       });
     });
     defineReadonlyProperties(this, readonlyProperties$5, {
       readyState: {
         get readyState() {
-          return this.__done ? 'done' : 'pending';
-        }
+          return this.__done ? "done" : "pending";
+        },
 
-      }
+      },
     });
     defineListenerProperties(this, listeners$2);
     this.__result = undefined;
@@ -1956,17 +1966,17 @@
     this.__done = false;
   };
 
-  IDBRequest.__createInstance = function () {
+  IDBRequest.__createInstance = function() {
     return new IDBRequest.__super();
   };
 
   IDBRequest.prototype = EventTargetFactory.createInstance({
-    extraProperties: ['debug']
+    extraProperties: ["debug"],
   });
-  IDBRequest.prototype[Symbol.toStringTag] = 'IDBRequestPrototype';
+  IDBRequest.prototype[Symbol.toStringTag] = "IDBRequestPrototype";
 
-  IDBRequest.prototype.__getParent = function () {
-    if (this.toString() === '[object IDBOpenDBRequest]') {
+  IDBRequest.prototype.__getParent = function() {
+    if (this.toString() === "[object IDBOpenDBRequest]") {
       return null;
     }
 
@@ -1977,45 +1987,46 @@
   defineReadonlyOuterInterface(IDBRequest.prototype, readonlyProperties$5);
   defineReadonlyOuterInterface(IDBRequest.prototype, doneFlagGetters);
   defineOuterInterface(IDBRequest.prototype, listeners$2);
-  Object.defineProperty(IDBRequest.prototype, 'constructor', {
+  Object.defineProperty(IDBRequest.prototype, "constructor", {
     enumerable: false,
     writable: true,
     configurable: true,
-    value: IDBRequest
+    value: IDBRequest,
   });
   IDBRequest.__super.prototype = IDBRequest.prototype;
-  Object.defineProperty(IDBRequest, 'prototype', {
-    writable: false
+  Object.defineProperty(IDBRequest, "prototype", {
+    writable: false,
   });
-  var openListeners = ['onblocked', 'onupgradeneeded'];
+  var openListeners = ["onblocked", "onupgradeneeded"];
+
   /**
    * The IDBOpenDBRequest called when a database is opened.
    * @class
    */
 
   function IDBOpenDBRequest() {
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
   IDBOpenDBRequest.prototype = Object.create(IDBRequest.prototype);
-  Object.defineProperty(IDBOpenDBRequest.prototype, 'constructor', {
+  Object.defineProperty(IDBOpenDBRequest.prototype, "constructor", {
     enumerable: false,
     writable: true,
     configurable: true,
-    value: IDBOpenDBRequest
+    value: IDBOpenDBRequest,
   });
   var IDBOpenDBRequestAlias = IDBOpenDBRequest;
 
-  IDBOpenDBRequest.__createInstance = function () {
+  IDBOpenDBRequest.__createInstance = function() {
     function IDBOpenDBRequest() {
       IDBRequest.__super.call(this);
 
-      this[Symbol.toStringTag] = 'IDBOpenDBRequest';
+      this[Symbol.toStringTag] = "IDBOpenDBRequest";
 
       this.__setOptions({
         legacyOutputDidListenersThrowFlag: true,
         // Event hook for IndexedB
-        extraProperties: ['oldVersion', 'newVersion', 'debug']
+        extraProperties: ["oldVersion", "newVersion", "debug"],
       }); // Ensure EventTarget preserves our properties
 
 
@@ -2027,18 +2038,18 @@
   };
 
   defineOuterInterface(IDBOpenDBRequest.prototype, openListeners);
-  IDBOpenDBRequest.prototype[Symbol.toStringTag] = 'IDBOpenDBRequestPrototype';
-  Object.defineProperty(IDBOpenDBRequest, 'prototype', {
-    writable: false
+  IDBOpenDBRequest.prototype[Symbol.toStringTag] = "IDBOpenDBRequestPrototype";
+  Object.defineProperty(IDBOpenDBRequest, "prototype", {
+    writable: false,
   });
 
-  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
+  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
 
   //   not doing the trick for our WebSQL transactions (at least in Node),
   //   we are forced to make the promises run fully synchronously.
 
   function isPromise(p) {
-    return p && typeof p.then === 'function';
+    return p && typeof p.then === "function";
   }
 
   function addReject(prom, reject) {
@@ -2047,9 +2058,9 @@
 
 
   var PENDING = 2,
-      FULFILLED = 0,
-      // We later abuse these as array indices
-  REJECTED = 1;
+    FULFILLED = 0,
+    // We later abuse these as array indices
+    REJECTED = 1;
 
   function SyncPromise(fn) {
     var self = this;
@@ -2062,7 +2073,7 @@
     function transist(val, state) {
       self.v = val;
       self.s = state;
-      self.c[state].forEach(function (fn) {
+      self.c[state].forEach(function(fn) {
         fn(val);
       }); // Release memory, but if no handlers have been added, as we
       //   assume that we will resolve/reject (truly) synchronously
@@ -2097,10 +2108,10 @@
 
   var prot = SyncPromise.prototype;
 
-  prot.then = function (cb, errBack) {
+  prot.then = function(cb, errBack) {
     var self = this;
-    return new SyncPromise(function (resolve, reject) {
-      var rej = typeof errBack === 'function' ? errBack : reject;
+    return new SyncPromise(function(resolve, reject) {
+      var rej = typeof errBack === "function" ? errBack : reject;
 
       function settle() {
         try {
@@ -2121,9 +2132,9 @@
     });
   };
 
-  prot["catch"] = function (cb) {
+  prot["catch"] = function(cb) {
     var self = this;
-    return new SyncPromise(function (resolve, reject) {
+    return new SyncPromise(function(resolve, reject) {
       function settle() {
         try {
           resolve(cb(self.v));
@@ -2143,8 +2154,8 @@
     });
   };
 
-  SyncPromise.all = function (promises) {
-    return new SyncPromise(function (resolve, reject, l) {
+  SyncPromise.all = function(promises) {
+    return new SyncPromise(function(resolve, reject, l) {
       l = promises.length;
       var newPromises = [];
 
@@ -2153,9 +2164,9 @@
         return;
       }
 
-      promises.forEach(function (p, i) {
+      promises.forEach(function(p, i) {
         if (isPromise(p)) {
-          addReject(p.then(function (res) {
+          addReject(p.then(function(res) {
             newPromises[i] = res;
             --l || resolve(newPromises);
           }), reject);
@@ -2167,12 +2178,12 @@
     });
   };
 
-  SyncPromise.race = function (promises) {
+  SyncPromise.race = function(promises) {
     var resolved = false;
-    return new SyncPromise(function (resolve, reject) {
-      promises.some(function (p, i) {
+    return new SyncPromise(function(resolve, reject) {
+      promises.some(function(p, i) {
         if (isPromise(p)) {
-          addReject(p.then(function (res) {
+          addReject(p.then(function(res) {
             if (resolved) {
               return;
             }
@@ -2189,14 +2200,14 @@
     });
   };
 
-  SyncPromise.resolve = function (val) {
-    return new SyncPromise(function (resolve, reject) {
+  SyncPromise.resolve = function(val) {
+    return new SyncPromise(function(resolve, reject) {
       resolve(val);
     });
   };
 
-  SyncPromise.reject = function (val) {
-    return new SyncPromise(function (resolve, reject) {
+  SyncPromise.reject = function(val) {
+    return new SyncPromise(function(resolve, reject) {
       reject(val);
     });
   };
@@ -2220,12 +2231,12 @@
       var decodedKey1 = _decode(encodedKey1);
       var decodedKey2 = _decode(encodedKey2);
 
-      if (_typeof$1(first) === 'object') {
+      if (_typeof$1(first) === "object") {
         first = JSON.stringify(first);
         decodedKey1 = JSON.stringify(decodedKey1);
       }
 
-      if (_typeof$1(second) === 'object') {
+      if (_typeof$1(second) === "object") {
         second = JSON.stringify(second);
         decodedKey2 = JSON.stringify(decodedKey2);
       } // Encoding/decoding mismatches are usually due to a loss of
@@ -2233,11 +2244,11 @@
 
 
       if (decodedKey1 !== first) {
-        console.warn(first + ' was incorrectly encoded as ' + decodedKey1);
+        console.warn(first + " was incorrectly encoded as " + decodedKey1);
       }
 
       if (decodedKey2 !== second) {
-        console.warn(second + ' was incorrectly encoded as ' + decodedKey2);
+        console.warn(second + " was incorrectly encoded as " + decodedKey2);
       }
     }
 
@@ -2259,13 +2270,13 @@
     date: 300,
     string: 400,
     binary: 500,
-    array: 600
+    array: 600,
   };
   var keyTypes = Object.keys(keyTypeToEncodedChar);
-  keyTypes.forEach(function (k) {
+  keyTypes.forEach(function(k) {
     keyTypeToEncodedChar[k] = String.fromCodePoint(keyTypeToEncodedChar[k]);
   });
-  var encodedCharToKeyType = keyTypes.reduce(function (o, k) {
+  var encodedCharToKeyType = keyTypes.reduce(function(o, k) {
     o[keyTypeToEncodedChar[k]] = k;
     return o;
   }, {});
@@ -2279,15 +2290,15 @@
    *  - "positiveInfinity": Sorts above all other values.
    */
 
-  var signValues = ['negativeInfinity', 'bigNegative', 'smallNegative', 'smallPositive', 'bigPositive', 'positiveInfinity'];
+  var signValues = ["negativeInfinity", "bigNegative", "smallNegative", "smallPositive", "bigPositive", "positiveInfinity"];
   var types = {
     invalid: {
       encode: function encode(key) {
-        return keyTypeToEncodedChar.invalid + '-';
+        return keyTypeToEncodedChar.invalid + "-";
       },
       decode: function decode(key) {
         return undefined;
-      }
+      },
     },
     // Numbers are represented in a lexically sortable base-32 sign-exponent-mantissa
     // notation.
@@ -2304,14 +2315,14 @@
       // sign-exponent-mantissa strings.
       encode: function encode(key) {
         var key32 = key === Number.MIN_VALUE // Mocha test `IDBFactory/cmp-spec.js` exposed problem for some
-        //   Node (and Chrome) versions with `Number.MIN_VALUE` being treated
-        //   as 0
-        // https://stackoverflow.com/questions/43305403/number-min-value-and-tostring
-        ? '0.' + '0'.repeat(214) + '2' : Math.abs(key).toString(32); // Get the index of the decimal.
+          //   Node (and Chrome) versions with `Number.MIN_VALUE` being treated
+          //   as 0
+          // https://stackoverflow.com/questions/43305403/number-min-value-and-tostring
+          ? "0." + "0".repeat(214) + "2" : Math.abs(key).toString(32); // Get the index of the decimal.
 
-        var decimalIndex = key32.indexOf('.'); // Remove the decimal.
+        var decimalIndex = key32.indexOf("."); // Remove the decimal.
 
-        key32 = decimalIndex !== -1 ? key32.replace('.', '') : key32; // Get the index of the first significant digit.
+        key32 = decimalIndex !== -1 ? key32.replace(".", "") : key32; // Get the index of the first significant digit.
 
         var significantDigitIndex = key32.search(/(?:(?!0)[\s\S])/); // Truncate leading zeros.
 
@@ -2323,22 +2334,22 @@
           if (key < 0) {
             // Negative exponent case:
             if (key > -1) {
-              sign = signValues.indexOf('smallNegative');
+              sign = signValues.indexOf("smallNegative");
               exponent = padBase32Exponent(significantDigitIndex);
               mantissa = flipBase32(padBase32Mantissa(key32)); // Non-negative exponent case:
             } else {
-              sign = signValues.indexOf('bigNegative');
+              sign = signValues.indexOf("bigNegative");
               exponent = flipBase32(padBase32Exponent(decimalIndex !== -1 ? decimalIndex : key32.length));
               mantissa = flipBase32(padBase32Mantissa(key32));
             } // Non-negative cases:
             // Negative exponent case:
 
           } else if (key < 1) {
-            sign = signValues.indexOf('smallPositive');
+            sign = signValues.indexOf("smallPositive");
             exponent = flipBase32(padBase32Exponent(significantDigitIndex));
             mantissa = padBase32Mantissa(key32); // Non-negative exponent case:
           } else {
-            sign = signValues.indexOf('bigPositive');
+            sign = signValues.indexOf("bigPositive");
             exponent = padBase32Exponent(decimalIndex !== -1 ? decimalIndex : key32.length);
             mantissa = padBase32Mantissa(key32);
           } // Infinite cases:
@@ -2346,10 +2357,10 @@
         } else {
           exponent = zeros(2);
           mantissa = zeros(11);
-          sign = signValues.indexOf(key > 0 ? 'positiveInfinity' : 'negativeInfinity');
+          sign = signValues.indexOf(key > 0 ? "positiveInfinity" : "negativeInfinity");
         }
 
-        return keyTypeToEncodedChar.number + '-' + sign + exponent + mantissa;
+        return keyTypeToEncodedChar.number + "-" + sign + exponent + mantissa;
       },
       // The decode step must interpret the sign, reflip values encoded as the 32's complements,
       // apply signs to the exponent and mantissa, do the base-32 power operation, and return
@@ -2360,33 +2371,33 @@
         var mantissa = key.slice(5, 16);
 
         switch (signValues[sign]) {
-          case 'negativeInfinity':
+          case "negativeInfinity":
             return Number.NEGATIVE_INFINITY;
 
-          case 'positiveInfinity':
+          case "positiveInfinity":
             return Number.POSITIVE_INFINITY;
 
-          case 'bigPositive':
+          case "bigPositive":
             return pow32(mantissa, exponent);
 
-          case 'smallPositive':
+          case "smallPositive":
             exponent = negate(flipBase32(exponent));
             return pow32(mantissa, exponent);
 
-          case 'smallNegative':
+          case "smallNegative":
             exponent = negate(exponent);
             mantissa = flipBase32(mantissa);
             return -pow32(mantissa, exponent);
 
-          case 'bigNegative':
+          case "bigNegative":
             exponent = flipBase32(exponent);
             mantissa = flipBase32(mantissa);
             return -pow32(mantissa, exponent);
 
           default:
-            throw new Error('Invalid number.');
+            throw new Error("Invalid number.");
         }
-      }
+      },
     },
     // Strings are encoded as JSON strings (with quotes and unicode characters escaped).
     //
@@ -2400,21 +2411,21 @@
       encode: function encode(key, inArray) {
         if (inArray) {
           // prepend each character with a dash, and append a space to the end
-          key = key.replace(/((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))/g, '-$1') + ' ';
+          key = key.replace(/((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))/g, "-$1") + " ";
         }
 
-        return keyTypeToEncodedChar.string + '-' + key;
+        return keyTypeToEncodedChar.string + "-" + key;
       },
       decode: function decode(key, inArray) {
         key = key.slice(2);
 
         if (inArray) {
           // remove the space at the end, and the dash before each character
-          key = key.slice(0, -1).replace(/\x2D((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))/g, '$1');
+          key = key.slice(0, -1).replace(/\x2D((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))/g, "$1");
         }
 
         return key;
-      }
+      },
     },
     // Arrays are encoded as JSON strings.
     // An extra, value is added to each array during encoding to make
@@ -2424,13 +2435,13 @@
         var encoded = [];
 
         var _iterator = _createForOfIteratorHelper(key.entries()),
-            _step;
+          _step;
 
         try {
           for (_iterator.s(); !(_step = _iterator.n()).done;) {
             var _step$value = _slicedToArray(_step.value, 2),
-                i = _step$value[0],
-                item = _step$value[1];
+              i = _step$value[0],
+              item = _step$value[1];
 
             var encodedItem = _encode(item, true); // encode the array item
 
@@ -2443,9 +2454,9 @@
           _iterator.f();
         }
 
-        encoded.push(keyTypeToEncodedChar.invalid + '-'); // append an extra item, so empty arrays sort correctly
+        encoded.push(keyTypeToEncodedChar.invalid + "-"); // append an extra item, so empty arrays sort correctly
 
-        return keyTypeToEncodedChar.array + '-' + JSON.stringify(encoded);
+        return keyTypeToEncodedChar.array + "-" + JSON.stringify(encoded);
       },
       decode: function decode(key) {
         var decoded = JSON.parse(key.slice(2));
@@ -2461,38 +2472,39 @@
         }
 
         return decoded;
-      }
+      },
     },
     // Dates are encoded as ISO 8601 strings, in UTC time zone.
     date: {
       encode: function encode(key) {
-        return keyTypeToEncodedChar.date + '-' + key.toJSON();
+        return keyTypeToEncodedChar.date + "-" + key.toJSON();
       },
       decode: function decode(key) {
         return new Date(key.slice(2));
-      }
+      },
     },
     binary: {
       // `ArrayBuffer`/Views on buffers (`TypedArray` or `DataView`)
       encode: function encode(key) {
-        return keyTypeToEncodedChar.binary + '-' + (key.byteLength ? _toConsumableArray(getCopyBytesHeldByBufferSource(key)).map(function (b) {
-          return String(b).padStart(3, '0');
-        }) // e.g., '255,005,254,000,001,033'
-        : '');
+        return keyTypeToEncodedChar.binary + "-" + (key.byteLength ? _toConsumableArray(getCopyBytesHeldByBufferSource(key)).map(function(b) {
+            return String(b).padStart(3, "0");
+          }) // e.g., '255,005,254,000,001,033'
+          : "");
       },
       decode: function decode(key) {
         // Set the entries in buffer's [[ArrayBufferData]] to those in `value`
         var k = key.slice(2);
-        var arr = k.length ? k.split(',').map(function (s) {
+        var arr = k.length ? k.split(",").map(function(s) {
           return Number.parseInt(s);
         }) : [];
         var buffer = new ArrayBuffer(arr.length);
         var uint8 = new Uint8Array(buffer);
         uint8.set(arr);
         return buffer;
-      }
-    }
+      },
+    },
   };
+
   /**
    * Return a padded base-32 exponent value.
    * @param {number} n
@@ -2501,8 +2513,9 @@
 
   function padBase32Exponent(n) {
     n = n.toString(32);
-    return n.length === 1 ? '0' + n : n;
+    return n.length === 1 ? "0" + n : n;
   }
+
   /**
    * Return a padded base-32 mantissa.
    * @param {string} s
@@ -2513,6 +2526,7 @@
   function padBase32Mantissa(s) {
     return (s + zeros(11)).slice(0, 11);
   }
+
   /**
    * Flips each digit of a base-32 encoded string.
    * @param {string} encoded
@@ -2521,10 +2535,10 @@
 
 
   function flipBase32(encoded) {
-    var flipped = '';
+    var flipped = "";
 
     var _iterator2 = _createForOfIteratorHelper(encoded),
-        _step2;
+      _step2;
 
     try {
       for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
@@ -2539,6 +2553,7 @@
 
     return flipped;
   }
+
   /**
    * Base-32 power function.
    * RESEARCH: This function does not precisely decode floats because it performs
@@ -2571,6 +2586,7 @@
     var expansion = mantissa + zeros(exponent - 11);
     return Number.parseInt(expansion, 32);
   }
+
   /**
    * @param {Float} num
    * @param {Float} [precision=16]
@@ -2582,6 +2598,7 @@
     var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;
     return Number.parseFloat(num.toPrecision(precision));
   }
+
   /**
    * Returns a string of n zeros.
    * @param {number} n
@@ -2590,8 +2607,9 @@
 
 
   function zeros(n) {
-    return '0'.repeat(n);
+    return "0".repeat(n);
   }
+
   /**
    * Negates numeric strings.
    * @param {string} s
@@ -2600,11 +2618,12 @@
 
 
   function negate(s) {
-    return '-' + s;
+    return "-" + s;
   }
+
   /**
-  * @typedef {"number"|"date"|"string"|"binary"|"array"} module:Key.KeyType
-  */
+   * @typedef {"number"|"date"|"string"|"binary"|"array"} module:Key.KeyType
+   */
 
   /**
    * @param key
@@ -2613,14 +2632,15 @@
 
 
   function getKeyType(key) {
-    if (Array.isArray(key)) return 'array';
-    if (isDate(key)) return 'date';
-    if (isBinary(key)) return 'binary';
+    if (Array.isArray(key)) return "array";
+    if (isDate(key)) return "date";
+    if (isBinary(key)) return "binary";
 
     var keyType = _typeof$1(key);
 
-    return ['string', 'number'].includes(keyType) ? keyType : 'invalid';
+    return ["string", "number"].includes(keyType) ? keyType : "invalid";
   }
+
   /**
    * Keys must be strings, numbers (besides `NaN`), Dates (if value is not
    *   `NaN`), binary objects or Arrays.
@@ -2633,16 +2653,18 @@
   function convertValueToKey(input, seen) {
     return convertValueToKeyValueDecoded(input, seen, false, true);
   }
+
   /**
-  * Currently not in use.
-  * @param input
-  * @returns {module:Key.keyValueObject}
-  */
+   * Currently not in use.
+   * @param input
+   * @returns {module:Key.keyValueObject}
+   */
 
 
   function convertValueToMultiEntryKey(input) {
     return convertValueToKeyValueDecoded(input, null, true, true);
   }
+
   /**
    *
    * @param O
@@ -2661,7 +2683,7 @@
       var arrayBuffer = O.buffer;
 
       if (arrayBuffer === undefined) {
-        throw new TypeError('Could not copy the bytes held by a buffer source as the buffer was undefined.');
+        throw new TypeError("Could not copy the bytes held by a buffer source as the buffer was undefined.");
       }
 
       offset = O.byteOffset; // [[ByteOffset]] (will also throw as desired if detached)
@@ -2675,27 +2697,28 @@
 
     return new Uint8Array(O.buffer || O, offset, length);
   }
+
   /**
-  * @typedef {PlainObject} module:Key.keyValueObject
-  * @property {module:Key.KeyType|"NaN"} type
-  * @property {*} [value]
-  * @property {boolean} [invalid]
-  * @property {string} [message]
-  * @todo Specify acceptable `value` more precisely
-  */
+   * @typedef {PlainObject} module:Key.keyValueObject
+   * @property {module:Key.KeyType|"NaN"} type
+   * @property {*} [value]
+   * @property {boolean} [invalid]
+   * @property {string} [message]
+   * @todo Specify acceptable `value` more precisely
+   */
 
   /**
-  * Shortcut utility to avoid returning full keys from `convertValueToKey`
-  *   and subsequent need to process in calling code unless `fullKeys` is
-  *   set; may throw.
-  * @param {module:Key.Key} input
-  * @param {?(Array)} [seen]
-  * @param {boolean} [multiEntry]
-  * @param {boolean} [fullKeys]
-  * @throws {TypeError} See `getCopyBytesHeldByBufferSource`
-  * @todo Document other allowable `input`
-  * @returns {module:Key.keyValueObject}
-  */
+   * Shortcut utility to avoid returning full keys from `convertValueToKey`
+   *   and subsequent need to process in calling code unless `fullKeys` is
+   *   set; may throw.
+   * @param {module:Key.Key} input
+   * @param {?(Array)} [seen]
+   * @param {boolean} [multiEntry]
+   * @param {boolean} [fullKeys]
+   * @throws {TypeError} See `getCopyBytesHeldByBufferSource`
+   * @todo Document other allowable `input`
+   * @returns {module:Key.keyValueObject}
+   */
 
 
   function convertValueToKeyValueDecoded(input, seen, multiEntry, fullKeys) {
@@ -2703,148 +2726,143 @@
 
     if (seen.includes(input)) {
       return {
-        type: 'array',
+        type: "array",
         invalid: true,
-        message: 'An array key cannot be circular'
+        message: "An array key cannot be circular",
       };
     }
 
     var type = getKeyType(input);
     var ret = {
       type: type,
-      value: input
+      value: input,
     };
 
     switch (type) {
-      case 'number':
-        {
-          if (Number.isNaN(input)) {
-            // List as 'NaN' type for convenience of consumers in reporting errors
-            return {
-              type: 'NaN',
-              invalid: true
-            };
-          }
-
-          return ret;
-        }
-
-      case 'string':
-        {
-          return ret;
-        }
-
-      case 'binary':
-        {
-          // May throw (if detached)
-          // Get a copy of the bytes held by the buffer source
-          // https://heycam.github.io/webidl/#ref-for-dfn-get-buffer-source-copy-2
-          var octets = getCopyBytesHeldByBufferSource(input);
+      case "number": {
+        if (Number.isNaN(input)) {
+          // List as 'NaN' type for convenience of consumers in reporting errors
           return {
-            type: 'binary',
-            value: octets
+            type: "NaN",
+            invalid: true,
           };
         }
 
-      case 'array':
-        {
-          // May throw (from binary)
-          var len = input.length;
-          seen.push(input);
-          var keys = [];
-
-          for (var i = 0; i < len; i++) {
-            // We cannot iterate here with array extras as we must ensure sparse arrays are invalidated
-            if (!multiEntry && !Object.prototype.hasOwnProperty.call(input, i)) {
-              return {
-                type: type,
-                invalid: true,
-                message: 'Does not have own index property'
-              };
-            }
+        return ret;
+      }
 
-            try {
-              var _ret = function () {
-                var entry = input[i];
-                var key = convertValueToKeyValueDecoded(entry, seen, false, fullKeys); // Though steps do not list rethrowing, the next is returnifabrupt when not multiEntry
+      case "string": {
+        return ret;
+      }
 
-                if (key.invalid) {
-                  if (multiEntry) {
-                    return "continue";
-                  }
+      case "binary": {
+        // May throw (if detached)
+        // Get a copy of the bytes held by the buffer source
+        // https://heycam.github.io/webidl/#ref-for-dfn-get-buffer-source-copy-2
+        var octets = getCopyBytesHeldByBufferSource(input);
+        return {
+          type: "binary",
+          value: octets,
+        };
+      }
 
-                  return {
-                    v: {
-                      type: type,
-                      invalid: true,
-                      message: 'Bad array entry value-to-key conversion'
-                    }
-                  };
-                }
+      case "array": {
+        // May throw (from binary)
+        var len = input.length;
+        seen.push(input);
+        var keys = [];
+
+        for (var i = 0; i < len; i++) {
+          // We cannot iterate here with array extras as we must ensure sparse arrays are invalidated
+          if (!multiEntry && !Object.prototype.hasOwnProperty.call(input, i)) {
+            return {
+              type: type,
+              invalid: true,
+              message: "Does not have own index property",
+            };
+          }
+
+          try {
+            var _ret = function() {
+              var entry = input[i];
+              var key = convertValueToKeyValueDecoded(entry, seen, false, fullKeys); // Though steps do not list rethrowing, the next is returnifabrupt when not multiEntry
 
-                if (!multiEntry || !fullKeys && keys.every(function (k) {
-                  return cmp(k, key.value) !== 0;
-                }) || fullKeys && keys.every(function (k) {
-                  return cmp(k, key) !== 0;
-                })) {
-                  keys.push(fullKeys ? key : key.value);
+              if (key.invalid) {
+                if (multiEntry) {
+                  return "continue";
                 }
-              }();
 
-              if (_ret === "continue") continue;
-              if (_typeof$1(_ret) === "object") return _ret.v;
-            } catch (err) {
-              if (!multiEntry) {
-                throw err;
+                return {
+                  v: {
+                    type: type,
+                    invalid: true,
+                    message: "Bad array entry value-to-key conversion",
+                  },
+                };
+              }
+
+              if (!multiEntry || !fullKeys && keys.every(function(k) {
+                return cmp(k, key.value) !== 0;
+              }) || fullKeys && keys.every(function(k) {
+                return cmp(k, key) !== 0;
+              })) {
+                keys.push(fullKeys ? key : key.value);
               }
+            }();
+
+            if (_ret === "continue") continue;
+            if (_typeof$1(_ret) === "object") return _ret.v;
+          } catch (err) {
+            if (!multiEntry) {
+              throw err;
             }
           }
-
-          return {
-            type: type,
-            value: keys
-          };
         }
 
-      case 'date':
-        {
-          if (!Number.isNaN(input.getTime())) {
-            return fullKeys ? {
-              type: type,
-              value: input.getTime()
-            } : {
-              type: type,
-              value: new Date(input.getTime())
-            };
-          }
+        return {
+          type: type,
+          value: keys,
+        };
+      }
 
-          return {
+      case "date": {
+        if (!Number.isNaN(input.getTime())) {
+          return fullKeys ? {
             type: type,
-            invalid: true,
-            message: 'Not a valid date'
-          }; // Falls through
+            value: input.getTime(),
+          } : {
+            type: type,
+            value: new Date(input.getTime()),
+          };
         }
 
-      case 'invalid':
-      default:
-        {
-          // Other `typeof` types which are not valid keys:
-          //    'undefined', 'boolean', 'object' (including `null`), 'symbol', 'function
-          var _type = input === null ? 'null' : _typeof$1(input); // Convert `null` for convenience of consumers in reporting errors
+        return {
+          type: type,
+          invalid: true,
+          message: "Not a valid date",
+        }; // Falls through
+      }
 
+      case "invalid":
+      default: {
+        // Other `typeof` types which are not valid keys:
+        //    'undefined', 'boolean', 'object' (including `null`), 'symbol', 'function
+        var _type = input === null ? "null" : _typeof$1(input); // Convert `null` for convenience of consumers in reporting errors
 
-          return {
-            type: _type,
-            invalid: true,
-            message: 'Not a valid key; type ' + _type
-          };
-        }
+
+        return {
+          type: _type,
+          invalid: true,
+          message: "Not a valid key; type " + _type,
+        };
+      }
     }
   }
+
   /**
-  * @typedef {*} module:Key.Key
-  * @todo Specify possible value more precisely
-  */
+   * @typedef {*} module:Key.Key
+   * @todo Specify possible value more precisely
+   */
 
   /**
    *
@@ -2858,24 +2876,26 @@
   function convertValueToMultiEntryKeyDecoded(key, fullKeys) {
     return convertValueToKeyValueDecoded(key, null, true, fullKeys);
   }
+
   /**
-  * An internal utility.
-  * @param input
-  * @param {boolean} seen
-  * @throws {DOMException} `DataError`
-  * @returns {module:Key.keyValueObject}
-  */
+   * An internal utility.
+   * @param input
+   * @param {boolean} seen
+   * @throws {DOMException} `DataError`
+   * @returns {module:Key.keyValueObject}
+   */
 
 
   function convertValueToKeyRethrowingAndIfInvalid(input, seen) {
     var key = convertValueToKey(input, seen);
 
     if (key.invalid) {
-      throw createDOMException('DataError', key.message || 'Not a valid key; type: ' + key.type);
+      throw createDOMException("DataError", key.message || "Not a valid key; type: " + key.type);
     }
 
     return key;
   }
+
   /**
    *
    * @param value
@@ -2889,28 +2909,30 @@
   function extractKeyFromValueUsingKeyPath(value, keyPath, multiEntry) {
     return extractKeyValueDecodedFromValueUsingKeyPath(value, keyPath, multiEntry, true);
   }
+
   /**
-  * Not currently in use.
-  * @param value
-  * @param keyPath
-  * @param {boolean} multiEntry
-  * @returns {module:Key.KeyPathEvaluateValue}
-  */
+   * Not currently in use.
+   * @param value
+   * @param keyPath
+   * @param {boolean} multiEntry
+   * @returns {module:Key.KeyPathEvaluateValue}
+   */
 
 
   function evaluateKeyPathOnValue(value, keyPath, multiEntry) {
     return evaluateKeyPathOnValueToDecodedValue(value, keyPath);
   }
+
   /**
-  * May throw, return `{failure: true}` (e.g., non-object on keyPath resolution)
-  *    or `{invalid: true}` (e.g., `NaN`).
-  * @param value
-  * @param keyPath
-  * @param {boolean} multiEntry
-  * @param {boolean} fullKeys
-  * @returns {module:Key.keyValueObject|module:Key.KeyPathEvaluateValue}
-  * @todo Document other possible return?
-  */
+   * May throw, return `{failure: true}` (e.g., non-object on keyPath resolution)
+   *    or `{invalid: true}` (e.g., `NaN`).
+   * @param value
+   * @param keyPath
+   * @param {boolean} multiEntry
+   * @param {boolean} fullKeys
+   * @returns {module:Key.keyValueObject|module:Key.KeyPathEvaluateValue}
+   * @todo Document other possible return?
+   */
 
 
   function extractKeyValueDecodedFromValueUsingKeyPath(value, keyPath, multiEntry, fullKeys) {
@@ -2926,15 +2948,16 @@
 
     return convertValueToMultiEntryKeyDecoded(r.value, fullKeys);
   }
+
   /**
-  * @typedef {PlainObject} module:Key.KeyPathEvaluateFailure
-  * @property {boolean} failure
-  */
+   * @typedef {PlainObject} module:Key.KeyPathEvaluateFailure
+   * @property {boolean} failure
+   */
 
   /**
-  * @typedef {PlainObject} module:Key.KeyPathEvaluateValue
-  * @property {undefined|array|string} value
-  */
+   * @typedef {PlainObject} module:Key.KeyPathEvaluateValue
+   * @property {undefined|array|string} value
+   */
 
   /**
    * Returns the value of an inline key based on a key path (wrapped in an
@@ -2950,7 +2973,7 @@
   function evaluateKeyPathOnValueToDecodedValue(value, keyPath, multiEntry, fullKeys) {
     if (Array.isArray(keyPath)) {
       var result = [];
-      return keyPath.some(function (item) {
+      return keyPath.some(function(item) {
         var key = evaluateKeyPathOnValueToDecodedValue(value, item);
 
         if (key.failure) {
@@ -2960,37 +2983,37 @@
         result.push(key.value);
         return false;
       }) ? {
-        failure: true
+        failure: true,
       } : {
-        value: result
+        value: result,
       };
     }
 
-    if (keyPath === '') {
+    if (keyPath === "") {
       return {
-        value: value
+        value: value,
       };
     }
 
-    var identifiers = keyPath.split('.');
-    return identifiers.some(function (idntfr, i) {
-      if (idntfr === 'length' && (typeof value === 'string' || Array.isArray(value))) {
+    var identifiers = keyPath.split(".");
+    return identifiers.some(function(idntfr, i) {
+      if (idntfr === "length" && (typeof value === "string" || Array.isArray(value))) {
         value = value.length;
       } else if (isBlob(value)) {
         switch (idntfr) {
-          case 'size':
-          case 'type':
+          case "size":
+          case "type":
             value = value[idntfr];
             break;
         }
       } else if (isFile(value)) {
         switch (idntfr) {
-          case 'name':
-          case 'lastModified':
+          case "name":
+          case "lastModified":
             value = value[idntfr];
             break;
 
-          case 'lastModifiedDate':
+          case "lastModifiedDate":
             value = new Date(value.lastModified);
             break;
         }
@@ -3003,11 +3026,12 @@
 
       return false;
     }) ? {
-      failure: true
+      failure: true,
     } : {
-      value: value
+      value: value,
     };
   }
+
   /**
    * Sets the inline key value.
    * @param {object} value
@@ -3018,9 +3042,9 @@
 
 
   function injectKeyIntoValueUsingKeyPath(value, key, keyPath) {
-    var identifiers = keyPath.split('.');
+    var identifiers = keyPath.split(".");
     var last = identifiers.pop();
-    identifiers.forEach(function (identifier) {
+    identifiers.forEach(function(identifier) {
       var hop = Object.prototype.hasOwnProperty.call(value, identifier);
 
       if (!hop) {
@@ -3031,6 +3055,7 @@
     });
     value[last] = key; // key is already a `keyValue` in our processing so no need to convert
   }
+
   /**
    *
    * @param value
@@ -3041,11 +3066,11 @@
 
 
   function checkKeyCouldBeInjectedIntoValue(value, keyPath) {
-    var identifiers = keyPath.split('.');
+    var identifiers = keyPath.split(".");
     identifiers.pop();
 
     var _iterator3 = _createForOfIteratorHelper(identifiers),
-        _step3;
+      _step3;
 
     try {
       for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
@@ -3071,6 +3096,7 @@
 
     return isObj(value);
   }
+
   /**
    *
    * @param {module:Key.Key} key
@@ -3111,6 +3137,7 @@
 
     return lowerMatch && upperMatch;
   }
+
   /**
    * Determines whether an index entry matches a multi-entry key value.
    * @param {string} encodedEntry     The entry value (already encoded)
@@ -3122,12 +3149,13 @@
   function isMultiEntryMatch(encodedEntry, encodedKey) {
     var keyType = encodedCharToKeyType[encodedKey.slice(0, 1)];
 
-    if (keyType === 'array') {
+    if (keyType === "array") {
       return encodedKey.indexOf(encodedEntry) > 1;
     }
 
     return encodedKey === encodedEntry;
   }
+
   /**
    *
    * @param {module:Key.Key} keyEntry
@@ -3141,7 +3169,7 @@
 
     if (Array.isArray(keyEntry)) {
       var _iterator4 = _createForOfIteratorHelper(keyEntry),
-          _step4;
+        _step4;
 
       try {
         for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
@@ -3180,64 +3208,62 @@
 
     return matches;
   }
+
   /**
-  * @typedef {number|string|Date|ArrayBuffer|module:Key.ValueTypes[]} module:Key.ValueTypes
-  */
+   * @typedef {number|string|Date|ArrayBuffer|module:Key.ValueTypes[]} module:Key.ValueTypes
+   */
 
   /**
-  * Not currently in use but keeping for spec parity.
-  * @param {module:Key.Key} key
-  * @throws {Error} Upon a "bad key"
-  * @returns {module:Key.ValueTypes}
-  */
+   * Not currently in use but keeping for spec parity.
+   * @param {module:Key.Key} key
+   * @throws {Error} Upon a "bad key"
+   * @returns {module:Key.ValueTypes}
+   */
 
 
   function convertKeyToValue(key) {
     var type = key.type,
-        value = key.value;
+      value = key.value;
 
     switch (type) {
-      case 'number':
-      case 'string':
-        {
-          return value;
-        }
-
-      case 'array':
-        {
-          var array = [];
-          var len = value.length;
-          var index = 0;
+      case "number":
+      case "string": {
+        return value;
+      }
 
-          while (index < len) {
-            var entry = convertKeyToValue(value[index]);
-            array[index] = entry;
-            index++;
-          }
+      case "array": {
+        var array = [];
+        var len = value.length;
+        var index = 0;
 
-          return array;
+        while (index < len) {
+          var entry = convertKeyToValue(value[index]);
+          array[index] = entry;
+          index++;
         }
 
-      case 'date':
-        {
-          return new Date(value);
-        }
+        return array;
+      }
+
+      case "date": {
+        return new Date(value);
+      }
 
-      case 'binary':
-        {
-          var _len = value.length;
-          var buffer = new ArrayBuffer(_len); // Set the entries in buffer's [[ArrayBufferData]] to those in `value`
+      case "binary": {
+        var _len = value.length;
+        var buffer = new ArrayBuffer(_len); // Set the entries in buffer's [[ArrayBufferData]] to those in `value`
 
-          var uint8 = new Uint8Array(buffer, value.byteOffset || 0, value.byteLength);
-          uint8.set(value);
-          return buffer;
-        }
+        var uint8 = new Uint8Array(buffer, value.byteOffset || 0, value.byteLength);
+        uint8.set(value);
+        return buffer;
+      }
 
-      case 'invalid':
+      case "invalid":
       default:
-        throw new Error('Bad key');
+        throw new Error("Bad key");
     }
   }
+
   /**
    *
    * @param {module:Key.Key} key
@@ -3255,6 +3281,7 @@
 
     return types[getKeyType(key)].encode(key, inArray);
   }
+
   /**
    *
    * @param {module:Key.Key} key
@@ -3265,12 +3292,13 @@
 
 
   function _decode(key, inArray) {
-    if (typeof key !== 'string') {
+    if (typeof key !== "string") {
       return undefined;
     }
 
     return types[encodedCharToKeyType[key.slice(0, 1)]].decode(key, inArray);
   }
+
   /**
    *
    * @param {module:Key.Key} key
@@ -3290,9 +3318,9 @@
    */
 
   /**
-  * @typedef {IDBObjectStore} IDBObjectStoreWithCurrentName
-  * @property {string} __currentName
-  */
+   * @typedef {IDBObjectStore} IDBObjectStoreWithCurrentName
+   * @property {string} __currentName
+   */
 
   /**
    * @callback CurrentNumberCallback
@@ -3301,10 +3329,10 @@
    */
 
   /**
-  * @callback SQLFailureCallback
-  * @param {DOMException} exception
-  * @returns {void}
-  */
+   * @callback SQLFailureCallback
+   * @param {DOMException} exception
+   * @returns {void}
+   */
 
   /**
    *
@@ -3316,16 +3344,17 @@
    */
 
   function getCurrentNumber(tx, store, func, sqlFailCb) {
-    tx.executeSql('SELECT "currNum" FROM __sys__ WHERE "name" = ?', [escapeSQLiteStatement(store.__currentName)], function (tx, data) {
+    tx.executeSql("SELECT \"currNum\" FROM __sys__ WHERE \"name\" = ?", [escapeSQLiteStatement(store.__currentName)], function(tx, data) {
       if (data.rows.length !== 1) {
         func(1);
       } else {
         func(data.rows.item(0).currNum);
       }
-    }, function (tx, error) {
-      sqlFailCb(createDOMException('DataError', 'Could not get the auto increment value for key', error));
+    }, function(tx, error) {
+      sqlFailCb(createDOMException("DataError", "Could not get the auto increment value for key", error));
     });
   }
+
   /**
    *
    * @param {external:WebSQLTransaction} tx
@@ -3338,15 +3367,16 @@
 
 
   function assignCurrentNumber(tx, store, num, successCb, failCb) {
-    var sql = 'UPDATE __sys__ SET "currNum" = ? WHERE "name" = ?';
+    var sql = "UPDATE __sys__ SET \"currNum\" = ? WHERE \"name\" = ?";
     var sqlValues = [num, escapeSQLiteStatement(store.__currentName)];
     CFG.DEBUG && console.log(sql, sqlValues);
-    tx.executeSql(sql, sqlValues, function (tx, data) {
+    tx.executeSql(sql, sqlValues, function(tx, data) {
       successCb(num);
-    }, function (tx, err) {
-      failCb(createDOMException('UnknownError', 'Could not set the auto increment value for key', err));
+    }, function(tx, err) {
+      failCb(createDOMException("UnknownError", "Could not set the auto increment value for key", err));
     });
   }
+
   /**
    * Bump up the auto-inc counter if the key path-resolved value is valid
    *   (greater than old value and >=1) OR if a manually passed in key is
@@ -3362,9 +3392,10 @@
 
   function setCurrentNumber(tx, store, num, successCb, failCb) {
     num = num === MAX_ALLOWED_CURRENT_NUMBER ? num + 2 // Since incrementing by one will have no effect in JavaScript on this unsafe max, we represent the max as a number incremented by two. The getting of the current number is never returned to the user and is only used in safe comparisons, so it is safe for us to represent it in this manner
-    : num + 1;
+      : num + 1;
     return assignCurrentNumber(tx, store, num, successCb, failCb);
   }
+
   /**
    * @callback KeyForStoreCallback
    * @param {"failure"|null} arg1
@@ -3384,10 +3415,10 @@
 
 
   function generateKeyForStore(tx, store, cb, sqlFailCb) {
-    getCurrentNumber(tx, store, function (key) {
+    getCurrentNumber(tx, store, function(key) {
       if (key > MAX_ALLOWED_CURRENT_NUMBER) {
         // 2 ^ 53 (See <https://github.com/w3c/IndexedDB/issues/147>)
-        cb('failure'); // eslint-disable-line node/no-callback-literal
+        cb("failure"); // eslint-disable-line node/no-callback-literal
 
         return;
       } // Increment current number by 1 (we cannot leverage SQLite's
@@ -3395,7 +3426,7 @@
       //  will be overwritten/ignored upon the next insert)
 
 
-      setCurrentNumber(tx, store, key, function () {
+      setCurrentNumber(tx, store, key, function() {
         cb(null, key, key);
       }, sqlFailCb);
     }, sqlFailCb);
@@ -3419,7 +3450,7 @@
     //   (or numbers larger than the max) are now to have the explicit effect of
     //   setting the current number (up to the max), so we do not optimize them
     //   out here
-    if (typeof key !== 'number' || key < 1) {
+    if (typeof key !== "number" || key < 1) {
       // Optimize with no need to get the current number
       // Auto-increment attempted with a bad key;
       //   we are not to change the current number, but the steps don't call for failure
@@ -3428,12 +3459,12 @@
     } else {
       // If auto-increment and the keyPath item is a valid numeric key, get the old auto-increment to compare if the new is higher
       //  to determine which to use and whether to update the current number
-      getCurrentNumber(tx, store, function (cn) {
+      getCurrentNumber(tx, store, function(cn) {
         var value = Math.floor(Math.min(key, MAX_ALLOWED_CURRENT_NUMBER));
         var useNewKeyForAutoInc = value >= cn;
 
         if (useNewKeyForAutoInc) {
-          setCurrentNumber(tx, store, value, function () {
+          setCurrentNumber(tx, store, value, function() {
             successCb(cn); // Supply old current number in case needs to be reverted
           }, sqlFailCb);
         } else {
@@ -3465,10 +3496,11 @@
     findMultiEntryMatches: findMultiEntryMatches,
     assignCurrentNumber: assignCurrentNumber,
     generateKeyForStore: generateKeyForStore,
-    possiblyUpdateKeyGenerator: possiblyUpdateKeyGenerator
+    possiblyUpdateKeyGenerator: possiblyUpdateKeyGenerator,
   });
 
-  var readonlyProperties$4 = ['lower', 'upper', 'lowerOpen', 'upperOpen'];
+  var readonlyProperties$4 = ["lower", "upper", "lowerOpen", "upperOpen"];
+
   /* eslint-disable jsdoc/check-param-names */
 
   /**
@@ -3484,17 +3516,17 @@
 
   function IDBKeyRange() {
     /* eslint-enable jsdoc/check-param-names */
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
   var IDBKeyRangeAlias = IDBKeyRange;
 
-  IDBKeyRange.__createInstance = function (lower, upper, lowerOpen, upperOpen) {
+  IDBKeyRange.__createInstance = function(lower, upper, lowerOpen, upperOpen) {
     function IDBKeyRange() {
-      this[Symbol.toStringTag] = 'IDBKeyRange';
+      this[Symbol.toStringTag] = "IDBKeyRange";
 
       if (lower === undefined && upper === undefined) {
-        throw createDOMException('DataError', 'Both arguments to the key range method cannot be undefined');
+        throw createDOMException("DataError", "Both arguments to the key range method cannot be undefined");
       }
 
       var lowerConverted, upperConverted;
@@ -3513,7 +3545,7 @@
 
       if (lower !== undefined && upper !== undefined && lower !== upper) {
         if (_encode(lower) > _encode(upper)) {
-          throw createDOMException('DataError', '`lower` must not be greater than `upper` argument in `bound()` call.');
+          throw createDOMException("DataError", "`lower` must not be greater than `upper` argument in `bound()` call.");
         }
       }
 
@@ -3527,78 +3559,78 @@
     return new IDBKeyRange();
   };
 
-  IDBKeyRange.prototype.includes = function (key) {
+  IDBKeyRange.prototype.includes = function(key) {
     // We can't do a regular instanceof check as it will create a loop given our hasInstance implementation
-    if (!isObj(this) || typeof this.__lowerOpen !== 'boolean') {
-      throw new TypeError('Illegal invocation');
+    if (!isObj(this) || typeof this.__lowerOpen !== "boolean") {
+      throw new TypeError("Illegal invocation");
     }
 
     if (!arguments.length) {
-      throw new TypeError('IDBKeyRange.includes requires a key argument');
+      throw new TypeError("IDBKeyRange.includes requires a key argument");
     }
 
     convertValueToKeyRethrowingAndIfInvalid(key);
     return isKeyInRange(key, this);
   };
 
-  IDBKeyRange.only = function (value) {
+  IDBKeyRange.only = function(value) {
     if (!arguments.length) {
-      throw new TypeError('IDBKeyRange.only requires a value argument');
+      throw new TypeError("IDBKeyRange.only requires a value argument");
     }
 
     return IDBKeyRange.__createInstance(value, value, false, false);
   };
 
-  IDBKeyRange.lowerBound = function (value
-  /*, open */
+  IDBKeyRange.lowerBound = function(value,
+                                    /*, open */
   ) {
     if (!arguments.length) {
-      throw new TypeError('IDBKeyRange.lowerBound requires a value argument');
+      throw new TypeError("IDBKeyRange.lowerBound requires a value argument");
     } // eslint-disable-next-line prefer-rest-params
 
 
     return IDBKeyRange.__createInstance(value, undefined, arguments[1], true);
   };
 
-  IDBKeyRange.upperBound = function (value
-  /*, open */
+  IDBKeyRange.upperBound = function(value,
+                                    /*, open */
   ) {
     if (!arguments.length) {
-      throw new TypeError('IDBKeyRange.upperBound requires a value argument');
+      throw new TypeError("IDBKeyRange.upperBound requires a value argument");
     } // eslint-disable-next-line prefer-rest-params
 
 
     return IDBKeyRange.__createInstance(undefined, value, true, arguments[1]);
   };
 
-  IDBKeyRange.bound = function (lower, upper
-  /* , lowerOpen, upperOpen */
+  IDBKeyRange.bound = function(lower, upper,
+                               /* , lowerOpen, upperOpen */
   ) {
     if (arguments.length <= 1) {
-      throw new TypeError('IDBKeyRange.bound requires lower and upper arguments');
+      throw new TypeError("IDBKeyRange.bound requires lower and upper arguments");
     } // eslint-disable-next-line prefer-rest-params
 
 
     return IDBKeyRange.__createInstance(lower, upper, arguments[2], arguments[3]);
   };
 
-  IDBKeyRange.prototype[Symbol.toStringTag] = 'IDBKeyRangePrototype';
-  readonlyProperties$4.forEach(function (prop) {
+  IDBKeyRange.prototype[Symbol.toStringTag] = "IDBKeyRangePrototype";
+  readonlyProperties$4.forEach(function(prop) {
     var _o, _mutatorMap;
 
-    Object.defineProperty(IDBKeyRange.prototype, '__' + prop, {
+    Object.defineProperty(IDBKeyRange.prototype, "__" + prop, {
       enumerable: false,
       configurable: false,
-      writable: true
+      writable: true,
     }); // Ensure for proper interface testing that "get <name>" is the function name
 
-    var o = (_o = {}, _mutatorMap = {}, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].get = function () {
+    var o = (_o = {}, _mutatorMap = {}, _mutatorMap[prop] = _mutatorMap[prop] || {}, _mutatorMap[prop].get = function() {
       // We can't do a regular instanceof check as it will create a loop given our hasInstance implementation
-      if (!isObj(this) || typeof this.__lowerOpen !== 'boolean') {
-        throw new TypeError('Illegal invocation');
+      if (!isObj(this) || typeof this.__lowerOpen !== "boolean") {
+        throw new TypeError("Illegal invocation");
       }
 
-      return this['__' + prop];
+      return this["__" + prop];
     }, _defineEnumerableProperties(_o, _mutatorMap), _o);
     var desc = Object.getOwnPropertyDescriptor(o, prop); // desc.enumerable = true; // Default
     // desc.configurable = true; // Default
@@ -3607,16 +3639,16 @@
   });
   Object.defineProperty(IDBKeyRange, Symbol.hasInstance, {
     value: function value(obj) {
-      return isObj(obj) && 'upper' in obj && typeof obj.lowerOpen === 'boolean';
-    }
+      return isObj(obj) && "upper" in obj && typeof obj.lowerOpen === "boolean";
+    },
   });
-  Object.defineProperty(IDBKeyRange, 'prototype', {
-    writable: false
+  Object.defineProperty(IDBKeyRange, "prototype", {
+    writable: false,
   });
 
   function setSQLForKeyRange(range, quotedKeyColumnName, sql, sqlValues, addAnd, checkCached) {
     if (range && (range.lower !== undefined || range.upper !== undefined)) {
-      if (addAnd) sql.push('AND');
+      if (addAnd) sql.push("AND");
       var encodedLowerKey, encodedUpperKey;
       var hasLower = range.lower !== undefined;
       var hasUpper = range.upper !== undefined;
@@ -3633,17 +3665,17 @@
         sqlValues.push(escapeSQLiteStatement(encodedLowerKey));
 
         if (hasUpper && encodedLowerKey === encodedUpperKey && !range.lowerOpen && !range.upperOpen) {
-          sql.push(quotedKeyColumnName, '=', '?');
+          sql.push(quotedKeyColumnName, "=", "?");
           return;
         }
 
-        sql.push(quotedKeyColumnName, range.lowerOpen ? '>' : '>=', '?');
+        sql.push(quotedKeyColumnName, range.lowerOpen ? ">" : ">=", "?");
       }
 
-      hasLower && hasUpper && sql.push('AND');
+      hasLower && hasUpper && sql.push("AND");
 
       if (hasUpper) {
-        sql.push(quotedKeyColumnName, range.upperOpen ? '<' : '<=', '?');
+        sql.push(quotedKeyColumnName, range.upperOpen ? "<" : "<=", "?");
         sqlValues.push(escapeSQLiteStatement(encodedUpperKey));
       }
     }
@@ -3652,7 +3684,7 @@
   function convertValueToKeyRange(value, nullDisallowed) {
     if (instanceOf(value, IDBKeyRange)) {
       // We still need to validate IDBKeyRange-like objects (the above check is based on loose duck-typing)
-      if (value.toString() !== '[object IDBKeyRange]') {
+      if (value.toString() !== "[object IDBKeyRange]") {
         return IDBKeyRange.__createInstance(value.lower, value.upper, value.lowerOpen, value.upperOpen);
       }
 
@@ -3661,7 +3693,7 @@
 
     if (isNullish(value)) {
       if (nullDisallowed) {
-        throw createDOMException('DataError', 'No key or range was specified');
+        throw createDOMException("DataError", "No key or range was specified");
       }
 
       return undefined; // Represents unbounded
@@ -3675,13 +3707,13 @@
 
   var cleanInterface = false;
   var testObject = {
-    test: true
+    test: true,
   }; // Test whether Object.defineProperty really works.
 
   if (Object.defineProperty) {
     try {
-      Object.defineProperty(testObject, 'test', {
-        enumerable: false
+      Object.defineProperty(testObject, "test", {
+        enumerable: false,
       });
 
       if (testObject.test) {
@@ -3698,7 +3730,7 @@
 
 
   var DOMStringList = function DOMStringList() {
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   };
 
   DOMStringList.prototype = (_DOMStringList$protot = {
@@ -3706,14 +3738,14 @@
     // Interface.
     contains: function contains(str) {
       if (!arguments.length) {
-        throw new TypeError('DOMStringList.contains must be supplied a value');
+        throw new TypeError("DOMStringList.contains must be supplied a value");
       }
 
       return this._items.includes(str);
     },
     item: function item(key) {
       if (!arguments.length) {
-        throw new TypeError('DOMStringList.item must be supplied a value');
+        throw new TypeError("DOMStringList.item must be supplied a value");
       }
 
       if (key < 0 || key >= this.length || !Number.isInteger(key)) {
@@ -3775,8 +3807,8 @@
       }
 
       this.sortList();
-    }
-  }, _defineProperty(_DOMStringList$protot, Symbol.toStringTag, 'DOMStringListPrototype'), _defineProperty(_DOMStringList$protot, Symbol.iterator, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
+    },
+  }, _defineProperty(_DOMStringList$protot, Symbol.toStringTag, "DOMStringListPrototype"), _defineProperty(_DOMStringList$protot, Symbol.iterator, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
     var i;
     return regeneratorRuntime.wrap(function _callee$(_context) {
       while (1) {
@@ -3806,23 +3838,23 @@
   })), _DOMStringList$protot);
   Object.defineProperty(DOMStringList, Symbol.hasInstance, {
     value: function value(obj) {
-      return Object.prototype.toString.call(obj) === 'DOMStringListPrototype';
-    }
+      return Object.prototype.toString.call(obj) === "DOMStringListPrototype";
+    },
   });
   var DOMStringListAlias = DOMStringList;
-  Object.defineProperty(DOMStringList, '__createInstance', {
+  Object.defineProperty(DOMStringList, "__createInstance", {
     value: function value() {
       var DOMStringList = function DOMStringList() {
-        this.toString = function () {
-          return '[object DOMStringList]';
+        this.toString = function() {
+          return "[object DOMStringList]";
         }; // Internal functions on the prototype have been made non-enumerable below.
 
 
-        Object.defineProperty(this, 'length', {
+        Object.defineProperty(this, "length", {
           enumerable: true,
           get: function get() {
             return this._length;
-          }
+          },
         });
         this._items = [];
         this._length = 0;
@@ -3830,39 +3862,40 @@
 
       DOMStringList.prototype = DOMStringListAlias.prototype;
       return new DOMStringList();
-    }
+    },
   });
 
   if (cleanInterface) {
-    Object.defineProperty(DOMStringList, 'prototype', {
-      writable: false
+    Object.defineProperty(DOMStringList, "prototype", {
+      writable: false,
     });
-    var nonenumerableReadonly = ['addIndexes', 'sortList', 'forEach', 'map', 'indexOf', 'push', 'splice', 'constructor', '__createInstance'];
-    nonenumerableReadonly.forEach(function (nonenumerableReadonly) {
+    var nonenumerableReadonly = ["addIndexes", "sortList", "forEach", "map", "indexOf", "push", "splice", "constructor", "__createInstance"];
+    nonenumerableReadonly.forEach(function(nonenumerableReadonly) {
       Object.defineProperty(DOMStringList.prototype, nonenumerableReadonly, {
-        enumerable: false
+        enumerable: false,
       });
     }); // Illegal invocations
 
-    Object.defineProperty(DOMStringList.prototype, 'length', {
+    Object.defineProperty(DOMStringList.prototype, "length", {
       configurable: true,
       enumerable: true,
       get: function get() {
-        throw new TypeError('Illegal invocation');
-      }
+        throw new TypeError("Illegal invocation");
+      },
     });
-    var nonenumerableWritable = ['_items', '_length'];
-    nonenumerableWritable.forEach(function (nonenumerableWritable) {
+    var nonenumerableWritable = ["_items", "_length"];
+    nonenumerableWritable.forEach(function(nonenumerableWritable) {
       Object.defineProperty(DOMStringList.prototype, nonenumerableWritable, {
         enumerable: false,
-        writable: true
+        writable: true,
       });
     });
   }
 
   var uniqueID = 0;
-  var listeners$1 = ['onabort', 'oncomplete', 'onerror'];
-  var readonlyProperties$3 = ['objectStoreNames', 'mode', 'db', 'error'];
+  var listeners$1 = ["onabort", "oncomplete", "onerror"];
+  var readonlyProperties$3 = ["objectStoreNames", "mode", "db", "error"];
+
   /* eslint-disable jsdoc/check-param-names */
 
   /**
@@ -3876,17 +3909,17 @@
 
   function IDBTransaction() {
     /* eslint-enable jsdoc/check-param-names */
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
   var IDBTransactionAlias = IDBTransaction;
 
-  IDBTransaction.__createInstance = function (db, storeNames, mode) {
+  IDBTransaction.__createInstance = function(db, storeNames, mode) {
     function IDBTransaction() {
       var _this = this;
 
       var me = this;
-      me[Symbol.toStringTag] = 'IDBTransaction';
+      me[Symbol.toStringTag] = "IDBTransaction";
       defineReadonlyProperties(me, readonlyProperties$3);
       me.__id = ++uniqueID; // for debugging simultaneous transactions
 
@@ -3900,19 +3933,19 @@
       me.__error = null;
 
       me.__setOptions({
-        legacyOutputDidListenersThrowFlag: true // Event hook for IndexedB
+        legacyOutputDidListenersThrowFlag: true, // Event hook for IndexedB
 
       });
 
-      readonlyProperties$3.forEach(function (readonlyProp) {
+      readonlyProperties$3.forEach(function(readonlyProp) {
         Object.defineProperty(_this, readonlyProp, {
-          configurable: true
+          configurable: true,
         });
       });
       defineListenerProperties(this, listeners$1);
       me.__storeHandles = {}; // Kick off the transaction as soon as all synchronous code is done
 
-      setTimeout(function () {
+      setTimeout(function() {
         me.__executeRequests();
       }, 0);
     }
@@ -3924,197 +3957,197 @@
   IDBTransaction.prototype = EventTargetFactory.createInstance({
     defaultSync: true,
     // Ensure EventTarget preserves our properties
-    extraProperties: ['complete']
+    extraProperties: ["complete"],
   });
 
-  IDBTransaction.prototype.__transFinishedCb = function (err, cb) {
+  IDBTransaction.prototype.__transFinishedCb = function(err, cb) {
     cb(Boolean(err));
   };
 
-  IDBTransaction.prototype.__executeRequests = function () {
+  IDBTransaction.prototype.__executeRequests = function() {
     var me = this;
 
     if (me.__running) {
-      CFG.DEBUG && console.log('Looks like the request set is already running', me.mode);
+      CFG.DEBUG && console.log("Looks like the request set is already running", me.mode);
       return;
     }
 
     me.__running = true;
 
-    me.db.__db[me.mode === 'readonly' ? 'readTransaction' : 'transaction']( // `readTransaction` is optimized, at least in `node-websql`
-    function executeRequests(tx) {
-      me.__tx = tx;
-      var q = null,
+    me.db.__db[me.mode === "readonly" ? "readTransaction" : "transaction"]( // `readTransaction` is optimized, at least in `node-websql`
+      function executeRequests(tx) {
+        me.__tx = tx;
+        var q = null,
           i = -1;
 
-      function success(result, req) {
-        if (me.__errored || me.__requestsFinished) {
-          // We've already called "onerror", "onabort", or thrown within the transaction, so don't do it again.
-          return;
-        }
-
-        if (req) {
-          q.req = req; // Need to do this in case of cursors
-        }
+        function success(result, req) {
+          if (me.__errored || me.__requestsFinished) {
+            // We've already called "onerror", "onabort", or thrown within the transaction, so don't do it again.
+            return;
+          }
 
-        if (q.req.__done) {
-          // Avoid continuing with aborted requests
-          return;
-        }
+          if (req) {
+            q.req = req; // Need to do this in case of cursors
+          }
 
-        q.req.__done = true;
-        q.req.__result = result;
-        q.req.__error = null;
-        me.__active = true;
-        var e = createEvent('success');
-        q.req.dispatchEvent(e); // Do not set __active flag to false yet: https://github.com/w3c/IndexedDB/issues/87
+          if (q.req.__done) {
+            // Avoid continuing with aborted requests
+            return;
+          }
 
-        if (e.__legacyOutputDidListenersThrowError) {
-          logError('Error', 'An error occurred in a success handler attached to request chain', e.__legacyOutputDidListenersThrowError); // We do nothing else with this error as per spec
+          q.req.__done = true;
+          q.req.__result = result;
+          q.req.__error = null;
+          me.__active = true;
+          var e = createEvent("success");
+          q.req.dispatchEvent(e); // Do not set __active flag to false yet: https://github.com/w3c/IndexedDB/issues/87
 
-          me.__abortTransaction(createDOMException('AbortError', 'A request was aborted (in user handler after success).'));
+          if (e.__legacyOutputDidListenersThrowError) {
+            logError("Error", "An error occurred in a success handler attached to request chain", e.__legacyOutputDidListenersThrowError); // We do nothing else with this error as per spec
 
-          return;
-        }
+            me.__abortTransaction(createDOMException("AbortError", "A request was aborted (in user handler after success)."));
 
-        executeNextRequest();
-      }
+            return;
+          }
 
-      function error() {
-        if (me.__errored || me.__requestsFinished) {
-          // We've already called "onerror", "onabort", or thrown within
-          //  the transaction, so don't do it again.
-          return;
+          executeNextRequest();
         }
 
-        if (q.req && q.req.__done) {
-          // Avoid continuing with aborted requests
-          return;
-        }
+        function error() {
+          if (me.__errored || me.__requestsFinished) {
+            // We've already called "onerror", "onabort", or thrown within
+            //  the transaction, so don't do it again.
+            return;
+          }
 
-        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
-          args[_key] = arguments[_key];
-        }
+          if (q.req && q.req.__done) {
+            // Avoid continuing with aborted requests
+            return;
+          }
 
-        var err = findError(args);
+          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+            args[_key] = arguments[_key];
+          }
 
-        if (!q.req) {
-          me.__abortTransaction(err);
+          var err = findError(args);
 
-          return;
-        } // Fire an error event for the current IDBRequest
+          if (!q.req) {
+            me.__abortTransaction(err);
 
+            return;
+          } // Fire an error event for the current IDBRequest
 
-        q.req.__done = true;
-        q.req.__error = err;
-        q.req.__result = undefined; // Must be undefined if an error per `result` getter
 
-        q.req.addLateEventListener('error', function (e) {
-          if (e.cancelable && e.defaultPrevented && !e.__legacyOutputDidListenersThrowError) {
-            executeNextRequest();
-          }
-        });
-        q.req.addDefaultEventListener('error', function () {
-          me.__abortTransaction(q.req.__error);
-        });
-        me.__active = true;
-        var e = createEvent('error', err, {
-          bubbles: true,
-          cancelable: true
-        });
-        q.req.dispatchEvent(e); // Do not set __active flag to false yet: https://github.com/w3c/IndexedDB/issues/87
+          q.req.__done = true;
+          q.req.__error = err;
+          q.req.__result = undefined; // Must be undefined if an error per `result` getter
 
-        if (e.__legacyOutputDidListenersThrowError) {
-          logError('Error', 'An error occurred in an error handler attached to request chain', e.__legacyOutputDidListenersThrowError); // We do nothing else with this error as per spec
+          q.req.addLateEventListener("error", function(e) {
+            if (e.cancelable && e.defaultPrevented && !e.__legacyOutputDidListenersThrowError) {
+              executeNextRequest();
+            }
+          });
+          q.req.addDefaultEventListener("error", function() {
+            me.__abortTransaction(q.req.__error);
+          });
+          me.__active = true;
+          var e = createEvent("error", err, {
+            bubbles: true,
+            cancelable: true,
+          });
+          q.req.dispatchEvent(e); // Do not set __active flag to false yet: https://github.com/w3c/IndexedDB/issues/87
 
-          e.preventDefault(); // Prevent 'error' default as steps indicate we should abort with `AbortError` even without cancellation
+          if (e.__legacyOutputDidListenersThrowError) {
+            logError("Error", "An error occurred in an error handler attached to request chain", e.__legacyOutputDidListenersThrowError); // We do nothing else with this error as per spec
 
-          me.__abortTransaction(createDOMException('AbortError', 'A request was aborted (in user handler after error).'));
-        }
-      }
+            e.preventDefault(); // Prevent 'error' default as steps indicate we should abort with `AbortError` even without cancellation
 
-      function executeNextRequest() {
-        if (me.__errored || me.__requestsFinished) {
-          // We've already called "onerror", "onabort", or thrown within the transaction, so don't do it again.
-          return;
+            me.__abortTransaction(createDOMException("AbortError", "A request was aborted (in user handler after error)."));
+          }
         }
 
-        i++;
+        function executeNextRequest() {
+          if (me.__errored || me.__requestsFinished) {
+            // We've already called "onerror", "onabort", or thrown within the transaction, so don't do it again.
+            return;
+          }
 
-        if (i >= me.__requests.length) {
-          // All requests in the transaction are done
-          me.__requests = [];
+          i++;
 
-          if (me.__active) {
-            requestsFinished();
-          }
-        } else {
-          try {
-            q = me.__requests[i];
+          if (i >= me.__requests.length) {
+            // All requests in the transaction are done
+            me.__requests = [];
 
-            if (!q.req) {
-              q.op(tx, q.args, executeNextRequest, error);
-              return;
+            if (me.__active) {
+              requestsFinished();
             }
+          } else {
+            try {
+              q = me.__requests[i];
 
-            if (q.req.__done) {
-              // Avoid continuing with aborted requests
-              return;
-            }
+              if (!q.req) {
+                q.op(tx, q.args, executeNextRequest, error);
+                return;
+              }
 
-            q.op(tx, q.args, success, error, executeNextRequest);
-          } catch (e) {
-            error(e);
+              if (q.req.__done) {
+                // Avoid continuing with aborted requests
+                return;
+              }
+
+              q.op(tx, q.args, success, error, executeNextRequest);
+            } catch (e) {
+              error(e);
+            }
           }
         }
-      }
 
-      executeNextRequest();
-    }, function webSQLError(webSQLErr) {
-      if (webSQLErr === true) {
-        // Not a genuine SQL error
-        return;
-      }
-
-      var err = webSQLErrback(webSQLErr);
+        executeNextRequest();
+      }, function webSQLError(webSQLErr) {
+        if (webSQLErr === true) {
+          // Not a genuine SQL error
+          return;
+        }
 
-      me.__abortTransaction(err);
-    }, function () {
-      // For Node, we don't need to try running here as we can keep
-      //   the transaction running long enough to rollback (in the
-      //   next (non-standard) callback for this transaction call)
-      if (me.__transFinishedCb !== IDBTransaction.prototype.__transFinishedCb) {
-        // Node
-        return;
-      }
+        var err = webSQLErrback(webSQLErr);
 
-      if (!me.__transactionEndCallback && !me.__requestsFinished) {
-        me.__transactionFinished = true;
-        return;
-      }
+        me.__abortTransaction(err);
+      }, function() {
+        // For Node, we don't need to try running here as we can keep
+        //   the transaction running long enough to rollback (in the
+        //   next (non-standard) callback for this transaction call)
+        if (me.__transFinishedCb !== IDBTransaction.prototype.__transFinishedCb) {
+          // Node
+          return;
+        }
 
-      if (me.__transactionEndCallback && !me.__completed) {
-        me.__transFinishedCb(me.__errored, me.__transactionEndCallback);
-      }
-    }, function (currentTask, err, done, rollback, commit) {
-      if (currentTask.readOnly || err) {
-        return true;
-      }
+        if (!me.__transactionEndCallback && !me.__requestsFinished) {
+          me.__transactionFinished = true;
+          return;
+        }
 
-      me.__transFinishedCb = function (err, cb) {
-        if (err) {
-          rollback(err, cb);
-        } else {
-          commit(cb);
+        if (me.__transactionEndCallback && !me.__completed) {
+          me.__transFinishedCb(me.__errored, me.__transactionEndCallback);
+        }
+      }, function(currentTask, err, done, rollback, commit) {
+        if (currentTask.readOnly || err) {
+          return true;
         }
-      };
 
-      if (me.__transactionEndCallback && !me.__completed) {
-        me.__transFinishedCb(me.__errored, me.__transactionEndCallback);
-      }
+        me.__transFinishedCb = function(err, cb) {
+          if (err) {
+            rollback(err, cb);
+          } else {
+            commit(cb);
+          }
+        };
 
-      return false;
-    });
+        if (me.__transactionEndCallback && !me.__completed) {
+          me.__transFinishedCb(me.__errored, me.__transactionEndCallback);
+        }
+
+        return false;
+      });
 
     function requestsFinished() {
       me.__active = false;
@@ -4122,14 +4155,14 @@
 
       function complete() {
         me.__completed = true;
-        CFG.DEBUG && console.log('Transaction completed');
-        var evt = createEvent('complete');
+        CFG.DEBUG && console.log("Transaction completed");
+        var evt = createEvent("complete");
 
         try {
           me.__internal = true;
           me.dispatchEvent(evt);
           me.__internal = false;
-          me.dispatchEvent(createEvent('__complete'));
+          me.dispatchEvent(createEvent("__complete"));
         } catch (e) {
           me.__internal = false; // An error occurred in the "oncomplete" handler.
           // It's too late to call "onerror" or "onabort". Throw a global error instead.
@@ -4142,7 +4175,7 @@
         }
       }
 
-      if (me.mode === 'readwrite') {
+      if (me.mode === "readwrite") {
         if (me.__transactionFinished) {
           complete();
           return;
@@ -4152,12 +4185,12 @@
         return;
       }
 
-      if (me.mode === 'readonly') {
+      if (me.mode === "readonly") {
         complete();
         return;
       }
 
-      var ev = createEvent('__beforecomplete');
+      var ev = createEvent("__beforecomplete");
       ev.complete = complete;
       me.dispatchEvent(ev);
     }
@@ -4171,7 +4204,7 @@
    */
 
 
-  IDBTransaction.prototype.__createRequest = function (source) {
+  IDBTransaction.prototype.__createRequest = function(source) {
     var me = this;
 
     var request = IDBRequest.__createInstance();
@@ -4190,7 +4223,7 @@
    */
 
 
-  IDBTransaction.prototype.__addToTransactionQueue = function (callback, args, source) {
+  IDBTransaction.prototype.__addToTransactionQueue = function(callback, args, source) {
     var request = this.__createRequest(source);
 
     this.__pushToQueue(request, callback, args);
@@ -4208,7 +4241,7 @@
    */
 
 
-  IDBTransaction.prototype.__addNonRequestToTransactionQueue = function (callback, args, source) {
+  IDBTransaction.prototype.__addNonRequestToTransactionQueue = function(callback, args, source) {
     this.__pushToQueue(null, callback, args);
   };
   /**
@@ -4221,29 +4254,29 @@
    */
 
 
-  IDBTransaction.prototype.__pushToQueue = function (request, callback, args) {
+  IDBTransaction.prototype.__pushToQueue = function(request, callback, args) {
     this.__assertActive();
 
     this.__requests.push({
       op: callback,
       args: args,
-      req: request
+      req: request,
     });
   };
 
-  IDBTransaction.prototype.__assertActive = function () {
+  IDBTransaction.prototype.__assertActive = function() {
     if (!this.__active) {
-      throw createDOMException('TransactionInactiveError', 'A request was placed against a transaction which is currently not active, or which is finished');
+      throw createDOMException("TransactionInactiveError", "A request was placed against a transaction which is currently not active, or which is finished");
     }
   };
 
-  IDBTransaction.prototype.__assertWritable = function () {
-    if (this.mode === 'readonly') {
-      throw createDOMException('ReadOnlyError', 'The transaction is read only');
+  IDBTransaction.prototype.__assertWritable = function() {
+    if (this.mode === "readonly") {
+      throw createDOMException("ReadOnlyError", "The transaction is read only");
     }
   };
 
-  IDBTransaction.prototype.__assertVersionChange = function () {
+  IDBTransaction.prototype.__assertVersionChange = function() {
     IDBTransaction.__assertVersionChange(this);
   };
   /**
@@ -4253,42 +4286,42 @@
    */
 
 
-  IDBTransaction.prototype.objectStore = function (objectStoreName) {
+  IDBTransaction.prototype.objectStore = function(objectStoreName) {
     var me = this;
 
     if (!(me instanceof IDBTransaction)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (arguments.length === 0) {
-      throw new TypeError('No object store name was specified');
+      throw new TypeError("No object store name was specified");
     }
 
     IDBTransaction.__assertNotFinished(me);
 
     if (me.__objectStoreNames.indexOf(objectStoreName) === -1) {
       // eslint-disable-line unicorn/prefer-includes
-      throw createDOMException('NotFoundError', objectStoreName + ' is not participating in this transaction');
+      throw createDOMException("NotFoundError", objectStoreName + " is not participating in this transaction");
     }
 
     var store = me.db.__objectStores[objectStoreName];
 
     if (!store) {
-      throw createDOMException('NotFoundError', objectStoreName + ' does not exist in ' + me.db.name);
+      throw createDOMException("NotFoundError", objectStoreName + " does not exist in " + me.db.name);
     }
 
     if (!me.__storeHandles[objectStoreName] || // These latter conditions are to allow store
-    //   recreation to create new clone object
-    me.__storeHandles[objectStoreName].__pendingDelete || me.__storeHandles[objectStoreName].__deleted) {
+      //   recreation to create new clone object
+      me.__storeHandles[objectStoreName].__pendingDelete || me.__storeHandles[objectStoreName].__deleted) {
       me.__storeHandles[objectStoreName] = IDBObjectStore.__clone(store, me);
     }
 
     return me.__storeHandles[objectStoreName];
   };
 
-  IDBTransaction.prototype.__abortTransaction = function (err) {
+  IDBTransaction.prototype.__abortTransaction = function(err) {
     var me = this;
-    logError('Error', 'An error occurred in a transaction', err);
+    logError("Error", "An error occurred in a transaction", err);
 
     if (me.__errored) {
       // We've already called "onerror", "onabort", or thrown, so don't do it again.
@@ -4297,23 +4330,23 @@
 
     me.__errored = true;
 
-    if (me.mode === 'versionchange') {
+    if (me.mode === "versionchange") {
       // Steps for aborting an upgrade transaction
       me.db.__version = me.db.__oldVersion;
       me.db.__objectStoreNames = me.db.__oldObjectStoreNames;
       me.__objectStoreNames = me.db.__oldObjectStoreNames;
-      Object.values(me.db.__objectStores).concat(Object.values(me.__storeHandles)).forEach(function (store) {
+      Object.values(me.db.__objectStores).concat(Object.values(me.__storeHandles)).forEach(function(store) {
         // Store was already created so we restore to name before the rename
-        if ('__pendingName' in store && me.db.__oldObjectStoreNames.indexOf(store.__pendingName) > -1 // eslint-disable-line unicorn/prefer-includes
+        if ("__pendingName" in store && me.db.__oldObjectStoreNames.indexOf(store.__pendingName) > -1 // eslint-disable-line unicorn/prefer-includes
         ) {
           store.__name = store.__originalName;
         }
 
         store.__indexNames = store.__oldIndexNames;
         delete store.__pendingDelete;
-        Object.values(store.__indexes).concat(Object.values(store.__indexHandles)).forEach(function (index) {
+        Object.values(store.__indexes).concat(Object.values(store.__indexHandles)).forEach(function(index) {
           // Index was already created so we restore to name before the rename
-          if ('__pendingName' in index && store.__oldIndexNames.indexOf(index.__pendingName) > -1 // eslint-disable-line unicorn/prefer-includes
+          if ("__pendingName" in index && store.__oldIndexNames.indexOf(index.__pendingName) > -1 // eslint-disable-line unicorn/prefer-includes
           ) {
             index.__name = index.__originalName;
           }
@@ -4332,73 +4365,73 @@
     if (me.__requestsFinished) {
       // The transaction has already completed, so we can't call "onerror" or "onabort".
       // So throw the error instead.
-      setTimeout(function () {
+      setTimeout(function() {
         throw err;
       }, 0);
     }
 
     function abort(tx, errOrResult) {
       if (!tx) {
-        CFG.DEBUG && console.log('Rollback not possible due to missing transaction', me);
-      } else if (errOrResult && typeof errOrResult.code === 'number') {
-        CFG.DEBUG && console.log('Rollback erred; feature is probably not supported as per WebSQL', me);
+        CFG.DEBUG && console.log("Rollback not possible due to missing transaction", me);
+      } else if (errOrResult && typeof errOrResult.code === "number") {
+        CFG.DEBUG && console.log("Rollback erred; feature is probably not supported as per WebSQL", me);
       } else {
-        CFG.DEBUG && console.log('Rollback succeeded', me);
+        CFG.DEBUG && console.log("Rollback succeeded", me);
       }
 
-      me.dispatchEvent(createEvent('__preabort'));
+      me.dispatchEvent(createEvent("__preabort"));
 
-      me.__requests.filter(function (q, i, arr) {
+      me.__requests.filter(function(q, i, arr) {
         // eslint-disable-line promise/no-promise-in-callback
-        return q.req && !q.req.__done && [i, -1].includes(arr.map(function (q) {
+        return q.req && !q.req.__done && [i, -1].includes(arr.map(function(q) {
           return q.req;
         }).lastIndexOf(q.req));
-      }).reduce(function (promises, q) {
+      }).reduce(function(promises, q) {
         // We reduce to a chain of promises to be queued in order, so we cannot
         //  use `Promise.all`, and I'm unsure whether `setTimeout` currently
         //  behaves first-in-first-out with the same timeout so we could
         //  just use a `forEach`.
-        return promises.then(function () {
+        return promises.then(function() {
           q.req.__done = true;
           q.req.__result = undefined;
-          q.req.__error = createDOMException('AbortError', 'A request was aborted (an unfinished request).');
-          var reqEvt = createEvent('error', q.req.__error, {
+          q.req.__error = createDOMException("AbortError", "A request was aborted (an unfinished request).");
+          var reqEvt = createEvent("error", q.req.__error, {
             bubbles: true,
-            cancelable: true
+            cancelable: true,
           });
-          return new syncPromiseCommonjs(function (resolve) {
-            setTimeout(function () {
+          return new syncPromiseCommonjs(function(resolve) {
+            setTimeout(function() {
               q.req.dispatchEvent(reqEvt); // No need to catch errors
 
               resolve();
             });
           });
         });
-      }, syncPromiseCommonjs.resolve()).then(function () {
+      }, syncPromiseCommonjs.resolve()).then(function() {
         // Also works when there are no pending requests
-        var evt = createEvent('abort', err, {
+        var evt = createEvent("abort", err, {
           bubbles: true,
-          cancelable: false
+          cancelable: false,
         });
-        setTimeout(function () {
+        setTimeout(function() {
           me.__abortFinished = true;
           me.dispatchEvent(evt);
           me.__storeHandles = {};
-          me.dispatchEvent(createEvent('__abort'));
+          me.dispatchEvent(createEvent("__abort"));
         });
         return undefined;
-      })["catch"](function (err) {
-        console.log('Abort error');
+      })["catch"](function(err) {
+        console.log("Abort error");
         throw err;
       });
     }
 
-    me.__transFinishedCb(true, function (rollback) {
+    me.__transFinishedCb(true, function(rollback) {
       if (rollback && me.__tx) {
         // Not supported in standard SQL (and WebSQL errors should
         //   rollback automatically), but for Node.js, etc., we give chance for
         //   manual aborts which would otherwise not work.
-        if (me.mode === 'readwrite') {
+        if (me.mode === "readwrite") {
           if (me.__transactionFinished) {
             abort();
             return;
@@ -4409,7 +4442,7 @@
         }
 
         try {
-          me.__tx.executeSql('ROLLBACK', [], abort, abort); // Not working in some circumstances, even in Node
+          me.__tx.executeSql("ROLLBACK", [], abort, abort); // Not working in some circumstances, even in Node
 
         } catch (err) {
           // Browser errs when transaction has ended and since it most likely already erred here,
@@ -4418,92 +4451,92 @@
         }
       } else {
         abort(null, {
-          code: 0
+          code: 0,
         });
       }
     });
   };
 
-  IDBTransaction.prototype.abort = function () {
+  IDBTransaction.prototype.abort = function() {
     var me = this;
 
     if (!(me instanceof IDBTransaction)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
-    CFG.DEBUG && console.log('The transaction was aborted', me);
+    CFG.DEBUG && console.log("The transaction was aborted", me);
 
     IDBTransaction.__assertNotFinished(me);
 
     me.__abortTransaction(null);
   };
 
-  IDBTransaction.prototype[Symbol.toStringTag] = 'IDBTransactionPrototype';
+  IDBTransaction.prototype[Symbol.toStringTag] = "IDBTransactionPrototype";
 
-  IDBTransaction.__assertVersionChange = function (tx) {
-    if (!tx || tx.mode !== 'versionchange') {
-      throw createDOMException('InvalidStateError', 'Not a version transaction');
+  IDBTransaction.__assertVersionChange = function(tx) {
+    if (!tx || tx.mode !== "versionchange") {
+      throw createDOMException("InvalidStateError", "Not a version transaction");
     }
   };
 
-  IDBTransaction.__assertNotVersionChange = function (tx) {
-    if (tx && tx.mode === 'versionchange') {
-      throw createDOMException('InvalidStateError', 'Cannot be called during a version transaction');
+  IDBTransaction.__assertNotVersionChange = function(tx) {
+    if (tx && tx.mode === "versionchange") {
+      throw createDOMException("InvalidStateError", "Cannot be called during a version transaction");
     }
   };
 
-  IDBTransaction.__assertNotFinished = function (tx) {
+  IDBTransaction.__assertNotFinished = function(tx) {
     if (!tx || tx.__completed || tx.__abortFinished || tx.__errored) {
-      throw createDOMException('InvalidStateError', 'Transaction finished by commit or abort');
+      throw createDOMException("InvalidStateError", "Transaction finished by commit or abort");
     }
   }; // object store methods behave differently: see https://github.com/w3c/IndexedDB/issues/192
 
 
-  IDBTransaction.__assertNotFinishedObjectStoreMethod = function (tx) {
+  IDBTransaction.__assertNotFinishedObjectStoreMethod = function(tx) {
     try {
       IDBTransaction.__assertNotFinished(tx);
     } catch (err) {
       if (tx && !tx.__completed && !tx.__abortFinished) {
-        throw createDOMException('TransactionInactiveError', 'A request was placed against a transaction which is currently not active, or which is finished');
+        throw createDOMException("TransactionInactiveError", "A request was placed against a transaction which is currently not active, or which is finished");
       }
 
       throw err;
     }
   };
 
-  IDBTransaction.__assertActive = function (tx) {
+  IDBTransaction.__assertActive = function(tx) {
     if (!tx || !tx.__active) {
-      throw createDOMException('TransactionInactiveError', 'A request was placed against a transaction which is currently not active, or which is finished');
+      throw createDOMException("TransactionInactiveError", "A request was placed against a transaction which is currently not active, or which is finished");
     }
   };
   /**
-  * Used by our `EventTarget.prototype` library to implement bubbling/capturing.
-  * @returns {IDBDatabase}
-  */
+   * Used by our `EventTarget.prototype` library to implement bubbling/capturing.
+   * @returns {IDBDatabase}
+   */
 
 
-  IDBTransaction.prototype.__getParent = function () {
+  IDBTransaction.prototype.__getParent = function() {
     return this.db;
   };
 
   defineOuterInterface(IDBTransaction.prototype, listeners$1);
   defineReadonlyOuterInterface(IDBTransaction.prototype, readonlyProperties$3);
-  Object.defineProperty(IDBTransaction.prototype, 'constructor', {
+  Object.defineProperty(IDBTransaction.prototype, "constructor", {
     enumerable: false,
     writable: true,
     configurable: true,
-    value: IDBTransaction
+    value: IDBTransaction,
   });
-  Object.defineProperty(IDBTransaction, 'prototype', {
-    writable: false
+  Object.defineProperty(IDBTransaction, "prototype", {
+    writable: false,
   });
 
-  var typeson$1 = {exports: {}};
+  var typeson$1 = { exports: {} };
 
-  (function (module, exports) {
-    (function (global, factory) {
-      module.exports = factory() ;
-    })(commonjsGlobal, function () {
+  (function(module, exports) {
+    (function(global, factory) {
+      module.exports = factory();
+    })(commonjsGlobal, function() {
 
       function _typeof(obj) {
         "@babel/helpers - typeof";
@@ -4549,7 +4582,7 @@
             value: value,
             enumerable: true,
             configurable: true,
-            writable: true
+            writable: true,
           });
         } else {
           obj[key] = value;
@@ -4563,7 +4596,7 @@
 
         if (Object.getOwnPropertySymbols) {
           var symbols = Object.getOwnPropertySymbols(object);
-          if (enumerableOnly) symbols = symbols.filter(function (sym) {
+          if (enumerableOnly) symbols = symbols.filter(function(sym) {
             return Object.getOwnPropertyDescriptor(object, sym).enumerable;
           });
           keys.push.apply(keys, symbols);
@@ -4577,13 +4610,13 @@
           var source = arguments[i] != null ? arguments[i] : {};
 
           if (i % 2) {
-            ownKeys(Object(source), true).forEach(function (key) {
+            ownKeys(Object(source), true).forEach(function(key) {
               _defineProperty(target, key, source[key]);
             });
           } else if (Object.getOwnPropertyDescriptors) {
             Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
           } else {
-            ownKeys(Object(source)).forEach(function (key) {
+            ownKeys(Object(source)).forEach(function(key) {
               Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
             });
           }
@@ -4665,15 +4698,16 @@
       function _nonIterableRest() {
         throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
       }
+
       /**
-      * @callback TypesonFulfilled
-      * @returns {Promise<any>|any}
-      */
+       * @callback TypesonFulfilled
+       * @returns {Promise<any>|any}
+       */
 
       /**
-      * @callback TypesonRejected
-      * @returns {Promise<any>|any}
-      */
+       * @callback TypesonRejected
+       * @returns {Promise<any>|any}
+       */
 
       /**
        * @callback TypesonResolve
@@ -4720,13 +4754,13 @@
       // class TypesonPromise extends Promise {get[Symbol.toStringTag](){return 'TypesonPromise'};} // eslint-disable-line keyword-spacing, space-before-function-paren, space-before-blocks, block-spacing, semi
 
 
-      TypesonPromise.__typeson__type__ = 'TypesonPromise'; // Note: core-js-bundle provides a `Symbol` polyfill
+      TypesonPromise.__typeson__type__ = "TypesonPromise"; // Note: core-js-bundle provides a `Symbol` polyfill
 
       /* istanbul ignore else */
 
-      if (typeof Symbol !== 'undefined') {
+      if (typeof Symbol !== "undefined") {
         // Ensure `isUserObject` will return `false` for `TypesonPromise`
-        TypesonPromise.prototype[Symbol.toStringTag] = 'TypesonPromise';
+        TypesonPromise.prototype[Symbol.toStringTag] = "TypesonPromise";
       }
       /**
        *
@@ -4736,15 +4770,15 @@
        */
 
 
-      TypesonPromise.prototype.then = function (onFulfilled, onRejected) {
+      TypesonPromise.prototype.then = function(onFulfilled, onRejected) {
         var _this = this;
 
-        return new TypesonPromise(function (typesonResolve, typesonReject) {
+        return new TypesonPromise(function(typesonResolve, typesonReject) {
           // eslint-disable-next-line promise/catch-or-return
-          _this.p.then(function (res) {
+          _this.p.then(function(res) {
             // eslint-disable-next-line promise/always-return
             typesonResolve(onFulfilled ? onFulfilled(res) : res);
-          })["catch"](function (res) {
+          })["catch"](function(res) {
             return onRejected ? onRejected(res) : Promise.reject(res);
           }).then(typesonResolve, typesonReject);
         });
@@ -4756,7 +4790,7 @@
        */
 
 
-      TypesonPromise.prototype["catch"] = function (onRejected) {
+      TypesonPromise.prototype["catch"] = function(onRejected) {
         return this.then(null, onRejected);
       };
       /**
@@ -4766,8 +4800,8 @@
        */
 
 
-      TypesonPromise.resolve = function (v) {
-        return new TypesonPromise(function (typesonResolve) {
+      TypesonPromise.resolve = function(v) {
+        return new TypesonPromise(function(typesonResolve) {
           typesonResolve(v);
         });
       };
@@ -4778,32 +4812,33 @@
        */
 
 
-      TypesonPromise.reject = function (v) {
-        return new TypesonPromise(function (typesonResolve, typesonReject) {
+      TypesonPromise.reject = function(v) {
+        return new TypesonPromise(function(typesonResolve, typesonReject) {
           typesonReject(v);
         });
       };
 
-      ['all', 'race', 'allSettled'].forEach(function (meth) {
+      ["all", "race", "allSettled"].forEach(function(meth) {
         /**
          *
          * @param {Promise<any>[]} promArr
          * @returns {TypesonPromise}
          */
-        TypesonPromise[meth] = function (promArr) {
-          return new TypesonPromise(function (typesonResolve, typesonReject) {
+        TypesonPromise[meth] = function(promArr) {
+          return new TypesonPromise(function(typesonResolve, typesonReject) {
             // eslint-disable-next-line promise/catch-or-return
-            Promise[meth](promArr.map(function (prom) {
-              return prom && prom.constructor && prom.constructor.__typeson__type__ === 'TypesonPromise' ? prom.p : prom;
+            Promise[meth](promArr.map(function(prom) {
+              return prom && prom.constructor && prom.constructor.__typeson__type__ === "TypesonPromise" ? prom.p : prom;
             })).then(typesonResolve, typesonReject);
           });
         };
       });
       var _ref = {},
-          toStr = _ref.toString,
-          hasOwn$1 = {}.hasOwnProperty,
-          getProto = Object.getPrototypeOf,
-          fnToString = hasOwn$1.toString;
+        toStr = _ref.toString,
+        hasOwn$1 = {}.hasOwnProperty,
+        getProto = Object.getPrototypeOf,
+        fnToString = hasOwn$1.toString;
+
       /**
        * Second argument not in use internally, but provided for utility.
        * @param {any} v
@@ -4812,8 +4847,9 @@
        */
 
       function isThenable(v, catchCheck) {
-        return isObject(v) && typeof v.then === 'function' && (!catchCheck || typeof v["catch"] === 'function');
+        return isObject(v) && typeof v.then === "function" && (!catchCheck || typeof v["catch"] === "function");
       }
+
       /**
        *
        * @param {any} val
@@ -4824,6 +4860,7 @@
       function toStringTag(val) {
         return toStr.call(val).slice(8, -1);
       }
+
       /**
        * This function is dependent on both constructors
        *   being identical so any minimization is expected of both.
@@ -4834,7 +4871,7 @@
 
 
       function hasConstructorOf(a, b) {
-        if (!a || _typeof(a) !== 'object') {
+        if (!a || _typeof(a) !== "object") {
           return false;
         }
 
@@ -4844,9 +4881,9 @@
           return b === null;
         }
 
-        var Ctor = hasOwn$1.call(proto, 'constructor') && proto.constructor;
+        var Ctor = hasOwn$1.call(proto, "constructor") && proto.constructor;
 
-        if (typeof Ctor !== 'function') {
+        if (typeof Ctor !== "function") {
           return b === null;
         }
 
@@ -4858,12 +4895,13 @@
           return true;
         }
 
-        if (typeof b === 'function' && typeof Ctor.__typeson__type__ === 'string' && Ctor.__typeson__type__ === b.__typeson__type__) {
+        if (typeof b === "function" && typeof Ctor.__typeson__type__ === "string" && Ctor.__typeson__type__ === b.__typeson__type__) {
           return true;
         }
 
         return false;
       }
+
       /**
        *
        * @param {any} val
@@ -4873,7 +4911,7 @@
 
       function isPlainObject(val) {
         // Mirrors jQuery's
-        if (!val || toStringTag(val) !== 'Object') {
+        if (!val || toStringTag(val) !== "Object") {
           return false;
         }
 
@@ -4886,6 +4924,7 @@
 
         return hasConstructorOf(val, Object);
       }
+
       /**
        *
        * @param {any} val
@@ -4894,7 +4933,7 @@
 
 
       function isUserObject(val) {
-        if (!val || toStringTag(val) !== 'Object') {
+        if (!val || toStringTag(val) !== "Object") {
           return false;
         }
 
@@ -4907,6 +4946,7 @@
 
         return hasConstructorOf(val, Object) || isUserObject(proto);
       }
+
       /**
        *
        * @param {any} v
@@ -4915,8 +4955,9 @@
 
 
       function isObject(v) {
-        return v && _typeof(v) === 'object';
+        return v && _typeof(v) === "object";
       }
+
       /**
        *
        * @param {string} keyPathComponent
@@ -4925,8 +4966,9 @@
 
 
       function escapeKeyPathComponent(keyPathComponent) {
-        return keyPathComponent.replace(/~/g, '~0').replace(/\./g, '~1');
+        return keyPathComponent.replace(/~/g, "~0").replace(/\./g, "~1");
       }
+
       /**
        *
        * @param {string} keyPathComponent
@@ -4935,8 +4977,9 @@
 
 
       function unescapeKeyPathComponent(keyPathComponent) {
-        return keyPathComponent.replace(/~1/g, '.').replace(/~0/g, '~');
+        return keyPathComponent.replace(/~1/g, ".").replace(/~0/g, "~");
       }
+
       /**
        * @param {PlainObject|GenericArray} obj
        * @param {string} keyPath
@@ -4945,11 +4988,11 @@
 
 
       function getByKeyPath(obj, keyPath) {
-        if (keyPath === '') {
+        if (keyPath === "") {
           return obj;
         }
 
-        var period = keyPath.indexOf('.');
+        var period = keyPath.indexOf(".");
 
         if (period > -1) {
           var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];
@@ -4958,6 +5001,7 @@
 
         return obj[unescapeKeyPathComponent(keyPath)];
       }
+
       /**
        *
        * @param {PlainObject} obj
@@ -4968,11 +5012,11 @@
 
 
       function setAtKeyPath(obj, keyPath, value) {
-        if (keyPath === '') {
+        if (keyPath === "") {
           return value;
         }
 
-        var period = keyPath.indexOf('.');
+        var period = keyPath.indexOf(".");
 
         if (period > -1) {
           var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];
@@ -4982,6 +5026,7 @@
         obj[unescapeKeyPathComponent(keyPath)] = value;
         return obj;
       }
+
       /**
        *
        * @param {external:JSON} value
@@ -4991,7 +5036,7 @@
 
 
       function getJSONType(value) {
-        return value === null ? 'null' : Array.isArray(value) ? 'array' : _typeof(value);
+        return value === null ? "null" : Array.isArray(value) ? "array" : _typeof(value);
       }
 
       function _await(value, then, direct) {
@@ -5007,9 +5052,10 @@
       }
 
       var keys = Object.keys,
-          isArray = Array.isArray,
-          hasOwn = {}.hasOwnProperty,
-          internalStateObjPropsToIgnore = ['type', 'replaced', 'iterateIn', 'iterateUnsetNumeric'];
+        isArray = Array.isArray,
+        hasOwn = {}.hasOwnProperty,
+        internalStateObjPropsToIgnore = ["type", "replaced", "iterateIn", "iterateUnsetNumeric"];
+
       /**
        * Handle plain object revivers first so reference setting can use
        * revived type (e.g., array instead of object); assumes revived
@@ -5020,7 +5066,7 @@
        */
 
       function _async(f) {
-        return function () {
+        return function() {
           for (var args = [], i = 0; i < arguments.length; i++) {
             args[i] = arguments[i];
           }
@@ -5032,6 +5078,7 @@
           }
         };
       }
+
       /**
        * @callback Tester
        * @param {any} value
@@ -5040,23 +5087,23 @@
        */
 
       /**
-      * @callback Replacer
-      * @param {any} value
-      * @param {StateObject} stateObj
-      * @returns {any} Should be JSON-stringifiable
-      */
+       * @callback Replacer
+       * @param {any} value
+       * @param {StateObject} stateObj
+       * @returns {any} Should be JSON-stringifiable
+       */
 
       /**
-      * @callback Reviver
-      * @param {JSON} value
-      * @param {StateObject} stateObj
-      * @returns {any}
-      */
+       * @callback Reviver
+       * @param {JSON} value
+       * @param {StateObject} stateObj
+       * @returns {any}
+       */
 
       /**
-      * @typedef {PlainObject} TypesonOptions
-      * @property {boolean} stringification Auto-set by `stringify`
-      */
+       * @typedef {PlainObject} TypesonOptions
+       * @property {boolean} stringification Auto-set by `stringify`
+       */
 
       /**
        * An instance of this class can be used to call `stringify()` and `parse()`.
@@ -5080,7 +5127,7 @@
       }
 
       function nestedPathsFirst(a, b) {
-        if (a.keypath === '') {
+        if (a.keypath === "") {
           return -1;
         }
 
@@ -5098,7 +5145,7 @@
         return as > bs ? -1 : as < bs ? 1 : a.keypath < b.keypath ? -1 : a.keypath > b.keypath;
       }
 
-      var Typeson = /*#__PURE__*/function () {
+      var Typeson = /*#__PURE__*/function() {
         /**
          * @param {TypesonOptions} options
          */
@@ -5117,17 +5164,18 @@
 
           this.types = {};
         }
+
         /**
-        * @typedef {null|boolean|number|string|GenericArray|PlainObject} JSON
-        */
+         * @typedef {null|boolean|number|string|GenericArray|PlainObject} JSON
+         */
 
         /**
-        * @callback JSONReplacer
-        * @param {""|string} key
-        * @param {JSON} value
-        * @returns {number|string|boolean|null|PlainObject|undefined}
-        * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The%20replacer%20parameter
-        */
+         * @callback JSONReplacer
+         * @param {""|string} key
+         * @param {JSON} value
+         * @returns {number|string|boolean|null|PlainObject|undefined}
+         * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The%20replacer%20parameter
+         */
 
         /**
          * Serialize given object to Typeson.
@@ -5145,7 +5193,7 @@
           key: "stringify",
           value: function stringify(obj, replacer, space, opts) {
             opts = _objectSpread2(_objectSpread2(_objectSpread2({}, this.options), opts), {}, {
-              stringification: true
+              stringification: true,
             });
             var encapsulated = this.encapsulate(obj, null, opts);
 
@@ -5153,10 +5201,10 @@
               return JSON.stringify(encapsulated[0], replacer, space);
             }
 
-            return encapsulated.then(function (res) {
+            return encapsulated.then(function(res) {
               return JSON.stringify(res, replacer, space);
             });
-          }
+          },
           /**
            * Also sync but throws on non-sync result.
            * @param {any} obj
@@ -5170,11 +5218,11 @@
           key: "stringifySync",
           value: function stringifySync(obj, replacer, space, opts) {
             return this.stringify(obj, replacer, space, _objectSpread2(_objectSpread2({
-              throwOnBadSyncType: true
+              throwOnBadSyncType: true,
             }, opts), {}, {
-              sync: true
+              sync: true,
             }));
-          }
+          },
           /**
            *
            * @param {any} obj
@@ -5188,17 +5236,17 @@
           key: "stringifyAsync",
           value: function stringifyAsync(obj, replacer, space, opts) {
             return this.stringify(obj, replacer, space, _objectSpread2(_objectSpread2({
-              throwOnBadSyncType: true
+              throwOnBadSyncType: true,
             }, opts), {}, {
-              sync: false
+              sync: false,
             }));
-          }
+          },
           /**
-          * @callback JSONReviver
-          * @param {string} key
-          * @param {JSON} value
-          * @returns {JSON}
-          */
+           * @callback JSONReviver
+           * @param {string} key
+           * @param {JSON} value
+           * @returns {JSON}
+           */
 
           /**
            * Parse Typeson back into an obejct.
@@ -5214,48 +5262,48 @@
           key: "parse",
           value: function parse(text, reviver, opts) {
             opts = _objectSpread2(_objectSpread2(_objectSpread2({}, this.options), opts), {}, {
-              parse: true
+              parse: true,
             });
             return this.revive(JSON.parse(text, reviver), opts);
-          }
+          },
           /**
-          * Also sync but throws on non-sync result.
-          * @param {string} text
-          * @param {JSONReviver} reviver This JSON reviver has nothing to do with
-          *   our revivers.
-          * @param {TypesonOptions} opts
-          * @returns {external:JSON}
-          */
+           * Also sync but throws on non-sync result.
+           * @param {string} text
+           * @param {JSONReviver} reviver This JSON reviver has nothing to do with
+           *   our revivers.
+           * @param {TypesonOptions} opts
+           * @returns {external:JSON}
+           */
 
         }, {
           key: "parseSync",
           value: function parseSync(text, reviver, opts) {
             return this.parse(text, reviver, _objectSpread2(_objectSpread2({
-              throwOnBadSyncType: true
+              throwOnBadSyncType: true,
             }, opts), {}, {
-              sync: true
+              sync: true,
             }));
-          }
+          },
           /**
-          * @param {string} text
-          * @param {JSONReviver} reviver This JSON reviver has nothing to do with
-          *   our revivers.
-          * @param {TypesonOptions} opts
-          * @returns {Promise<external:JSON>} Resolves to `external:JSON`
-          */
+           * @param {string} text
+           * @param {JSONReviver} reviver This JSON reviver has nothing to do with
+           *   our revivers.
+           * @param {TypesonOptions} opts
+           * @returns {Promise<external:JSON>} Resolves to `external:JSON`
+           */
 
         }, {
           key: "parseAsync",
           value: function parseAsync(text, reviver, opts) {
             return this.parse(text, reviver, _objectSpread2(_objectSpread2({
-              throwOnBadSyncType: true
+              throwOnBadSyncType: true,
             }, opts), {}, {
-              sync: false
+              sync: false,
             }));
-          }
+          },
           /**
-          * @typedef {} StateObject
-          */
+           * @typedef {} StateObject
+           */
 
           /**
            *
@@ -5271,7 +5319,7 @@
             var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
             opts.returnTypeNames = true;
             return this.encapsulate(obj, stateObj, opts);
-          }
+          },
           /**
            *
            * @param {any} obj
@@ -5286,7 +5334,7 @@
             var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
             opts.iterateNone = true;
             return this.encapsulate(obj, stateObj, opts);
-          }
+          },
           /**
            * Encapsulate a complex object into a plain Object by replacing
            * registered types with plain objects representing the types data.
@@ -5307,40 +5355,40 @@
              * @param {GenericArray} promisesData
              * @returns {Promise<any>}
              */
-            var checkPromises = _async(function (ret, promisesData) {
-              return _await(Promise.all(promisesData.map(function (pd) {
+            var checkPromises = _async(function(ret, promisesData) {
+              return _await(Promise.all(promisesData.map(function(pd) {
                 return pd[1].p;
-              })), function (promResults) {
-                return _await(Promise.all(promResults.map(_async(function (promResult) {
+              })), function(promResults) {
+                return _await(Promise.all(promResults.map(_async(function(promResult) {
                   var _exit = false;
                   var newPromisesData = [];
 
                   var _promisesData$splice = promisesData.splice(0, 1),
-                      _promisesData$splice2 = _slicedToArray(_promisesData$splice, 1),
-                      prData = _promisesData$splice2[0];
+                    _promisesData$splice2 = _slicedToArray(_promisesData$splice, 1),
+                    prData = _promisesData$splice2[0];
 
                   var _prData = _slicedToArray(prData, 7),
-                      keyPath = _prData[0],
-                      cyclic = _prData[2],
-                      stateObj = _prData[3],
-                      parentObj = _prData[4],
-                      key = _prData[5],
-                      detectedType = _prData[6];
+                    keyPath = _prData[0],
+                    cyclic = _prData[2],
+                    stateObj = _prData[3],
+                    parentObj = _prData[4],
+                    key = _prData[5],
+                    detectedType = _prData[6];
 
                   var encaps = _encapsulate(keyPath, promResult, cyclic, stateObj, newPromisesData, true, detectedType);
 
                   var isTypesonPromise = hasConstructorOf(encaps, TypesonPromise); // Handle case where an embedded custom type itself
                   //   returns a `Typeson.Promise`
 
-                  return _invoke(function () {
+                  return _invoke(function() {
                     if (keyPath && isTypesonPromise) {
-                      return _await(encaps.p, function (encaps2) {
+                      return _await(encaps.p, function(encaps2) {
                         parentObj[key] = encaps2;
                         _exit = true;
                         return checkPromises(ret, newPromisesData);
                       });
                     }
-                  }, function (_result) {
+                  }, function(_result) {
                     if (_exit) return _result;
 
                     if (keyPath) {
@@ -5360,20 +5408,20 @@
 
                     return checkPromises(ret, newPromisesData);
                   });
-                }))), function () {
+                }))), function() {
                   return ret;
                 });
               });
             });
             /**
-            * @typedef {PlainObject} OwnKeysObject
-            * @property {boolean} ownKeys
-            */
+             * @typedef {PlainObject} OwnKeysObject
+             * @property {boolean} ownKeys
+             */
 
             /**
-            * @callback BuiltinStateObjectPropertiesCallback
-            * @returns {void}
-            */
+             * @callback BuiltinStateObjectPropertiesCallback
+             * @returns {void}
+             */
 
             /**
              *
@@ -5385,24 +5433,25 @@
 
 
             opts = _objectSpread2(_objectSpread2({
-              sync: true
+              sync: true,
             }, this.options), opts);
             var _opts = opts,
-                sync = _opts.sync;
+              sync = _opts.sync;
             var that = this,
-                types = {},
-                refObjs = [],
-                // For checking cyclic references
-            refKeys = [],
-                // For checking cyclic references
-            promisesDataRoot = []; // Clone the object deeply while at the same time replacing any
+              types = {},
+              refObjs = [],
+              // For checking cyclic references
+              refKeys = [],
+              // For checking cyclic references
+              promisesDataRoot = []; // Clone the object deeply while at the same time replacing any
             //   special types or cyclic reference:
 
-            var cyclic = 'cyclic' in opts ? opts.cyclic : true;
+            var cyclic = "cyclic" in opts ? opts.cyclic : true;
             var _opts2 = opts,
-                encapsulateObserver = _opts2.encapsulateObserver;
+              encapsulateObserver = _opts2.encapsulateObserver;
+
+            var ret = _encapsulate("", obj, cyclic, stateObj || {}, promisesDataRoot);
 
-            var ret = _encapsulate('', obj, cyclic, stateObj || {}, promisesDataRoot);
             /**
              *
              * @param {any} ret
@@ -5431,22 +5480,22 @@
 
 
                 if (!ret || !isPlainObject(ret) || // Also need to handle if this is an object with its
-                //   own `$types` property (to avoid ambiguity)
-                hasOwn.call(ret, '$types')) {
+                  //   own `$types` property (to avoid ambiguity)
+                  hasOwn.call(ret, "$types")) {
                   ret = {
                     $: ret,
                     $types: {
-                      $: types
-                    }
+                      $: types,
+                    },
                   };
                 } else {
                   ret.$types = types;
                 } // No special types
 
-              } else if (isObject(ret) && hasOwn.call(ret, '$types')) {
+              } else if (isObject(ret) && hasOwn.call(ret, "$types")) {
                 ret = {
                   $: ret,
-                  $types: true
+                  $types: true,
                 };
               }
 
@@ -5459,17 +5508,18 @@
 
             function _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, cb) {
               Object.assign(stateObj, ownKeysObj);
-              var vals = internalStateObjPropsToIgnore.map(function (prop) {
+              var vals = internalStateObjPropsToIgnore.map(function(prop) {
                 var tmp = stateObj[prop];
                 delete stateObj[prop];
                 return tmp;
               }); // eslint-disable-next-line node/callback-return
 
               cb();
-              internalStateObjPropsToIgnore.forEach(function (prop, i) {
+              internalStateObjPropsToIgnore.forEach(function(prop, i) {
                 stateObj[prop] = vals[i];
               });
             }
+
             /**
              *
              * @param {string} keypath
@@ -5489,7 +5539,7 @@
 
               var $typeof = _typeof(value);
 
-              var runObserver = encapsulateObserver ? function (obj) {
+              var runObserver = encapsulateObserver ? function(obj) {
                 var type = detectedType || stateObj.type || Typeson.getJSONType(value);
                 encapsulateObserver(Object.assign(obj || observerData, {
                   keypath: keypath,
@@ -5498,19 +5548,19 @@
                   stateObj: stateObj,
                   promisesData: promisesData,
                   resolvingTypesonPromise: resolvingTypesonPromise,
-                  awaitingTypesonPromise: hasConstructorOf(value, TypesonPromise)
+                  awaitingTypesonPromise: hasConstructorOf(value, TypesonPromise),
                 }, {
-                  type: type
+                  type: type,
                 }));
               } : null;
 
-              if (['string', 'boolean', 'number', 'undefined'].includes($typeof)) {
+              if (["string", "boolean", "number", "undefined"].includes($typeof)) {
                 if (value === undefined || Number.isNaN(value) || value === Number.NEGATIVE_INFINITY || value === Number.POSITIVE_INFINITY) {
                   ret = stateObj.replaced ? value : replace(keypath, value, stateObj, promisesData, false, resolvingTypesonPromise, runObserver);
 
                   if (ret !== value) {
                     observerData = {
-                      replaced: ret
+                      replaced: ret,
                     };
                   }
                 } else {
@@ -5532,7 +5582,7 @@
                 return value;
               }
 
-              if (cyclic && !stateObj.iterateIn && !stateObj.iterateUnsetNumeric && value && _typeof(value) === 'object') {
+              if (cyclic && !stateObj.iterateIn && !stateObj.iterateUnsetNumeric && value && _typeof(value) === "object") {
                 // Options set to detect cyclic references and be able
                 //   to rewrite them.
                 var refIndex = refObjs.indexOf(value);
@@ -5543,44 +5593,44 @@
                     refKeys.push(keypath);
                   }
                 } else {
-                  types[keypath] = '#';
+                  types[keypath] = "#";
 
                   if (runObserver) {
                     runObserver({
-                      cyclicKeypath: refKeys[refIndex]
+                      cyclicKeypath: refKeys[refIndex],
                     });
                   }
 
-                  return '#' + refKeys[refIndex];
+                  return "#" + refKeys[refIndex];
                 }
               }
 
               var isPlainObj = isPlainObject(value);
               var isArr = isArray(value);
               var replaced = // Running replace will cause infinite loop as will test
-              //   positive again
-              (isPlainObj || isArr) && (!that.plainObjectReplacers.length || stateObj.replaced) || stateObj.iterateIn ? // Optimization: if plain object and no plain-object
-              //   replacers, don't try finding a replacer
-              value : replace(keypath, value, stateObj, promisesData, isPlainObj || isArr, null, runObserver);
+                //   positive again
+                (isPlainObj || isArr) && (!that.plainObjectReplacers.length || stateObj.replaced) || stateObj.iterateIn ? // Optimization: if plain object and no plain-object
+                  //   replacers, don't try finding a replacer
+                  value : replace(keypath, value, stateObj, promisesData, isPlainObj || isArr, null, runObserver);
               var clone;
 
               if (replaced !== value) {
                 ret = replaced;
                 observerData = {
-                  replaced: replaced
+                  replaced: replaced,
                 };
               } else {
                 // eslint-disable-next-line no-lonely-if
-                if (keypath === '' && hasConstructorOf(value, TypesonPromise)) {
+                if (keypath === "" && hasConstructorOf(value, TypesonPromise)) {
                   promisesData.push([keypath, value, cyclic, stateObj, undefined, undefined, stateObj.type]);
                   ret = value;
-                } else if (isArr && stateObj.iterateIn !== 'object' || stateObj.iterateIn === 'array') {
+                } else if (isArr && stateObj.iterateIn !== "object" || stateObj.iterateIn === "array") {
                   // eslint-disable-next-line unicorn/no-new-array -- Sparse
                   clone = new Array(value.length);
                   observerData = {
-                    clone: clone
+                    clone: clone,
                   };
-                } else if (!['function', 'symbol'].includes(_typeof(value)) && !('toJSON' in value) && !hasConstructorOf(value, TypesonPromise) && !hasConstructorOf(value, Promise) && !hasConstructorOf(value, ArrayBuffer) || isPlainObj || stateObj.iterateIn === 'object') {
+                } else if (!["function", "symbol"].includes(_typeof(value)) && !("toJSON" in value) && !hasConstructorOf(value, TypesonPromise) && !hasConstructorOf(value, Promise) && !hasConstructorOf(value, ArrayBuffer) || isPlainObj || stateObj.iterateIn === "object") {
                   clone = {};
 
                   if (stateObj.addLength) {
@@ -5588,7 +5638,7 @@
                   }
 
                   observerData = {
-                    clone: clone
+                    clone: clone,
                   };
                 } else {
                   ret = value; // Only clone vanilla objects and arrays
@@ -5611,11 +5661,11 @@
               if (stateObj.iterateIn) {
                 var _loop = function _loop(key) {
                   var ownKeysObj = {
-                    ownKeys: hasOwn.call(value, key)
+                    ownKeys: hasOwn.call(value, key),
                   };
 
-                  _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {
-                    var kp = keypath + (keypath ? '.' : '') + escapeKeyPathComponent(key);
+                  _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function() {
+                    var kp = keypath + (keypath ? "." : "") + escapeKeyPathComponent(key);
 
                     var val = _encapsulate(kp, value[key], Boolean(cyclic), stateObj, promisesData, resolvingTypesonPromise);
 
@@ -5635,7 +5685,7 @@
                 if (runObserver) {
                   runObserver({
                     endIterateIn: true,
-                    end: true
+                    end: true,
                   });
                 }
               } else {
@@ -5643,13 +5693,13 @@
                 //  somewhat wasteful for arrays, but so too is iterating
                 //  all numeric indexes on sparse arrays when not wanted
                 //  or filtering own keys for positive integers
-                keys(value).forEach(function (key) {
-                  var kp = keypath + (keypath ? '.' : '') + escapeKeyPathComponent(key);
+                keys(value).forEach(function(key) {
+                  var kp = keypath + (keypath ? "." : "") + escapeKeyPathComponent(key);
                   var ownKeysObj = {
-                    ownKeys: true
+                    ownKeys: true,
                   };
 
-                  _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {
+                  _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function() {
                     var val = _encapsulate(kp, value[key], Boolean(cyclic), stateObj, promisesData, resolvingTypesonPromise);
 
                     if (hasConstructorOf(val, TypesonPromise)) {
@@ -5663,7 +5713,7 @@
                 if (runObserver) {
                   runObserver({
                     endIterateOwn: true,
-                    end: true
+                    end: true,
                   });
                 }
               } // Iterate array for non-own numeric properties (we can't
@@ -5677,12 +5727,12 @@
                 var _loop2 = function _loop2(i) {
                   if (!(i in value)) {
                     // No need to escape numeric
-                    var kp = keypath + (keypath ? '.' : '') + i;
+                    var kp = keypath + (keypath ? "." : "") + i;
                     var ownKeysObj = {
-                      ownKeys: false
+                      ownKeys: false,
                     };
 
-                    _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {
+                    _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function() {
                       var val = _encapsulate(kp, undefined, Boolean(cyclic), stateObj, promisesData, resolvingTypesonPromise);
 
                       if (hasConstructorOf(val, TypesonPromise)) {
@@ -5701,46 +5751,47 @@
                 if (runObserver) {
                   runObserver({
                     endIterateUnsetNumeric: true,
-                    end: true
+                    end: true,
                   });
                 }
               }
 
               return clone;
             }
+
             /**
-            * @typedef {PlainObject} KeyPathEvent
-            * @property {string} cyclicKeypath
-            */
+             * @typedef {PlainObject} KeyPathEvent
+             * @property {string} cyclicKeypath
+             */
 
             /**
-            * @typedef {PlainObject} EndIterateInEvent
-            * @property {boolean} endIterateIn
-            * @property {boolean} end
-            */
+             * @typedef {PlainObject} EndIterateInEvent
+             * @property {boolean} endIterateIn
+             * @property {boolean} end
+             */
 
             /**
-            * @typedef {PlainObject} EndIterateUnsetNumericEvent
-            * @property {boolean} endIterateUnsetNumeric
-            * @property {boolean} end
-            */
+             * @typedef {PlainObject} EndIterateUnsetNumericEvent
+             * @property {boolean} endIterateUnsetNumeric
+             * @property {boolean} end
+             */
 
             /**
-            * @typedef {PlainObject} TypeDetectedEvent
-            * @property {boolean} typeDetected
-            */
+             * @typedef {PlainObject} TypeDetectedEvent
+             * @property {boolean} typeDetected
+             */
 
             /**
-            * @typedef {PlainObject} ReplacingEvent
-            * @property {boolean} replacing
-            */
+             * @typedef {PlainObject} ReplacingEvent
+             * @property {boolean} replacing
+             */
 
             /**
-            * @callback Observer
-            * @param {KeyPathEvent|EndIterateInEvent|EndIterateUnsetNumericEvent|
-            * TypeDetectedEvent|ReplacingEvent} [event]
-            * @returns {void}
-            */
+             * @callback Observer
+             * @param {KeyPathEvent|EndIterateInEvent|EndIterateUnsetNumericEvent|
+             * TypeDetectedEvent|ReplacingEvent} [event]
+             * @returns {void}
+             */
 
             /**
              *
@@ -5781,45 +5832,45 @@
 
                   Object.assign(stateObj, {
                     type: type,
-                    replaced: true
+                    replaced: true,
                   });
 
                   if ((sync || !replacer.replaceAsync) && !replacer.replace) {
                     if (runObserver) {
                       runObserver({
-                        typeDetected: true
+                        typeDetected: true,
                       });
                     }
 
-                    return _encapsulate(keypath, value, cyclic && 'readonly', stateObj, promisesData, resolvingTypesonPromise, type);
+                    return _encapsulate(keypath, value, cyclic && "readonly", stateObj, promisesData, resolvingTypesonPromise, type);
                   }
 
                   if (runObserver) {
                     runObserver({
-                      replacing: true
+                      replacing: true,
                     });
                   } // Now, also traverse the result in case it contains its
                   //   own types to replace
 
 
-                  var replaceMethod = sync || !replacer.replaceAsync ? 'replace' : 'replaceAsync';
-                  return _encapsulate(keypath, replacer[replaceMethod](value, stateObj), cyclic && 'readonly', stateObj, promisesData, resolvingTypesonPromise, type);
+                  var replaceMethod = sync || !replacer.replaceAsync ? "replace" : "replaceAsync";
+                  return _encapsulate(keypath, replacer[replaceMethod](value, stateObj), cyclic && "readonly", stateObj, promisesData, resolvingTypesonPromise, type);
                 }
               }
 
               return value;
             }
 
-            return promisesDataRoot.length ? sync && opts.throwOnBadSyncType ? function () {
-              throw new TypeError('Sync method requested but async result obtained');
-            }() : Promise.resolve(checkPromises(ret, promisesDataRoot)).then(finish) : !sync && opts.throwOnBadSyncType ? function () {
-              throw new TypeError('Async method requested but sync result obtained');
-            }() // If this is a synchronous request for stringification, yet
-            //   a promise is the result, we don't want to resolve leading
-            //   to an async result, so we return an array to avoid
-            //   ambiguity
-            : opts.stringification && sync ? [finish(ret)] : sync ? finish(ret) : Promise.resolve(finish(ret));
-          }
+            return promisesDataRoot.length ? sync && opts.throwOnBadSyncType ? function() {
+              throw new TypeError("Sync method requested but async result obtained");
+            }() : Promise.resolve(checkPromises(ret, promisesDataRoot)).then(finish) : !sync && opts.throwOnBadSyncType ? function() {
+                throw new TypeError("Async method requested but sync result obtained");
+              }() // If this is a synchronous request for stringification, yet
+              //   a promise is the result, we don't want to resolve leading
+              //   to an async result, so we return an array to avoid
+              //   ambiguity
+              : opts.stringification && sync ? [finish(ret)] : sync ? finish(ret) : Promise.resolve(finish(ret));
+          },
           /**
            * Also sync but throws on non-sync result.
            * @param {any} obj
@@ -5832,11 +5883,11 @@
           key: "encapsulateSync",
           value: function encapsulateSync(obj, stateObj, opts) {
             return this.encapsulate(obj, stateObj, _objectSpread2(_objectSpread2({
-              throwOnBadSyncType: true
+              throwOnBadSyncType: true,
             }, opts), {}, {
-              sync: true
+              sync: true,
             }));
-          }
+          },
           /**
            * @param {any} obj
            * @param {StateObject} stateObj
@@ -5848,11 +5899,11 @@
           key: "encapsulateAsync",
           value: function encapsulateAsync(obj, stateObj, opts) {
             return this.encapsulate(obj, stateObj, _objectSpread2(_objectSpread2({
-              throwOnBadSyncType: true
+              throwOnBadSyncType: true,
             }, opts), {}, {
-              sync: false
+              sync: false,
             }));
-          }
+          },
           /**
            * Revive an encapsulated object.
            * This method is used internally by `Typeson.parse()`.
@@ -5881,10 +5932,10 @@
             }
 
             opts = _objectSpread2(_objectSpread2({
-              sync: true
+              sync: true,
             }, this.options), opts);
             var _opts3 = opts,
-                sync = _opts3.sync;
+              sync = _opts3.sync;
             var keyPathResolutions = [];
             var stateObj = {};
             var ignore$Types = true; // Special when root object is not a trivial Object, it will
@@ -5898,6 +5949,7 @@
             }
 
             var that = this;
+
             /**
              * @callback RevivalReducer
              * @param {any} value
@@ -5915,24 +5967,25 @@
 
             function executeReviver(type, val) {
               var _ref = that.revivers[type] || [],
-                  _ref2 = _slicedToArray(_ref, 1),
-                  reviver = _ref2[0];
+                _ref2 = _slicedToArray(_ref, 1),
+                reviver = _ref2[0];
 
               if (!reviver) {
-                throw new Error('Unregistered type: ' + type);
+                throw new Error("Unregistered type: " + type);
               } // Only `sync` expected here, as problematic async would
               //  be missing both `reviver` and `reviverAsync`, and
               //  encapsulation shouldn't have added types, so
               //  should have made an early exit
 
 
-              if (sync && !('revive' in reviver)) {
+              if (sync && !("revive" in reviver)) {
                 // Just return value as is
                 return val;
               }
 
-              return reviver[sync && reviver.revive ? 'revive' : !sync && reviver.reviveAsync ? 'reviveAsync' : 'revive'](val, stateObj);
+              return reviver[sync && reviver.revive ? "revive" : !sync && reviver.reviveAsync ? "reviveAsync" : "revive"](val, stateObj);
             }
+
             /**
              *
              * @returns {void|TypesonPromise<void>}
@@ -5943,12 +5996,12 @@
               // const references = [];
               // const reviveTypes = [];
               var plainObjectTypes = [];
-              Object.entries(types).forEach(function (_ref3) {
+              Object.entries(types).forEach(function(_ref3) {
                 var _ref4 = _slicedToArray(_ref3, 2),
-                    keypath = _ref4[0],
-                    type = _ref4[1];
+                  keypath = _ref4[0],
+                  type = _ref4[1];
 
-                if (type === '#') {
+                if (type === "#") {
                   /*
                   references.push({
                       keypath,
@@ -5958,10 +6011,10 @@
                   return;
                 }
 
-                [].concat(type).forEach(function (type) {
+                [].concat(type).forEach(function(type) {
                   var _ref5 = that.revivers[type] || [null, {}],
-                      _ref6 = _slicedToArray(_ref5, 2),
-                      plain = _ref6[1].plain;
+                    _ref6 = _slicedToArray(_ref5, 2),
+                    plain = _ref6[1].plain;
 
                   if (!plain) {
                     // reviveTypes.push({keypath, type});
@@ -5970,7 +6023,7 @@
 
                   plainObjectTypes.push({
                     keypath: keypath,
-                    type: type
+                    type: type,
                   });
                   delete types[keypath]; // Avoid repeating
                 });
@@ -5981,54 +6034,55 @@
               } // console.log(plainObjectTypes.sort(nestedPathsFirst));
 
               /**
-              * @typedef {PlainObject} PlainObjectType
-              * @property {string} keypath
-              * @property {string} type
-              */
+               * @typedef {PlainObject} PlainObjectType
+               * @property {string} keypath
+               * @property {string} type
+               */
 
 
               return plainObjectTypes.sort(nestedPathsFirst).reduce(function reducer(possibleTypesonPromise, _ref7) {
-                var keypath = _ref7.keypath,
+                  var keypath = _ref7.keypath,
                     type = _ref7.type;
 
-                if (isThenable(possibleTypesonPromise)) {
-                  return possibleTypesonPromise.then(function (val) {
-                    return reducer(val, {
-                      keypath: keypath,
-                      type: type
+                  if (isThenable(possibleTypesonPromise)) {
+                    return possibleTypesonPromise.then(function(val) {
+                      return reducer(val, {
+                        keypath: keypath,
+                        type: type,
+                      });
                     });
-                  });
-                } // console.log('obj', JSON.stringify(keypath), obj);
+                  } // console.log('obj', JSON.stringify(keypath), obj);
 
 
-                var val = getByKeyPath(obj, keypath);
-                val = executeReviver(type, val);
+                  var val = getByKeyPath(obj, keypath);
+                  val = executeReviver(type, val);
 
-                if (hasConstructorOf(val, TypesonPromise)) {
-                  return val.then(function (v) {
-                    var newVal = setAtKeyPath(obj, keypath, v);
+                  if (hasConstructorOf(val, TypesonPromise)) {
+                    return val.then(function(v) {
+                      var newVal = setAtKeyPath(obj, keypath, v);
 
-                    if (newVal === v) {
-                      obj = newVal;
-                    }
+                      if (newVal === v) {
+                        obj = newVal;
+                      }
 
-                    return undefined;
-                  });
-                }
+                      return undefined;
+                    });
+                  }
 
-                var newVal = setAtKeyPath(obj, keypath, val);
+                  var newVal = setAtKeyPath(obj, keypath, val);
 
-                if (newVal === val) {
-                  obj = newVal;
-                }
+                  if (newVal === val) {
+                    obj = newVal;
+                  }
 
-                return undefined;
-              }, undefined // This argument must be explicit
+                  return undefined;
+                }, undefined, // This argument must be explicit
               ); // references.forEach(({keypath, reference}) => {});
               // reviveTypes.sort(nestedPathsFirst).forEach(() => {});
             }
 
             var revivalPromises = [];
+
             /**
              *
              * @param {string} keypath
@@ -6040,7 +6094,7 @@
              */
 
             function _revive(keypath, value, target, clone, key) {
-              if (ignore$Types && keypath === '$types') {
+              if (ignore$Types && keypath === "$types") {
                 return undefined;
               }
 
@@ -6052,8 +6106,8 @@
                 var _clone = isArr ? new Array(value.length) : {}; // Iterate object or array
 
 
-                keys(value).forEach(function (k) {
-                  var val = _revive(keypath + (keypath ? '.' : '') + escapeKeyPathComponent(k), value[k], target || _clone, _clone, k);
+                keys(value).forEach(function(k) {
+                  var val = _revive(keypath + (keypath ? "." : "") + escapeKeyPathComponent(k), value[k], target || _clone, _clone, k);
 
                   var set = function set(v) {
                     if (hasConstructorOf(v, Undefined)) {
@@ -6066,7 +6120,7 @@
                   };
 
                   if (hasConstructorOf(val, TypesonPromise)) {
-                    revivalPromises.push(val.then(function (ret) {
+                    revivalPromises.push(val.then(function(ret) {
                       return set(ret);
                     }));
                   } else {
@@ -6077,10 +6131,10 @@
 
                 while (keyPathResolutions.length) {
                   var _keyPathResolutions$ = _slicedToArray(keyPathResolutions[0], 4),
-                      _target = _keyPathResolutions$[0],
-                      keyPath = _keyPathResolutions$[1],
-                      _clone2 = _keyPathResolutions$[2],
-                      k = _keyPathResolutions$[3];
+                    _target = _keyPathResolutions$[0],
+                    keyPath = _keyPathResolutions$[1],
+                    _clone2 = _keyPathResolutions$[2],
+                    k = _keyPathResolutions$[3];
 
                   var val = getByKeyPath(_target, keyPath); // Typeson.Undefined not expected here as not cyclic or
                   //   `undefined`
@@ -6099,7 +6153,7 @@
                 return value;
               }
 
-              if (type === '#') {
+              if (type === "#") {
                 var _ret = getByKeyPath(target, value.slice(1));
 
                 if (_ret === undefined) {
@@ -6113,7 +6167,7 @@
 
               return [].concat(type).reduce(function reducer(val, typ) {
                 if (hasConstructorOf(val, TypesonPromise)) {
-                  return val.then(function (v) {
+                  return val.then(function(v) {
                     // TypesonPromise here too
                     return reducer(v, typ);
                   });
@@ -6122,6 +6176,7 @@
                 return executeReviver(typ, val);
               }, value);
             }
+
             /**
              *
              * @param {any} retrn
@@ -6137,32 +6192,32 @@
             var ret;
 
             if (hasConstructorOf(possibleTypesonPromise, TypesonPromise)) {
-              ret = possibleTypesonPromise.then(function () {
+              ret = possibleTypesonPromise.then(function() {
                 return obj;
               });
             } else {
-              ret = _revive('', obj, null);
+              ret = _revive("", obj, null);
 
               if (revivalPromises.length) {
                 // Ensure children resolved
-                ret = TypesonPromise.resolve(ret).then(function (r) {
+                ret = TypesonPromise.resolve(ret).then(function(r) {
                   return TypesonPromise.all([// May be a TypesonPromise or not
-                  r].concat(revivalPromises));
-                }).then(function (_ref8) {
+                    r].concat(revivalPromises));
+                }).then(function(_ref8) {
                   var _ref9 = _slicedToArray(_ref8, 1),
-                      r = _ref9[0];
+                    r = _ref9[0];
 
                   return r;
                 });
               }
             }
 
-            return isThenable(ret) ? sync && opts.throwOnBadSyncType ? function () {
-              throw new TypeError('Sync method requested but async result obtained');
-            }() : hasConstructorOf(ret, TypesonPromise) ? ret.p.then(checkUndefined) : ret : !sync && opts.throwOnBadSyncType ? function () {
-              throw new TypeError('Async method requested but sync result obtained');
+            return isThenable(ret) ? sync && opts.throwOnBadSyncType ? function() {
+              throw new TypeError("Sync method requested but async result obtained");
+            }() : hasConstructorOf(ret, TypesonPromise) ? ret.p.then(checkUndefined) : ret : !sync && opts.throwOnBadSyncType ? function() {
+              throw new TypeError("Async method requested but sync result obtained");
             }() : sync ? checkUndefined(ret) : Promise.resolve(checkUndefined(ret));
-          }
+          },
           /**
            * Also sync but throws on non-sync result.
            * @param {any} obj
@@ -6174,29 +6229,29 @@
           key: "reviveSync",
           value: function reviveSync(obj, opts) {
             return this.revive(obj, _objectSpread2(_objectSpread2({
-              throwOnBadSyncType: true
+              throwOnBadSyncType: true,
             }, opts), {}, {
-              sync: true
+              sync: true,
             }));
-          }
+          },
           /**
-          * @param {any} obj
-          * @param {TypesonOptions} opts
-          * @returns {Promise<any>}
-          */
+           * @param {any} obj
+           * @param {TypesonOptions} opts
+           * @returns {Promise<any>}
+           */
 
         }, {
           key: "reviveAsync",
           value: function reviveAsync(obj, opts) {
             return this.revive(obj, _objectSpread2(_objectSpread2({
-              throwOnBadSyncType: true
+              throwOnBadSyncType: true,
             }, opts), {}, {
-              sync: false
+              sync: false,
             }));
-          }
+          },
           /**
-          * @typedef {Tester|Replacer|Reviver} Spec
-          */
+           * @typedef {Tester|Replacer|Reviver} Spec
+           */
 
           /**
            * Register types.
@@ -6217,21 +6272,21 @@
 
 
               if (isArray(typeSpec)) {
-                return typeSpec.map(function (typSpec) {
+                return typeSpec.map(function(typSpec) {
                   return R.call(_this, typSpec);
                 });
               }
 
-              typeSpec && keys(typeSpec).forEach(function (typeId) {
-                if (typeId === '#') {
-                  throw new TypeError('# cannot be used as a type name as it is reserved ' + 'for cyclic objects');
+              typeSpec && keys(typeSpec).forEach(function(typeId) {
+                if (typeId === "#") {
+                  throw new TypeError("# cannot be used as a type name as it is reserved " + "for cyclic objects");
                 } else if (Typeson.JSON_TYPES.includes(typeId)) {
-                  throw new TypeError('Plain JSON object types are reserved as type names');
+                  throw new TypeError("Plain JSON object types are reserved as type names");
                 }
 
                 var spec = typeSpec[typeId];
                 var replacers = spec && spec.testPlainObjects ? this.plainObjectReplacers : this.nonplainObjectReplacers;
-                var existingReplacer = replacers.filter(function (r) {
+                var existingReplacer = replacers.filter(function(r) {
                   return r.type === typeId;
                 });
 
@@ -6242,7 +6297,7 @@
                   delete this.types[typeId];
                 }
 
-                if (typeof spec === 'function') {
+                if (typeof spec === "function") {
                   // Support registering just a class without replacer/reviver
                   var Class = spec;
                   spec = {
@@ -6254,19 +6309,19 @@
                     },
                     revive: function revive(x) {
                       return Object.assign(Object.create(Class.prototype), x);
-                    }
+                    },
                   };
                 } else if (isArray(spec)) {
                   var _spec = spec,
-                      _spec2 = _slicedToArray(_spec, 3),
-                      test = _spec2[0],
-                      replace = _spec2[1],
-                      revive = _spec2[2];
+                    _spec2 = _slicedToArray(_spec, 3),
+                    test = _spec2[0],
+                    replace = _spec2[1],
+                    revive = _spec2[2];
 
                   spec = {
                     test: test,
                     replace: replace,
-                    revive: revive
+                    revive: revive,
                   };
                 }
 
@@ -6276,7 +6331,7 @@
 
                 var replacerObj = {
                   type: typeId,
-                  test: spec.test.bind(spec)
+                  test: spec.test.bind(spec),
                 };
 
                 if (spec.replace) {
@@ -6287,7 +6342,7 @@
                   replacerObj.replaceAsync = spec.replaceAsync.bind(spec);
                 }
 
-                var start = typeof opts.fallback === 'number' ? opts.fallback : opts.fallback ? 0 : Number.POSITIVE_INFINITY;
+                var start = typeof opts.fallback === "number" ? opts.fallback : opts.fallback ? 0 : Number.POSITIVE_INFINITY;
 
                 if (spec.testPlainObjects) {
                   this.plainObjectReplacers.splice(start, 0, replacerObj);
@@ -6308,7 +6363,7 @@
                   }
 
                   this.revivers[typeId] = [reviverObj, {
-                    plain: spec.testPlainObjects
+                    plain: spec.testPlainObjects,
                   }];
                 } // Record to be retrieved via public types property.
 
@@ -6317,7 +6372,7 @@
               }, this);
             }, this);
             return this;
-          }
+          },
         }]);
 
         return Typeson;
@@ -6335,7 +6390,7 @@
       }; // eslint-disable-line space-before-blocks
 
 
-      Undefined.__typeson__type__ = 'TypesonUndefined'; // The following provide classes meant to avoid clashes with other values
+      Undefined.__typeson__type__ = "TypesonUndefined"; // The following provide classes meant to avoid clashes with other values
       // To insist `undefined` should be added
 
       Typeson.Undefined = Undefined; // To support async encapsulation/stringification
@@ -6352,7 +6407,7 @@
       Typeson.unescapeKeyPathComponent = unescapeKeyPathComponent;
       Typeson.getByKeyPath = getByKeyPath;
       Typeson.getJSONType = getJSONType;
-      Typeson.JSON_TYPES = ['null', 'boolean', 'number', 'string', 'array', 'object'];
+      Typeson.JSON_TYPES = ["null", "boolean", "number", "string", "array", "object"];
       return Typeson;
     });
   })(typeson$1);
@@ -6366,7 +6421,7 @@
    * Copyright (c) 2017 Brett Zamir, 2012 Niklas von Hertzen
    * Licensed under the MIT license.
    */
-  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // Use a lookup table to find the index.
+  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // Use a lookup table to find the index.
 
   var lookup = new Uint8Array(256);
 
@@ -6387,9 +6442,9 @@
     }
 
     var bytes = new Uint8Array(arraybuffer, byteOffset || 0, // Default needed for Safari
-    lngth);
+      lngth);
     var len = bytes.length;
-    var base64 = '';
+    var base64 = "";
 
     for (var _i = 0; _i < len; _i += 3) {
       base64 += chars[bytes[_i] >> 2];
@@ -6399,9 +6454,9 @@
     }
 
     if (len % 3 === 2) {
-      base64 = base64.slice(0, -1) + '=';
+      base64 = base64.slice(0, -1) + "=";
     } else if (len % 3 === 1) {
-      base64 = base64.slice(0, -2) + '==';
+      base64 = base64.slice(0, -2) + "==";
     }
 
     return base64;
@@ -6418,16 +6473,16 @@
     var p = 0;
     var encoded1, encoded2, encoded3, encoded4;
 
-    if (base64[base64.length - 1] === '=') {
+    if (base64[base64.length - 1] === "=") {
       bufferLength--;
 
-      if (base64[base64.length - 2] === '=') {
+      if (base64[base64.length - 2] === "=") {
         bufferLength--;
       }
     }
 
     var arraybuffer = new ArrayBuffer(bufferLength),
-        bytes = new Uint8Array(arraybuffer);
+      bytes = new Uint8Array(arraybuffer);
 
     for (var _i2 = 0; _i2 < len; _i2 += 4) {
       encoded1 = lookup[base64.charCodeAt(_i2)];
@@ -6445,7 +6500,7 @@
   var arraybuffer = {
     arraybuffer: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'ArrayBuffer';
+        return Typeson.toStringTag(x) === "ArrayBuffer";
       },
       replace: function replace(b, stateObj) {
         if (!stateObj.buffers) {
@@ -6456,7 +6511,7 @@
 
         if (index > -1) {
           return {
-            index: index
+            index: index,
           };
         }
 
@@ -6468,22 +6523,22 @@
           stateObj.buffers = [];
         }
 
-        if (_typeof$1(b64) === 'object') {
+        if (_typeof$1(b64) === "object") {
           return stateObj.buffers[b64.index];
         }
 
         var buffer = decode$1(b64);
         stateObj.buffers.push(buffer);
         return buffer;
-      }
-    }
+      },
+    },
   };
-   // See also typed-arrays!
+  // See also typed-arrays!
 
   var bigintObject = {
     bigintObject: {
       test: function test(x) {
-        return _typeof$1(x) === 'object' && Typeson.hasConstructorOf(x, BigInt);
+        return _typeof$1(x) === "object" && Typeson.hasConstructorOf(x, BigInt);
       },
       replace: function replace(n) {
         return String(n);
@@ -6492,23 +6547,23 @@
         // Filed this to avoid error: https://github.com/eslint/eslint/issues/11810
         // eslint-disable-next-line no-new-object
         return new Object(BigInt(s));
-      }
-    }
+      },
+    },
   };
 
   /* globals BigInt */
   var bigint = {
     bigint: {
       test: function test(x) {
-        return typeof x === 'bigint';
+        return typeof x === "bigint";
       },
       replace: function replace(n) {
         return String(n);
       },
       revive: function revive(s) {
         return BigInt(s);
-      }
-    }
+      },
+    },
   };
 
   /**
@@ -6582,36 +6637,36 @@
   var blob = {
     blob: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'Blob';
+        return Typeson.toStringTag(x) === "Blob";
       },
       replace: function replace(b) {
         // Sync
         var req = new XMLHttpRequest();
-        req.overrideMimeType('text/plain; charset=x-user-defined');
-        req.open('GET', URL.createObjectURL(b), false); // Sync
+        req.overrideMimeType("text/plain; charset=x-user-defined");
+        req.open("GET", URL.createObjectURL(b), false); // Sync
 
         req.send(); // Seems not feasible to accurately simulate
 
         /* istanbul ignore next */
 
         if (req.status !== 200 && req.status !== 0) {
-          throw new Error('Bad Blob access: ' + req.status);
+          throw new Error("Bad Blob access: " + req.status);
         }
 
         return {
           type: b.type,
-          stringContents: req.responseText
+          stringContents: req.responseText,
         };
       },
       revive: function revive(_ref) {
         var type = _ref.type,
-            stringContents = _ref.stringContents;
+          stringContents = _ref.stringContents;
         return new Blob([string2arraybuffer(stringContents)], {
-          type: type
+          type: type,
         });
       },
       replaceAsync: function replaceAsync(b) {
-        return new Typeson.Promise(function (resolve, reject) {
+        return new Typeson.Promise(function(resolve, reject) {
           /*
           if (b.isClosed) { // On MDN, but not in https://w3c.github.io/FileAPI/#dfn-Blob
               reject(new Error('The Blob is closed'));
@@ -6619,25 +6674,26 @@
           }
           */
           var reader = new FileReader();
-          reader.addEventListener('load', function () {
+          reader.addEventListener("load", function() {
             resolve({
               type: b.type,
-              stringContents: reader.result
+              stringContents: reader.result,
             });
           }); // Seems not feasible to accurately simulate
 
           /* istanbul ignore next */
 
-          reader.addEventListener('error', function () {
+          reader.addEventListener("error", function() {
             reject(reader.error);
           });
           reader.readAsBinaryString(b);
         });
-      }
-    }
+      },
+    },
   };
 
   /* globals performance */
+
   // The `performance` global is optional
 
   /**
@@ -6652,13 +6708,13 @@
 
     /* istanbul ignore next */
     var d = Date.now() + ( // use high-precision timer if available
-    // istanbul ignore next
-    typeof performance !== 'undefined' && typeof performance.now === 'function' ? performance.now() : 0);
-    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
+      // istanbul ignore next
+      typeof performance !== "undefined" && typeof performance.now === "function" ? performance.now() : 0);
+    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
       /* eslint-disable no-bitwise */
       var r = Math.trunc((d + Math.random() * 16) % 16);
       d = Math.floor(d / 16);
-      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
+      return (c === "x" ? r : r & 0x3 | 0x8).toString(16);
       /* eslint-enable no-bitwise */
     });
   }
@@ -6667,71 +6723,71 @@
   var cloneable = {
     cloneable: {
       test: function test(x) {
-        return x && _typeof$1(x) === 'object' && typeof x[Symbol["for"]('cloneEncapsulate')] === 'function';
+        return x && _typeof$1(x) === "object" && typeof x[Symbol["for"]("cloneEncapsulate")] === "function";
       },
       replace: function replace(clonable) {
-        var encapsulated = clonable[Symbol["for"]('cloneEncapsulate')]();
+        var encapsulated = clonable[Symbol["for"]("cloneEncapsulate")]();
         var uuid = generateUUID();
         cloneableObjectsByUUID[uuid] = clonable;
         return {
           uuid: uuid,
-          encapsulated: encapsulated
+          encapsulated: encapsulated,
         };
       },
       revive: function revive(_ref) {
         var uuid = _ref.uuid,
-            encapsulated = _ref.encapsulated;
-        return cloneableObjectsByUUID[uuid][Symbol["for"]('cloneRevive')](encapsulated);
-      }
-    }
+          encapsulated = _ref.encapsulated;
+        return cloneableObjectsByUUID[uuid][Symbol["for"]("cloneRevive")](encapsulated);
+      },
+    },
   };
 
   /* globals crypto */
   var cryptokey = {
     cryptokey: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'CryptoKey' && x.extractable;
+        return Typeson.toStringTag(x) === "CryptoKey" && x.extractable;
       },
       replaceAsync: function replaceAsync(key) {
-        return new Typeson.Promise(function (resolve, reject) {
+        return new Typeson.Promise(function(resolve, reject) {
           // eslint-disable-next-line promise/catch-or-return
-          crypto.subtle.exportKey('jwk', key)["catch"](
-          /* eslint-disable promise/prefer-await-to-callbacks */
-          // istanbul ignore next
-          function (err) {
-            /* eslint-enable promise/prefer-await-to-callbacks */
-            // eslint-disable-next-line max-len
-            // istanbul ignore next -- Our format should be valid and our key extractable
-            reject(err);
-          } // eslint-disable-next-line max-len
-          // eslint-disable-next-line promise/always-return, promise/prefer-await-to-then
-          ).then(function (jwk) {
+          crypto.subtle.exportKey("jwk", key)["catch"](
+            /* eslint-disable promise/prefer-await-to-callbacks */
+            // istanbul ignore next
+            function(err) {
+              /* eslint-enable promise/prefer-await-to-callbacks */
+              // eslint-disable-next-line max-len
+              // istanbul ignore next -- Our format should be valid and our key extractable
+              reject(err);
+            }, // eslint-disable-next-line max-len
+            // eslint-disable-next-line promise/always-return, promise/prefer-await-to-then
+          ).then(function(jwk) {
             resolve({
               jwk: jwk,
               algorithm: key.algorithm,
-              usages: key.usages
+              usages: key.usages,
             });
           });
         });
       },
       revive: function revive(_ref) {
         var jwk = _ref.jwk,
-            algorithm = _ref.algorithm,
-            usages = _ref.usages;
-        return crypto.subtle.importKey('jwk', jwk, algorithm, true, usages);
-      }
-    }
+          algorithm = _ref.algorithm,
+          usages = _ref.usages;
+        return crypto.subtle.importKey("jwk", jwk, algorithm, true, usages);
+      },
+    },
   };
 
   var dataview = {
     dataview: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'DataView';
+        return Typeson.toStringTag(x) === "DataView";
       },
       replace: function replace(_ref, stateObj) {
         var buffer = _ref.buffer,
-            byteOffset = _ref.byteOffset,
-            byteLength = _ref.byteLength;
+          byteOffset = _ref.byteOffset,
+          byteLength = _ref.byteLength;
 
         if (!stateObj.buffers) {
           stateObj.buffers = [];
@@ -6743,7 +6799,7 @@
           return {
             index: index,
             byteOffset: byteOffset,
-            byteLength: byteLength
+            byteLength: byteLength,
           };
         }
 
@@ -6751,7 +6807,7 @@
         return {
           encoded: encode$1(buffer),
           byteOffset: byteOffset,
-          byteLength: byteLength
+          byteLength: byteLength,
         };
       },
       revive: function revive(b64Obj, stateObj) {
@@ -6760,12 +6816,12 @@
         }
 
         var byteOffset = b64Obj.byteOffset,
-            byteLength = b64Obj.byteLength,
-            encoded = b64Obj.encoded,
-            index = b64Obj.index;
+          byteLength = b64Obj.byteLength,
+          encoded = b64Obj.encoded,
+          index = b64Obj.index;
         var buffer;
 
-        if ('index' in b64Obj) {
+        if ("index" in b64Obj) {
           buffer = stateObj.buffers[index];
         } else {
           buffer = decode$1(encoded);
@@ -6773,65 +6829,65 @@
         }
 
         return new DataView(buffer, byteOffset, byteLength);
-      }
-    }
+      },
+    },
   };
 
   var date = {
     date: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'Date';
+        return Typeson.toStringTag(x) === "Date";
       },
       replace: function replace(dt) {
         var time = dt.getTime();
 
         if (Number.isNaN(time)) {
-          return 'NaN';
+          return "NaN";
         }
 
         return time;
       },
       revive: function revive(time) {
-        if (time === 'NaN') {
+        if (time === "NaN") {
           return new Date(Number.NaN);
         }
 
         return new Date(time);
-      }
-    }
+      },
+    },
   };
 
   var error = {
     error: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'Error';
+        return Typeson.toStringTag(x) === "Error";
       },
       replace: function replace(_ref) {
         var name = _ref.name,
-            message = _ref.message;
+          message = _ref.message;
         return {
           name: name,
-          message: message
+          message: message,
         };
       },
       revive: function revive(_ref2) {
         var name = _ref2.name,
-            message = _ref2.message;
+          message = _ref2.message;
         var e = new Error(message);
         e.name = name;
         return e;
-      }
-    }
+      },
+    },
   }; // See also errors.js that may be registered after having registered this type.
 
   /* istanbul ignore next */
 
-  var _global$2 = typeof self === 'undefined' ? global$1 : self;
+  var _global$2 = typeof self === "undefined" ? global$1 : self;
 
   var errors = {}; // Comprises all built-in errors.
 
-  ['TypeError', 'RangeError', 'SyntaxError', 'ReferenceError', 'EvalError', 'URIError', 'InternalError' // non-standard
-  ].forEach(function (errName) {
+  ["TypeError", "RangeError", "SyntaxError", "ReferenceError", "EvalError", "URIError", "InternalError", // non-standard
+  ].forEach(function(errName) {
     var Cnstrctr = _global$2[errName];
 
     if (Cnstrctr) {
@@ -6844,7 +6900,7 @@
         },
         revive: function revive(message) {
           return new Cnstrctr(message);
-        }
+        },
       };
     }
   });
@@ -6853,41 +6909,41 @@
   var file = {
     file: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'File';
+        return Typeson.toStringTag(x) === "File";
       },
       replace: function replace(f) {
         // Sync
         var req = new XMLHttpRequest();
-        req.overrideMimeType('text/plain; charset=x-user-defined');
-        req.open('GET', URL.createObjectURL(f), false); // Sync
+        req.overrideMimeType("text/plain; charset=x-user-defined");
+        req.open("GET", URL.createObjectURL(f), false); // Sync
 
         req.send(); // Seems not feasible to accurately simulate
 
         /* istanbul ignore next */
 
         if (req.status !== 200 && req.status !== 0) {
-          throw new Error('Bad File access: ' + req.status);
+          throw new Error("Bad File access: " + req.status);
         }
 
         return {
           type: f.type,
           stringContents: req.responseText,
           name: f.name,
-          lastModified: f.lastModified
+          lastModified: f.lastModified,
         };
       },
       revive: function revive(_ref) {
         var name = _ref.name,
-            type = _ref.type,
-            stringContents = _ref.stringContents,
-            lastModified = _ref.lastModified;
+          type = _ref.type,
+          stringContents = _ref.stringContents,
+          lastModified = _ref.lastModified;
         return new File([string2arraybuffer(stringContents)], name, {
           type: type,
-          lastModified: lastModified
+          lastModified: lastModified,
         });
       },
       replaceAsync: function replaceAsync(f) {
-        return new Typeson.Promise(function (resolve, reject) {
+        return new Typeson.Promise(function(resolve, reject) {
           /*
           if (f.isClosed) { // On MDN, but not in https://w3c.github.io/FileAPI/#dfn-Blob
               reject(new Error('The File is closed'));
@@ -6895,31 +6951,31 @@
           }
           */
           var reader = new FileReader();
-          reader.addEventListener('load', function () {
+          reader.addEventListener("load", function() {
             resolve({
               type: f.type,
               stringContents: reader.result,
               name: f.name,
-              lastModified: f.lastModified
+              lastModified: f.lastModified,
             });
           }); // Seems not feasible to accurately simulate
 
           /* istanbul ignore next */
 
-          reader.addEventListener('error', function () {
+          reader.addEventListener("error", function() {
             reject(reader.error);
           });
           reader.readAsBinaryString(f);
         });
-      }
-    }
+      },
+    },
   };
 
   var filelist = {
     file: file.file,
     filelist: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'FileList';
+        return Typeson.toStringTag(x) === "FileList";
       },
       replace: function replace(fl) {
         var arr = [];
@@ -6934,7 +6990,7 @@
         /**
          * `FileList` polyfill.
          */
-        var FileList = /*#__PURE__*/function (_Symbol$toStringTag) {
+        var FileList = /*#__PURE__*/function(_Symbol$toStringTag) {
           /**
            * Set private properties and length.
            */
@@ -6945,6 +7001,7 @@
             this._files = arguments[0];
             this.length = this._files.length;
           }
+
           /**
            * @param {Integer} index
            * @returns {File}
@@ -6955,7 +7012,7 @@
             key: "item",
             value: function item(index) {
               return this._files[index];
-            }
+            },
             /* eslint-disable class-methods-use-this */
 
             /**
@@ -6966,29 +7023,29 @@
             key: _Symbol$toStringTag,
             get: function get() {
               /* eslint-enable class-methods-use-this */
-              return 'FileList';
-            }
+              return "FileList";
+            },
           }]);
 
           return FileList;
         }(Symbol.toStringTag);
 
         return new FileList(o);
-      }
-    }
+      },
+    },
   };
 
   /* globals createImageBitmap */
   var imagebitmap = {
     imagebitmap: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'ImageBitmap' || // In Node, our polyfill sets the dataset on a canvas
-        //  element as JSDom no longer allows overriding toStringTag
-        x && x.dataset && x.dataset.toStringTag === 'ImageBitmap';
+        return Typeson.toStringTag(x) === "ImageBitmap" || // In Node, our polyfill sets the dataset on a canvas
+          //  element as JSDom no longer allows overriding toStringTag
+          x && x.dataset && x.dataset.toStringTag === "ImageBitmap";
       },
       replace: function replace(bm) {
-        var canvas = document.createElement('canvas');
-        var ctx = canvas.getContext('2d');
+        var canvas = document.createElement("canvas");
+        var ctx = canvas.getContext("2d");
         ctx.drawImage(bm, 0, 0); // Although `width` and `height` are part of `ImageBitMap`,
         //   these will be auto-created for us when reviving with the
         //   data URL (and they are not settable even if they weren't)
@@ -7008,11 +7065,11 @@
         req.send();
         return req.responseText;
         */
-        var canvas = document.createElement('canvas');
-        var ctx = canvas.getContext('2d');
-        var img = document.createElement('img'); // The onload is needed by some browsers per http://stackoverflow.com/a/4776378/271577
+        var canvas = document.createElement("canvas");
+        var ctx = canvas.getContext("2d");
+        var img = document.createElement("img"); // The onload is needed by some browsers per http://stackoverflow.com/a/4776378/271577
 
-        img.addEventListener('load', function () {
+        img.addEventListener("load", function() {
           ctx.drawImage(img, 0, 0);
         });
         img.src = o; // Works in contexts allowing an `ImageBitmap` (We might use
@@ -7021,37 +7078,37 @@
         return canvas;
       },
       reviveAsync: function reviveAsync(o) {
-        var canvas = document.createElement('canvas');
-        var ctx = canvas.getContext('2d');
-        var img = document.createElement('img'); // The onload is needed by some browsers per http://stackoverflow.com/a/4776378/271577
+        var canvas = document.createElement("canvas");
+        var ctx = canvas.getContext("2d");
+        var img = document.createElement("img"); // The onload is needed by some browsers per http://stackoverflow.com/a/4776378/271577
 
-        img.addEventListener('load', function () {
+        img.addEventListener("load", function() {
           ctx.drawImage(img, 0, 0);
         });
         img.src = o; // o.dataURL;
 
         return createImageBitmap(canvas); // Returns a promise
-      }
-    }
+      },
+    },
   };
 
   var imagedata = {
     imagedata: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'ImageData';
+        return Typeson.toStringTag(x) === "ImageData";
       },
       replace: function replace(d) {
         return {
           // Ensure `length` gets preserved for revival
           array: _toConsumableArray(d.data),
           width: d.width,
-          height: d.height
+          height: d.height,
         };
       },
       revive: function revive(o) {
         return new ImageData(new Uint8ClampedArray(o.array), o.width, o.height);
-      }
-    }
+      },
+    },
   };
 
   var infinity = {
@@ -7060,12 +7117,12 @@
         return x === Number.POSITIVE_INFINITY;
       },
       replace: function replace(n) {
-        return 'Infinity';
+        return "Infinity";
       },
       revive: function revive(s) {
         return Number.POSITIVE_INFINITY;
-      }
-    }
+      },
+    },
   };
 
   var IntlCollator = {
@@ -7077,7 +7134,7 @@
     },
     revive: function revive(options) {
       return new Intl.Collator(options.locale, options);
-    }
+    },
   };
   var IntlDateTimeFormat = {
     test: function test(x) {
@@ -7088,7 +7145,7 @@
     },
     revive: function revive(options) {
       return new Intl.DateTimeFormat(options.locale, options);
-    }
+    },
   };
   var IntlNumberFormat = {
     test: function test(x) {
@@ -7099,26 +7156,26 @@
     },
     revive: function revive(options) {
       return new Intl.NumberFormat(options.locale, options);
-    }
+    },
   };
   var intlTypes = {
     IntlCollator: IntlCollator,
     IntlDateTimeFormat: IntlDateTimeFormat,
-    IntlNumberFormat: IntlNumberFormat
+    IntlNumberFormat: IntlNumberFormat,
   };
 
   var map = {
     map: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'Map';
+        return Typeson.toStringTag(x) === "Map";
       },
       replace: function replace(mp) {
         return _toConsumableArray(mp.entries());
       },
       revive: function revive(entries) {
         return new Map(entries);
-      }
-    }
+      },
+    },
   };
 
   var nan = {
@@ -7127,12 +7184,12 @@
         return Number.isNaN(x);
       },
       replace: function replace(n) {
-        return 'NaN';
+        return "NaN";
       },
       revive: function revive(s) {
         return Number.NaN;
-      }
-    }
+      },
+    },
   };
 
   var negativeInfinity = {
@@ -7141,32 +7198,32 @@
         return x === Number.NEGATIVE_INFINITY;
       },
       replace: function replace(n) {
-        return '-Infinity';
+        return "-Infinity";
       },
       revive: function revive(s) {
         return Number.NEGATIVE_INFINITY;
-      }
-    }
+      },
+    },
   };
 
   var nonbuiltinIgnore = {
     nonbuiltinIgnore: {
       test: function test(x) {
-        return x && _typeof$1(x) === 'object' && !Array.isArray(x) && !['Object', // `Proxy` and `Reflect`, two other built-in objects, will also
-        //   have a `toStringTag` of `Object`; we don't want built-in
-        //   function objects, however
-        'Boolean', 'Number', 'String', 'Error', 'RegExp', 'Math', 'Date', 'Map', 'Set', 'JSON', 'ArrayBuffer', 'SharedArrayBuffer', 'DataView', 'Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'Promise', 'String Iterator', 'Array Iterator', 'Map Iterator', 'Set Iterator', 'WeakMap', 'WeakSet', 'Atomics', 'Module'].includes(Typeson.toStringTag(x));
+        return x && _typeof$1(x) === "object" && !Array.isArray(x) && !["Object", // `Proxy` and `Reflect`, two other built-in objects, will also
+          //   have a `toStringTag` of `Object`; we don't want built-in
+          //   function objects, however
+          "Boolean", "Number", "String", "Error", "RegExp", "Math", "Date", "Map", "Set", "JSON", "ArrayBuffer", "SharedArrayBuffer", "DataView", "Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array", "Promise", "String Iterator", "Array Iterator", "Map Iterator", "Set Iterator", "WeakMap", "WeakSet", "Atomics", "Module"].includes(Typeson.toStringTag(x));
       },
       replace: function replace(rexp) {// Not in use
-      }
-    }
+      },
+    },
   };
 
   var primitiveObjects = {
     // String Object (not primitive string which need no type spec)
     StringObject: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'String' && _typeof$1(x) === 'object';
+        return Typeson.toStringTag(x) === "String" && _typeof$1(x) === "object";
       },
       replace: function replace(s) {
         return String(s);
@@ -7174,13 +7231,13 @@
       // convert to primitive string
       revive: function revive(s) {
         return new String(s);
-      } // Revive to an objectified string
+      }, // Revive to an objectified string
 
     },
     // Boolean Object (not primitive boolean which need no type spec)
     BooleanObject: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'Boolean' && _typeof$1(x) === 'object';
+        return Typeson.toStringTag(x) === "Boolean" && _typeof$1(x) === "object";
       },
       replace: function replace(b) {
         return Boolean(b);
@@ -7189,12 +7246,12 @@
       revive: function revive(b) {
         // Revive to an objectified Boolean
         return new Boolean(b);
-      }
+      },
     },
     // Number Object (not primitive number which need no type spec)
     NumberObject: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'Number' && _typeof$1(x) === 'object';
+        return Typeson.toStringTag(x) === "Number" && _typeof$1(x) === "object";
       },
       replace: function replace(n) {
         return Number(n);
@@ -7202,35 +7259,35 @@
       // convert to primitive number
       revive: function revive(n) {
         return new Number(n);
-      } // Revive to an objectified number
+      }, // Revive to an objectified number
 
-    }
+    },
   };
 
   var regexp = {
     regexp: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'RegExp';
+        return Typeson.toStringTag(x) === "RegExp";
       },
       replace: function replace(rexp) {
         return {
           source: rexp.source,
-          flags: (rexp.global ? 'g' : '') + (rexp.ignoreCase ? 'i' : '') + (rexp.multiline ? 'm' : '') + (rexp.sticky ? 'y' : '') + (rexp.unicode ? 'u' : '')
+          flags: (rexp.global ? "g" : "") + (rexp.ignoreCase ? "i" : "") + (rexp.multiline ? "m" : "") + (rexp.sticky ? "y" : "") + (rexp.unicode ? "u" : ""),
         };
       },
       revive: function revive(_ref) {
         var source = _ref.source,
-            flags = _ref.flags;
+          flags = _ref.flags;
         return new RegExp(source, flags);
-      }
-    }
+      },
+    },
   };
 
   var resurrectableObjectsByUUID = {};
   var resurrectable = {
     resurrectable: {
       test: function test(x) {
-        return x && !Array.isArray(x) && ['object', 'function', 'symbol'].includes(_typeof$1(x));
+        return x && !Array.isArray(x) && ["object", "function", "symbol"].includes(_typeof$1(x));
       },
       replace: function replace(rsrrctble) {
         var uuid = generateUUID();
@@ -7239,31 +7296,31 @@
       },
       revive: function revive(serializedResurrectable) {
         return resurrectableObjectsByUUID[serializedResurrectable];
-      }
-    }
+      },
+    },
   };
 
   var set = {
     set: {
       test: function test(x) {
-        return Typeson.toStringTag(x) === 'Set';
+        return Typeson.toStringTag(x) === "Set";
       },
       replace: function replace(st) {
         return _toConsumableArray(st.values());
       },
       revive: function revive(values) {
         return new Set(values);
-      }
-    }
+      },
+    },
   };
 
   /* istanbul ignore next */
 
-  var _global$1 = typeof self === 'undefined' ? global$1 : self; // Support all kinds of typed arrays (views of ArrayBuffers)
+  var _global$1 = typeof self === "undefined" ? global$1 : self; // Support all kinds of typed arrays (views of ArrayBuffers)
 
 
   var typedArraysSocketIO = {};
-  ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array'].forEach(function (typeName) {
+  ["Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array"].forEach(function(typeName) {
     var arrType = typeName;
     var TypedArray = _global$1[typeName];
     /* istanbul ignore if */
@@ -7278,10 +7335,10 @@
       },
       replace: function replace(a) {
         return (a.byteOffset === 0 && a.byteLength === a.buffer.byteLength ? a // socket.io supports streaming ArrayBuffers.
-        // If we have a typed array representing a portion
-        //   of the buffer, we need to clone
-        //   the buffer before leaving it to socket.io.
-        : a.slice(0)).buffer;
+          // If we have a typed array representing a portion
+          //   of the buffer, we need to clone
+          //   the buffer before leaving it to socket.io.
+          : a.slice(0)).buffer;
       },
       revive: function revive(buf) {
         // One may configure socket.io to revive binary data as
@@ -7290,17 +7347,17 @@
         //   get here is an ArrayBuffer
         // If not, let's assume user wants to receive it as
         //   configured with socket.io.
-        return Typeson.toStringTag(buf) === 'ArrayBuffer' ? new TypedArray(buf) : buf;
-      }
+        return Typeson.toStringTag(buf) === "ArrayBuffer" ? new TypedArray(buf) : buf;
+      },
     };
   });
 
   /* istanbul ignore next */
 
-  var _global = typeof self === 'undefined' ? global$1 : self;
+  var _global = typeof self === "undefined" ? global$1 : self;
 
   var typedArrays = {};
-  ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array'].forEach(function (typeName) {
+  ["Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array"].forEach(function(typeName) {
     var arrType = typeName;
     var TypedArray = _global[arrType];
     /* istanbul ignore if */
@@ -7315,8 +7372,8 @@
       },
       replace: function replace(_ref, stateObj) {
         var buffer = _ref.buffer,
-            byteOffset = _ref.byteOffset,
-            l = _ref.length;
+          byteOffset = _ref.byteOffset,
+          l = _ref.length;
 
         if (!stateObj.buffers) {
           stateObj.buffers = [];
@@ -7328,7 +7385,7 @@
           return {
             index: index,
             byteOffset: byteOffset,
-            length: l
+            length: l,
           };
         }
 
@@ -7336,7 +7393,7 @@
         return {
           encoded: encode$1(buffer),
           byteOffset: byteOffset,
-          length: l
+          length: l,
         };
       },
       revive: function revive(b64Obj, stateObj) {
@@ -7345,12 +7402,12 @@
         }
 
         var byteOffset = b64Obj.byteOffset,
-            len = b64Obj.length,
-            encoded = b64Obj.encoded,
-            index = b64Obj.index;
+          len = b64Obj.length,
+          encoded = b64Obj.encoded,
+          index = b64Obj.index;
         var buffer;
 
-        if ('index' in b64Obj) {
+        if ("index" in b64Obj) {
           buffer = stateObj.buffers[index];
         } else {
           buffer = decode$1(encoded);
@@ -7358,7 +7415,7 @@
         }
 
         return new TypedArray(buffer, byteOffset, len);
-      }
+      },
     };
   });
 
@@ -7366,7 +7423,7 @@
   var undef$1 = {
     undef: {
       test: function test(x, stateObj) {
-        return typeof x === 'undefined' && (stateObj.ownKeys || !('ownKeys' in stateObj));
+        return typeof x === "undefined" && (stateObj.ownKeys || !("ownKeys" in stateObj));
       },
       replace: function replace(n) {
         return 0;
@@ -7375,8 +7432,8 @@
         // Will add `undefined` (returning `undefined` would instead
         //   avoid explicitly setting)
         return new Typeson.Undefined();
-      }
-    }
+      },
+    },
   };
 
   var userObject = {
@@ -7389,8 +7446,8 @@
       },
       revive: function revive(s) {
         return s;
-      }
-    }
+      },
+    },
   };
 
   var arrayNonindexKeys = [{
@@ -7399,20 +7456,20 @@
       test: function test(x, stateObj) {
         if (Array.isArray(x)) {
           if ( // By avoiding serializing arrays into objects which
-          //  have only positive-integer keys, we reduce
-          //  size and improve revival performance; arrays with
-          //  non-index keys will be larger however
-          Object.keys(x).some(function (k) {
-            //  No need to check for `isNaN` or
-            //   `isNaN(Number.parseInt())` as `NaN` will be
-            //   treated as a string.
-            //  No need to do check as
-            //   `Number.parseInt(Number())` since scientific
-            //   notation will be pre-resolved if a number
-            //   was given, and it will otherwise be a string
-            return String(Number.parseInt(k)) !== k;
-          })) {
-            stateObj.iterateIn = 'object';
+            //  have only positive-integer keys, we reduce
+            //  size and improve revival performance; arrays with
+            //  non-index keys will be larger however
+            Object.keys(x).some(function(k) {
+              //  No need to check for `isNaN` or
+              //   `isNaN(Number.parseInt())` as `NaN` will be
+              //   treated as a string.
+              //  No need to do check as
+              //   `Number.parseInt(Number())` since scientific
+              //   notation will be pre-resolved if a number
+              //   was given, and it will otherwise be a string
+              return String(Number.parseInt(k)) !== k;
+            })) {
+            stateObj.iterateIn = "object";
             stateObj.addLength = true;
           }
 
@@ -7436,26 +7493,26 @@
         // Todo: Reenable when Node `engines` >= 7
         // Object.entries(o).forEach(([key, val]) => {
 
-        Object.keys(o).forEach(function (key) {
+        Object.keys(o).forEach(function(key) {
           var val = o[key];
           arr[key] = val;
         });
         return arr;
-      }
-    }
+      },
+    },
   }, {
     sparseUndefined: {
       test: function test(x, stateObj) {
-        return typeof x === 'undefined' && stateObj.ownKeys === false;
+        return typeof x === "undefined" && stateObj.ownKeys === false;
       },
       replace: function replace(n) {
         return 0;
       },
       revive: function revive(s) {
         return undefined;
-      } // Will avoid adding anything
+      }, // Will avoid adding anything
 
-    }
+    },
   }];
 
   var specialNumbers = [nan, infinity, negativeInfinity];
@@ -7476,22 +7533,22 @@
     Symbols are similarly not included.
   */
   var expObj$1 = [undef$1, // ES5
-  arrayNonindexKeys, primitiveObjects, specialNumbers, date, error, errors, regexp].concat( // ES2015 (ES6)
+    arrayNonindexKeys, primitiveObjects, specialNumbers, date, error, errors, regexp].concat( // ES2015 (ES6)
 
-  /* istanbul ignore next */
-  typeof Map === 'function' ? map : [],
-  /* istanbul ignore next */
-  typeof Set === 'function' ? set : [],
-  /* istanbul ignore next */
-  typeof ArrayBuffer === 'function' ? arraybuffer : [],
-  /* istanbul ignore next */
-  typeof Uint8Array === 'function' ? typedArrays : [],
-  /* istanbul ignore next */
-  typeof DataView === 'function' ? dataview : [],
-  /* istanbul ignore next */
-  typeof Intl !== 'undefined' ? intlTypes : [],
-  /* istanbul ignore next */
-  typeof BigInt !== 'undefined' ? [bigint, bigintObject] : []);
+    /* istanbul ignore next */
+    typeof Map === "function" ? map : [],
+    /* istanbul ignore next */
+    typeof Set === "function" ? set : [],
+    /* istanbul ignore next */
+    typeof ArrayBuffer === "function" ? arraybuffer : [],
+    /* istanbul ignore next */
+    typeof Uint8Array === "function" ? typedArrays : [],
+    /* istanbul ignore next */
+    typeof DataView === "function" ? dataview : [],
+    /* istanbul ignore next */
+    typeof Intl !== "undefined" ? intlTypes : [],
+    /* istanbul ignore next */
+    typeof BigInt !== "undefined" ? [bigint, bigintObject] : []);
 
   /*
   When communicating via `postMessage()` (`Worker.postMessage()` or
@@ -7511,10 +7568,10 @@
   var postmessage = [error, errors];
 
   var socketio = [expObj$1, // Leave ArrayBuffer as is, and let socket.io stream it instead.
-  {
-    arraybuffer: null
-  }, // Encapsulate TypedArrays in ArrayBuffers instead of base64 strings.
-  typedArraysSocketIO];
+    {
+      arraybuffer: null,
+    }, // Encapsulate TypedArrays in ArrayBuffers instead of base64 strings.
+    typedArraysSocketIO];
 
   var sparseUndefined = [{
     sparseArrays: {
@@ -7525,48 +7582,48 @@
       replace: function replace(a, stateObj) {
         stateObj.iterateUnsetNumeric = true;
         return a;
-      }
-    }
+      },
+    },
   }, {
     sparseUndefined: {
       test: function test(x, stateObj) {
-        return typeof x === 'undefined' && stateObj.ownKeys === false;
+        return typeof x === "undefined" && stateObj.ownKeys === false;
       },
       replace: function replace(n) {
         return 0;
       },
       revive: function revive(s) {
         return undefined;
-      } // Will avoid adding anything
+      }, // Will avoid adding anything
 
-    }
+    },
   }];
 
   /* This preset includes types for the Structured Cloning Algorithm. */
   var expObj = [// Todo: Might also register synchronous `ImageBitmap` and
-  //    `Blob`/`File`/`FileList`?
-  // ES5
-  userObject, // Processed last (non-builtin)
-  undef$1, arrayNonindexKeys, primitiveObjects, specialNumbers, date, regexp, // Non-built-ins
-  imagedata, imagebitmap, // Async return
-  file, filelist, blob].concat( // ES2015 (ES6)
+    //    `Blob`/`File`/`FileList`?
+    // ES5
+    userObject, // Processed last (non-builtin)
+    undef$1, arrayNonindexKeys, primitiveObjects, specialNumbers, date, regexp, // Non-built-ins
+    imagedata, imagebitmap, // Async return
+    file, filelist, blob].concat( // ES2015 (ES6)
 
-  /* istanbul ignore next */
-  typeof Map === 'function' ? map : [],
-  /* istanbul ignore next */
-  typeof Set === 'function' ? set : [],
-  /* istanbul ignore next */
-  typeof ArrayBuffer === 'function' ? arraybuffer : [],
-  /* istanbul ignore next */
-  typeof Uint8Array === 'function' ? typedArrays : [],
-  /* istanbul ignore next */
-  typeof DataView === 'function' ? dataview : [],
-  /* istanbul ignore next */
-  typeof Intl !== 'undefined' ? intlTypes : [],
-  /* istanbul ignore next */
-  typeof crypto !== 'undefined' ? cryptokey : [],
-  /* istanbul ignore next */
-  typeof BigInt !== 'undefined' ? [bigint, bigintObject] : []);
+    /* istanbul ignore next */
+    typeof Map === "function" ? map : [],
+    /* istanbul ignore next */
+    typeof Set === "function" ? set : [],
+    /* istanbul ignore next */
+    typeof ArrayBuffer === "function" ? arraybuffer : [],
+    /* istanbul ignore next */
+    typeof Uint8Array === "function" ? typedArrays : [],
+    /* istanbul ignore next */
+    typeof DataView === "function" ? dataview : [],
+    /* istanbul ignore next */
+    typeof Intl !== "undefined" ? intlTypes : [],
+    /* istanbul ignore next */
+    typeof crypto !== "undefined" ? cryptokey : [],
+    /* istanbul ignore next */
+    typeof BigInt !== "undefined" ? [bigint, bigintObject] : []);
 
   var structuredCloningThrowing = expObj.concat({
     checkDataCloneException: {
@@ -7594,41 +7651,41 @@
         var stringTag = {}.toString.call(val).slice(8, -1);
 
         if ([// Symbol's `toStringTag` is only "Symbol" for its initial
-        //   value, so we check `typeof`
-        'symbol', // All functions including bound function exotic objects
-        'function'].includes(_typeof$1(val)) || [// A non-array exotic object
-        'Arguments', // A non-array exotic object
-        'Module', // `Error` and other errors have the [[ErrorData]] internal
-        //    slot and give "Error"
-        'Error', // Promise instances have an extra slot ([[PromiseState]])
-        //    but not throwing in Chrome `postMessage`
-        'Promise', // WeakMap instances have an extra slot ([[WeakMapData]])
-        //    but not throwing in Chrome `postMessage`
-        'WeakMap', // WeakSet instances have an extra slot ([[WeakSetData]])
-        //    but not throwing in Chrome `postMessage`
-        'WeakSet', // HTML-SPECIFIC
-        'Event', // Also in Node `worker_threads` (currently experimental)
-        'MessageChannel'].includes(stringTag) ||
-        /*
-        // isClosed is no longer documented
-        ((stringTag === 'Blob' || stringTag === 'File') &&
-            val.isClosed) ||
-        */
-        val && _typeof$1(val) === 'object' && // Duck-type DOM node objects (non-array exotic?
-        //    objects which cannot be cloned by the SCA)
-        typeof val.nodeType === 'number' && typeof val.insertBefore === 'function') {
-          throw new DOMException('The object cannot be cloned.', 'DataCloneError');
+            //   value, so we check `typeof`
+            "symbol", // All functions including bound function exotic objects
+            "function"].includes(_typeof$1(val)) || [// A non-array exotic object
+            "Arguments", // A non-array exotic object
+            "Module", // `Error` and other errors have the [[ErrorData]] internal
+            //    slot and give "Error"
+            "Error", // Promise instances have an extra slot ([[PromiseState]])
+            //    but not throwing in Chrome `postMessage`
+            "Promise", // WeakMap instances have an extra slot ([[WeakMapData]])
+            //    but not throwing in Chrome `postMessage`
+            "WeakMap", // WeakSet instances have an extra slot ([[WeakSetData]])
+            //    but not throwing in Chrome `postMessage`
+            "WeakSet", // HTML-SPECIFIC
+            "Event", // Also in Node `worker_threads` (currently experimental)
+            "MessageChannel"].includes(stringTag) ||
+          /*
+          // isClosed is no longer documented
+          ((stringTag === 'Blob' || stringTag === 'File') &&
+              val.isClosed) ||
+          */
+          val && _typeof$1(val) === "object" && // Duck-type DOM node objects (non-array exotic?
+          //    objects which cannot be cloned by the SCA)
+          typeof val.nodeType === "number" && typeof val.insertBefore === "function") {
+          throw new DOMException("The object cannot be cloned.", "DataCloneError");
         }
 
         return false;
-      }
-    }
+      },
+    },
   });
 
   var undef = [sparseUndefined, undef$1];
 
-  var universal = [expObj$1 // TODO: Add types that are de-facto universal even though not
-  //   built-in into ecmasript standard.
+  var universal = [expObj$1, // TODO: Add types that are de-facto universal even though not
+    //   built-in into ecmasript standard.
   ];
 
   // This file is auto-generated from `build.js`
@@ -7660,7 +7717,7 @@
     typedArraysSocketio: typedArraysSocketIO,
     typedArrays: typedArrays,
     undef: undef$1,
-    userObject: userObject
+    userObject: userObject,
   };
   Typeson.presets = {
     arrayNonindexKeys: arrayNonindexKeys,
@@ -7672,7 +7729,7 @@
     structuredCloningThrowing: structuredCloningThrowing,
     structuredCloning: expObj,
     undef: undef,
-    universal: universal
+    universal: universal,
   };
 
   var typeson = new Typeson().register(Typeson.presets.structuredCloningThrowing);
@@ -7693,11 +7750,11 @@
     } catch (err) {
       // SCA in typeson-registry using `DOMException` which is not defined (e.g., in Node)
       if (Typeson.hasConstructorOf(err, ReferenceError) || // SCA in typeson-registry threw a cloning error and we are in a
-      //   supporting environment (e.g., the browser) where `ShimDOMException` is
-      //   an alias for `DOMException`; if typeson-registry ever uses our shim
-      //   to throw, we can use this condition alone.
-      Typeson.hasConstructorOf(err, ShimDOMException)) {
-        throw createDOMException('DataCloneError', 'The object cannot be cloned.');
+        //   supporting environment (e.g., the browser) where `ShimDOMException` is
+        //   an alias for `DOMException`; if typeson-registry ever uses our shim
+        //   to throw, we can use this condition alone.
+        Typeson.hasConstructorOf(err, ShimDOMException)) {
+        throw createDOMException("DataCloneError", "The object cannot be cloned.");
       } // We should rethrow non-cloning exceptions like from
       //  throwing getters (as in the W3C test, key-conversion-exceptions.htm)
 
@@ -7724,10 +7781,11 @@
     encode: encode,
     decode: decode,
     clone: clone,
-    register: register
+    register: register,
   });
 
-  var readonlyProperties$2 = ['objectStore', 'keyPath', 'multiEntry', 'unique'];
+  var readonlyProperties$2 = ["objectStore", "keyPath", "multiEntry", "unique"];
+
   /* eslint-disable jsdoc/check-param-names */
 
   /**
@@ -7740,15 +7798,15 @@
 
   function IDBIndex() {
     /* eslint-enable jsdoc/check-param-names */
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
   var IDBIndexAlias = IDBIndex;
 
-  IDBIndex.__createInstance = function (store, indexProperties) {
+  IDBIndex.__createInstance = function(store, indexProperties) {
     function IDBIndex() {
       var me = this;
-      me[Symbol.toStringTag] = 'IDBIndex';
+      me[Symbol.toStringTag] = "IDBIndex";
       defineReadonlyProperties(me, readonlyProperties$2);
       me.__objectStore = store;
       me.__name = me.__originalName = indexProperties.columnName;
@@ -7758,12 +7816,12 @@
       me.__unique = Boolean(optionalParams && optionalParams.unique);
       me.__deleted = Boolean(indexProperties.__deleted);
       me.__objectStore.__cursors = indexProperties.cursors || [];
-      Object.defineProperty(me, '__currentName', {
+      Object.defineProperty(me, "__currentName", {
         get: function get() {
-          return '__pendingName' in me ? me.__pendingName : me.name;
-        }
+          return "__pendingName" in me ? me.__pendingName : me.name;
+        },
       });
-      Object.defineProperty(me, 'name', {
+      Object.defineProperty(me, "name", {
         enumerable: false,
         configurable: false,
         get: function get() {
@@ -7787,7 +7845,7 @@
           }
 
           if (me.objectStore.__indexes[newName] && !me.objectStore.__indexes[newName].__deleted && !me.objectStore.__indexes[newName].__pendingDelete) {
-            throw createDOMException('ConstraintError', 'Index "' + newName + '" already exists on ' + me.objectStore.__currentName);
+            throw createDOMException("ConstraintError", "Index \"" + newName + "\" already exists on " + me.objectStore.__currentName);
           }
 
           me.__name = newName;
@@ -7802,19 +7860,19 @@
           storeHandle.__indexHandles[newName] = oldIndexHandle; // Ensure new reference accessible
 
           me.__pendingName = oldName;
-          var colInfoToPreserveArr = [['key', 'BLOB ' + (objectStore.autoIncrement ? 'UNIQUE, inc INTEGER PRIMARY KEY AUTOINCREMENT' : 'PRIMARY KEY')], ['value', 'BLOB']].concat(_toConsumableArray(objectStore.indexNames).filter(function (indexName) {
+          var colInfoToPreserveArr = [["key", "BLOB " + (objectStore.autoIncrement ? "UNIQUE, inc INTEGER PRIMARY KEY AUTOINCREMENT" : "PRIMARY KEY")], ["value", "BLOB"]].concat(_toConsumableArray(objectStore.indexNames).filter(function(indexName) {
             return indexName !== newName;
-          }).map(function (indexName) {
-            return [escapeIndexNameForSQL(indexName), 'BLOB'];
+          }).map(function(indexName) {
+            return [escapeIndexNameForSQL(indexName), "BLOB"];
           }));
 
-          me.__renameIndex(objectStore, oldName, newName, colInfoToPreserveArr, function (tx, success) {
-            IDBIndexAlias.__updateIndexList(store, tx, function (store) {
+          me.__renameIndex(objectStore, oldName, newName, colInfoToPreserveArr, function(tx, success) {
+            IDBIndexAlias.__updateIndexList(store, tx, function(store) {
               delete storeHandle.__pendingName;
               success(store);
             });
           });
-        }
+        },
       });
     }
 
@@ -7822,9 +7880,9 @@
     return new IDBIndex();
   };
 
-  IDBIndex.__invalidStateIfDeleted = function (index, msg) {
+  IDBIndex.__invalidStateIfDeleted = function(index, msg) {
     if (index.__deleted || index.__pendingDelete || index.__pendingCreate && index.objectStore.transaction && index.objectStore.transaction.__errored) {
-      throw createDOMException('InvalidStateError', msg || 'This index has been deleted');
+      throw createDOMException("InvalidStateError", msg || "This index has been deleted");
     }
   };
   /**
@@ -7836,17 +7894,17 @@
    */
 
 
-  IDBIndex.__clone = function (index, store) {
+  IDBIndex.__clone = function(index, store) {
     var idx = IDBIndex.__createInstance(store, {
       columnName: index.name,
       keyPath: index.keyPath,
       optionalParams: {
         multiEntry: index.multiEntry,
-        unique: index.unique
-      }
+        unique: index.unique,
+      },
     });
 
-    ['__pendingCreate', '__pendingDelete', '__deleted', '__originalName', '__recreated'].forEach(function (p) {
+    ["__pendingCreate", "__pendingDelete", "__deleted", "__originalName", "__recreated"].forEach(function(p) {
       idx[p] = index[p];
     });
     return idx;
@@ -7860,7 +7918,7 @@
    */
 
 
-  IDBIndex.__createIndex = function (store, index) {
+  IDBIndex.__createIndex = function(store, index) {
     var indexName = index.name;
     var storeName = store.__currentName;
     var idx = store.__indexes[indexName];
@@ -7884,15 +7942,15 @@
       var indexValues = {};
 
       function error(tx, err) {
-        failure(createDOMException('UnknownError', 'Could not create index "' + indexName + '"' + err.code + '::' + err.message, err));
+        failure(createDOMException("UnknownError", "Could not create index \"" + indexName + "\"" + err.code + "::" + err.message, err));
       }
 
       function applyIndex(tx) {
         // Update the object store's index list
-        IDBIndex.__updateIndexList(store, tx, function () {
+        IDBIndex.__updateIndexList(store, tx, function() {
           // Add index entries for all existing records
-          tx.executeSql('SELECT "key", "value" FROM ' + escapeStoreNameForSQL(storeName), [], function (tx, data) {
-            CFG.DEBUG && console.log('Adding existing ' + storeName + ' records to the ' + indexName + ' index');
+          tx.executeSql("SELECT \"key\", \"value\" FROM " + escapeStoreNameForSQL(storeName), [], function(tx, data) {
+            CFG.DEBUG && console.log("Adding existing " + storeName + " records to the " + indexName + " index");
             addIndexEntry(0);
 
             function addIndexEntry(i) {
@@ -7903,7 +7961,7 @@
 
                   if (indexKey.invalid || indexKey.failure) {
                     // Todo: Do we need invalid checks and should we instead treat these as being duplicates?
-                    throw new Error('Go to catch; ignore bad indexKey');
+                    throw new Error("Go to catch; ignore bad indexKey");
                   }
 
                   indexKey = _encode(indexKey.value, index.multiEntry);
@@ -7911,14 +7969,14 @@
                   if (index.unique) {
                     if (indexValues[indexKey]) {
                       indexValues = {};
-                      failure(createDOMException('ConstraintError', 'Duplicate values already exist within the store'));
+                      failure(createDOMException("ConstraintError", "Duplicate values already exist within the store"));
                       return;
                     }
 
                     indexValues[indexKey] = true;
                   }
 
-                  tx.executeSql('UPDATE ' + escapeStoreNameForSQL(storeName) + ' SET ' + escapeIndexNameForSQL(indexName) + ' = ? WHERE "key" = ?', [escapeSQLiteStatement(indexKey), data.rows.item(i).key], function (tx, data) {
+                  tx.executeSql("UPDATE " + escapeStoreNameForSQL(storeName) + " SET " + escapeIndexNameForSQL(indexName) + " = ? WHERE \"key\" = ?", [escapeSQLiteStatement(indexKey), data.rows.item(i).key], function(tx, data) {
                     addIndexEntry(i + 1);
                   }, error);
                 } catch (e) {
@@ -7953,11 +8011,11 @@
           return;
         }
 
-        tx.executeSql('CREATE INDEX IF NOT EXISTS "' + // The escaped index name must be unique among indexes in the whole database;
-        //    so we prefix with store name; as prefixed, will also not conflict with
-        //    index on `key`
-        // Avoid quotes and separate with special escape sequence
-        escapedStoreNameSQL.slice(1, -1) + '^5' + escapedIndexNameSQL.slice(1, -1) + '" ON ' + escapedStoreNameSQL + '(' + escapedIndexNameSQL + ')', [], applyIndex, error);
+        tx.executeSql("CREATE INDEX IF NOT EXISTS \"" + // The escaped index name must be unique among indexes in the whole database;
+          //    so we prefix with store name; as prefixed, will also not conflict with
+          //    index on `key`
+          // Avoid quotes and separate with special escape sequence
+          escapedStoreNameSQL.slice(1, -1) + "^5" + escapedIndexNameSQL.slice(1, -1) + "\" ON " + escapedStoreNameSQL + "(" + escapedIndexNameSQL + ")", [], applyIndex, error);
       }
 
       if (columnExists) {
@@ -7966,7 +8024,7 @@
         applyIndex(tx);
       } else {
         // For a new index, add a new column to the object store, then apply the index
-        var sql = ['ALTER TABLE', escapedStoreNameSQL, 'ADD', escapedIndexNameSQL, 'BLOB'].join(' ');
+        var sql = ["ALTER TABLE", escapedStoreNameSQL, "ADD", escapedIndexNameSQL, "BLOB"].join(" ");
         CFG.DEBUG && console.log(sql);
         tx.executeSql(sql, [], addIndexSQL, error);
       }
@@ -7981,7 +8039,7 @@
    */
 
 
-  IDBIndex.__deleteIndex = function (store, index) {
+  IDBIndex.__deleteIndex = function(store, index) {
     // Remove the index from the IDBObjectStore
     index.__pendingDelete = true;
     var indexHandle = store.__indexHandles[index.name];
@@ -7996,12 +8054,12 @@
 
     transaction.__addNonRequestToTransactionQueue(function deleteIndex(tx, args, success, failure) {
       function error(tx, err) {
-        failure(createDOMException('UnknownError', 'Could not delete index "' + index.name + '"', err));
+        failure(createDOMException("UnknownError", "Could not delete index \"" + index.name + "\"", err));
       }
 
       function finishDeleteIndex() {
         // Update the object store's index list
-        IDBIndex.__updateIndexList(store, tx, function (store) {
+        IDBIndex.__updateIndexList(store, tx, function(store) {
           delete index.__pendingDelete;
           delete index.__recreated;
           index.__deleted = true;
@@ -8020,7 +8078,7 @@
         return;
       }
 
-      tx.executeSql('DROP INDEX IF EXISTS ' + sqlQuote(escapeStoreNameForSQL(store.name).slice(1, -1) + '^5' + escapeIndexNameForSQL(index.name).slice(1, -1)), [], finishDeleteIndex, error);
+      tx.executeSql("DROP INDEX IF EXISTS " + sqlQuote(escapeStoreNameForSQL(store.name).slice(1, -1) + "^5" + escapeIndexNameForSQL(index.name).slice(1, -1)), [], finishDeleteIndex, error);
     }, undefined, store);
   };
   /**
@@ -8033,7 +8091,7 @@
    */
 
 
-  IDBIndex.__updateIndexList = function (store, tx, success, failure) {
+  IDBIndex.__updateIndexList = function(store, tx, success, failure) {
     var indexList = {};
 
     for (var i = 0; i < store.indexNames.length; i++) {
@@ -8045,14 +8103,14 @@
         keyPath: idx.keyPath,
         optionalParams: {
           unique: idx.unique,
-          multiEntry: idx.multiEntry
+          multiEntry: idx.multiEntry,
         },
-        deleted: Boolean(idx.deleted)
+        deleted: Boolean(idx.deleted),
       };
     }
 
-    CFG.DEBUG && console.log('Updating the index list for ' + store.__currentName, indexList);
-    tx.executeSql('UPDATE __sys__ SET "indexList" = ? WHERE "name" = ?', [JSON.stringify(indexList), escapeSQLiteStatement(store.__currentName)], function () {
+    CFG.DEBUG && console.log("Updating the index list for " + store.__currentName, indexList);
+    tx.executeSql("UPDATE __sys__ SET \"indexList\" = ? WHERE \"name\" = ?", [JSON.stringify(indexList), escapeSQLiteStatement(store.__currentName)], function() {
       success(store);
     }, failure);
   };
@@ -8067,11 +8125,11 @@
    */
 
 
-  IDBIndex.prototype.__fetchIndexData = function (range, opType, nullDisallowed, count) {
+  IDBIndex.prototype.__fetchIndexData = function(range, opType, nullDisallowed, count) {
     var me = this;
 
     if (count !== undefined) {
-      count = enforceRange(count, 'unsigned long');
+      count = enforceRange(count, "unsigned long");
     }
 
     IDBIndex.__invalidStateIfDeleted(me);
@@ -8079,17 +8137,17 @@
     IDBObjectStore.__invalidStateIfDeleted(me.objectStore);
 
     if (me.objectStore.__deleted) {
-      throw createDOMException('InvalidStateError', "This index's object store has been deleted");
+      throw createDOMException("InvalidStateError", "This index's object store has been deleted");
     }
 
     IDBTransaction.__assertActive(me.objectStore.transaction);
 
     if (nullDisallowed && isNullish(range)) {
-      throw createDOMException('DataError', 'No key or range was specified');
+      throw createDOMException("DataError", "No key or range was specified");
     }
 
     var fetchArgs = buildFetchIndexDataSQL(nullDisallowed, me, range, opType, false);
-    return me.objectStore.transaction.__addToTransactionQueue(function () {
+    return me.objectStore.transaction.__addToTransactionQueue(function() {
       for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
         args[_key] = arguments[_key];
       }
@@ -8109,15 +8167,15 @@
 
   IDBIndex.prototype.openCursor = function
     /* query, direction */
-  () {
+    () {
     /* eslint-enable jsdoc/check-param-names */
     var me = this; // eslint-disable-next-line prefer-rest-params
 
     var _arguments = Array.prototype.slice.call(arguments),
-        query = _arguments[0],
-        direction = _arguments[1];
+      query = _arguments[0],
+      direction = _arguments[1];
 
-    var cursor = IDBCursorWithValue.__createInstance(query, direction, me.objectStore, me, escapeIndexNameForSQLKeyColumn(me.name), 'value');
+    var cursor = IDBCursorWithValue.__createInstance(query, direction, me.objectStore, me, escapeIndexNameForSQLKeyColumn(me.name), "value");
 
     me.__objectStore.__cursors.push(cursor);
 
@@ -8135,64 +8193,64 @@
 
   IDBIndex.prototype.openKeyCursor = function
     /* query, direction */
-  () {
+    () {
     /* eslint-enable jsdoc/check-param-names */
     var me = this; // eslint-disable-next-line prefer-rest-params
 
     var _arguments2 = Array.prototype.slice.call(arguments),
-        query = _arguments2[0],
-        direction = _arguments2[1];
+      query = _arguments2[0],
+      direction = _arguments2[1];
 
-    var cursor = IDBCursor.__createInstance(query, direction, me.objectStore, me, escapeIndexNameForSQLKeyColumn(me.name), 'key');
+    var cursor = IDBCursor.__createInstance(query, direction, me.objectStore, me, escapeIndexNameForSQLKeyColumn(me.name), "key");
 
     me.__objectStore.__cursors.push(cursor);
 
     return cursor.__request;
   };
 
-  IDBIndex.prototype.get = function (query) {
+  IDBIndex.prototype.get = function(query) {
     if (!arguments.length) {
       // Per https://heycam.github.io/webidl/
-      throw new TypeError('A parameter was missing for `IDBIndex.get`.');
+      throw new TypeError("A parameter was missing for `IDBIndex.get`.");
     }
 
-    return this.__fetchIndexData(query, 'value', true);
+    return this.__fetchIndexData(query, "value", true);
   };
 
-  IDBIndex.prototype.getKey = function (query) {
+  IDBIndex.prototype.getKey = function(query) {
     if (!arguments.length) {
       // Per https://heycam.github.io/webidl/
-      throw new TypeError('A parameter was missing for `IDBIndex.getKey`.');
+      throw new TypeError("A parameter was missing for `IDBIndex.getKey`.");
     }
 
-    return this.__fetchIndexData(query, 'key', true);
+    return this.__fetchIndexData(query, "key", true);
   };
 
   IDBIndex.prototype.getAll = function
     /* query, count */
-  () {
+    () {
     // eslint-disable-next-line prefer-rest-params
     var _arguments3 = Array.prototype.slice.call(arguments),
-        query = _arguments3[0],
-        count = _arguments3[1];
+      query = _arguments3[0],
+      count = _arguments3[1];
 
-    return this.__fetchIndexData(query, 'value', false, count);
+    return this.__fetchIndexData(query, "value", false, count);
   };
 
   IDBIndex.prototype.getAllKeys = function
     /* query, count */
-  () {
+    () {
     // eslint-disable-next-line prefer-rest-params
     var _arguments4 = Array.prototype.slice.call(arguments),
-        query = _arguments4[0],
-        count = _arguments4[1];
+      query = _arguments4[0],
+      count = _arguments4[1];
 
-    return this.__fetchIndexData(query, 'key', false, count);
+    return this.__fetchIndexData(query, "key", false, count);
   };
 
   IDBIndex.prototype.count = function
     /* query */
-  () {
+    () {
     var me = this; // eslint-disable-next-line prefer-rest-params
 
     var query = arguments[0]; // With the exception of needing to check whether the index has been
@@ -8203,28 +8261,28 @@
     if (instanceOf(query, IDBKeyRange)) {
       // Todo: Do we need this block?
       // We don't need to add to cursors array since has the count parameter which won't cache
-      return IDBCursorWithValue.__createInstance(query, 'next', me.objectStore, me, escapeIndexNameForSQLKeyColumn(me.name), 'value', true).__request;
+      return IDBCursorWithValue.__createInstance(query, "next", me.objectStore, me, escapeIndexNameForSQLKeyColumn(me.name), "value", true).__request;
     }
 
-    return me.__fetchIndexData(query, 'count', false);
+    return me.__fetchIndexData(query, "count", false);
   };
 
-  IDBIndex.prototype.__renameIndex = function (store, oldName, newName) {
+  IDBIndex.prototype.__renameIndex = function(store, oldName, newName) {
     var colInfoToPreserveArr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
     var cb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
-    var newNameType = 'BLOB';
+    var newNameType = "BLOB";
     var storeName = store.__currentName;
     var escapedStoreNameSQL = escapeStoreNameForSQL(storeName);
     var escapedNewIndexNameSQL = escapeIndexNameForSQL(newName);
-    var escapedTmpStoreNameSQL = sqlQuote('tmp_' + escapeStoreNameForSQL(storeName).slice(1, -1));
-    var colNamesToPreserve = colInfoToPreserveArr.map(function (colInfo) {
+    var escapedTmpStoreNameSQL = sqlQuote("tmp_" + escapeStoreNameForSQL(storeName).slice(1, -1));
+    var colNamesToPreserve = colInfoToPreserveArr.map(function(colInfo) {
       return colInfo[0];
     });
-    var colInfoToPreserve = colInfoToPreserveArr.map(function (colInfo) {
-      return colInfo.join(' ');
+    var colInfoToPreserve = colInfoToPreserveArr.map(function(colInfo) {
+      return colInfo.join(" ");
     });
-    var listColInfoToPreserve = colInfoToPreserve.length ? colInfoToPreserve.join(', ') + ', ' : '';
-    var listColsToPreserve = colNamesToPreserve.length ? colNamesToPreserve.join(', ') + ', ' : ''; // We could adapt the approach at http://stackoverflow.com/a/8430746/271577
+    var listColInfoToPreserve = colInfoToPreserve.length ? colInfoToPreserve.join(", ") + ", " : "";
+    var listColsToPreserve = colNamesToPreserve.length ? colNamesToPreserve.join(", ") + ", " : ""; // We could adapt the approach at http://stackoverflow.com/a/8430746/271577
     //    to make the approach reusable without passing column names, but it is a bit fragile
 
     store.transaction.__addNonRequestToTransactionQueue(function renameIndex(tx, args, success, error) {
@@ -8244,56 +8302,56 @@
       // This approach has the advantage of auto-deleting indexes via the DROP TABLE
 
 
-      var sql = 'CREATE TABLE ' + escapedTmpStoreNameSQL + '(' + listColInfoToPreserve + escapedNewIndexNameSQL + ' ' + newNameType + ')';
+      var sql = "CREATE TABLE " + escapedTmpStoreNameSQL + "(" + listColInfoToPreserve + escapedNewIndexNameSQL + " " + newNameType + ")";
       CFG.DEBUG && console.log(sql);
-      tx.executeSql(sql, [], function () {
-        var sql = 'INSERT INTO ' + escapedTmpStoreNameSQL + '(' + listColsToPreserve + escapedNewIndexNameSQL + ') SELECT ' + listColsToPreserve + escapeIndexNameForSQL(oldName) + ' FROM ' + escapedStoreNameSQL;
+      tx.executeSql(sql, [], function() {
+        var sql = "INSERT INTO " + escapedTmpStoreNameSQL + "(" + listColsToPreserve + escapedNewIndexNameSQL + ") SELECT " + listColsToPreserve + escapeIndexNameForSQL(oldName) + " FROM " + escapedStoreNameSQL;
         CFG.DEBUG && console.log(sql);
-        tx.executeSql(sql, [], function () {
-          var sql = 'DROP TABLE ' + escapedStoreNameSQL;
+        tx.executeSql(sql, [], function() {
+          var sql = "DROP TABLE " + escapedStoreNameSQL;
           CFG.DEBUG && console.log(sql);
-          tx.executeSql(sql, [], function () {
-            var sql = 'ALTER TABLE ' + escapedTmpStoreNameSQL + ' RENAME TO ' + escapedStoreNameSQL;
+          tx.executeSql(sql, [], function() {
+            var sql = "ALTER TABLE " + escapedTmpStoreNameSQL + " RENAME TO " + escapedStoreNameSQL;
             CFG.DEBUG && console.log(sql);
-            tx.executeSql(sql, [], function (tx, data) {
+            tx.executeSql(sql, [], function(tx, data) {
               if (!CFG.useSQLiteIndexes) {
                 finish();
                 return;
               }
 
               var indexCreations = colNamesToPreserve.slice(2) // Doing `key` separately and no need for index on `value`
-              .map(function (escapedIndexNameSQL) {
-                return new syncPromiseCommonjs(function (resolve, reject) {
-                  var escapedIndexToRecreate = sqlQuote(escapedStoreNameSQL.slice(1, -1) + '^5' + escapedIndexNameSQL.slice(1, -1)); // const sql = 'DROP INDEX IF EXISTS ' + escapedIndexToRecreate;
-                  // CFG.DEBUG && console.log(sql);
-                  // tx.executeSql(sql, [], function () {
-
-                  var sql = 'CREATE INDEX ' + escapedIndexToRecreate + ' ON ' + escapedStoreNameSQL + '(' + escapedIndexNameSQL + ')';
-                  CFG.DEBUG && console.log(sql);
-                  tx.executeSql(sql, [], resolve, function (tx, err) {
-                    reject(err);
-                  }); // }, function (tx, err) {
-                  //    reject(err);
-                  // });
+                .map(function(escapedIndexNameSQL) {
+                  return new syncPromiseCommonjs(function(resolve, reject) {
+                    var escapedIndexToRecreate = sqlQuote(escapedStoreNameSQL.slice(1, -1) + "^5" + escapedIndexNameSQL.slice(1, -1)); // const sql = 'DROP INDEX IF EXISTS ' + escapedIndexToRecreate;
+                    // CFG.DEBUG && console.log(sql);
+                    // tx.executeSql(sql, [], function () {
+
+                    var sql = "CREATE INDEX " + escapedIndexToRecreate + " ON " + escapedStoreNameSQL + "(" + escapedIndexNameSQL + ")";
+                    CFG.DEBUG && console.log(sql);
+                    tx.executeSql(sql, [], resolve, function(tx, err) {
+                      reject(err);
+                    }); // }, function (tx, err) {
+                    //    reject(err);
+                    // });
+                  });
                 });
-              });
-              indexCreations.push(new syncPromiseCommonjs(function (resolve, reject) {
-                var escapedIndexToRecreate = sqlQuote('sk_' + escapedStoreNameSQL.slice(1, -1)); // Chrome erring here if not dropped first; Node does not
+              indexCreations.push(new syncPromiseCommonjs(function(resolve, reject) {
+                var escapedIndexToRecreate = sqlQuote("sk_" + escapedStoreNameSQL.slice(1, -1)); // Chrome erring here if not dropped first; Node does not
 
-                var sql = 'DROP INDEX IF EXISTS ' + escapedIndexToRecreate;
+                var sql = "DROP INDEX IF EXISTS " + escapedIndexToRecreate;
                 CFG.DEBUG && console.log(sql);
-                tx.executeSql(sql, [], function () {
-                  var sql = 'CREATE INDEX ' + escapedIndexToRecreate + ' ON ' + escapedStoreNameSQL + '("key")';
+                tx.executeSql(sql, [], function() {
+                  var sql = "CREATE INDEX " + escapedIndexToRecreate + " ON " + escapedStoreNameSQL + "(\"key\")";
                   CFG.DEBUG && console.log(sql);
-                  tx.executeSql(sql, [], resolve, function (tx, err) {
+                  tx.executeSql(sql, [], resolve, function(tx, err) {
                     reject(err);
                   });
-                }, function (tx, err) {
+                }, function(tx, err) {
                   reject(err);
                 });
               }));
-              syncPromiseCommonjs.all(indexCreations).then(finish, error)["catch"](function (err) {
-                console.log('Index rename error');
+              syncPromiseCommonjs.all(indexCreations).then(finish, error)["catch"](function(err) {
+                console.log("Index rename error");
                 throw err;
               });
             }, sqlError);
@@ -8305,14 +8363,14 @@
 
   Object.defineProperty(IDBIndex, Symbol.hasInstance, {
     value: function value(obj) {
-      return isObj(obj) && typeof obj.openCursor === 'function' && typeof obj.multiEntry === 'boolean';
-    }
+      return isObj(obj) && typeof obj.openCursor === "function" && typeof obj.multiEntry === "boolean";
+    },
   });
   defineReadonlyOuterInterface(IDBIndex.prototype, readonlyProperties$2);
-  defineOuterInterface(IDBIndex.prototype, ['name']);
-  IDBIndex.prototype[Symbol.toStringTag] = 'IDBIndexPrototype';
-  Object.defineProperty(IDBIndex, 'prototype', {
-    writable: false
+  defineOuterInterface(IDBIndex.prototype, ["name"]);
+  IDBIndex.prototype[Symbol.toStringTag] = "IDBIndexPrototype";
+  Object.defineProperty(IDBIndex, "prototype", {
+    writable: false,
   });
 
   function executeFetchIndexData(count, unboundedDisallowed, index, hasKey, range, opType, multiChecks, sql, sqlValues, tx, args, success, error) {
@@ -8321,20 +8379,20 @@
     }
 
     if (count) {
-      sql.push('LIMIT', count);
+      sql.push("LIMIT", count);
     }
 
-    var isCount = opType === 'count';
-    CFG.DEBUG && console.log('Trying to fetch data for Index', sql.join(' '), sqlValues);
-    tx.executeSql(sql.join(' '), sqlValues, function (tx, data) {
+    var isCount = opType === "count";
+    CFG.DEBUG && console.log("Trying to fetch data for Index", sql.join(" "), sqlValues);
+    tx.executeSql(sql.join(" "), sqlValues, function(tx, data) {
       var records = [];
       var recordCount = 0;
-      var decode$1 = isCount ? function () {
+      var decode$1 = isCount ? function() {
         /* */
-      } : opType === 'key' ? function (record) {
+      } : opType === "key" ? function(record) {
         // Key.convertValueToKey(record.key); // Already validated before storage
         return _decode(unescapeSQLiteResponse(record.key));
-      } : function (record) {
+      } : function(record) {
         // when opType is value
         return decode(unescapeSQLiteResponse(record.value));
       };
@@ -8348,10 +8406,10 @@
           var rowKey = _decode(row[escapedIndexNameForKeyCol]);
           var record = void 0;
 
-          if (hasKey && (multiChecks && range.some(function (check) {
-            return rowKey.includes(check);
-          }) || // More precise than our SQL
-          isMultiEntryMatch(encodedKey, row[escapedIndexNameForKeyCol]))) {
+          if (hasKey && (multiChecks && range.some(function(check) {
+              return rowKey.includes(check);
+            }) || // More precise than our SQL
+            isMultiEntryMatch(encodedKey, row[escapedIndexNameForKeyCol]))) {
             recordCount++;
             record = row;
           } else if (!hasKey && !multiChecks) {
@@ -8399,23 +8457,23 @@
 
   function buildFetchIndexDataSQL(nullDisallowed, index, range, opType, multiChecks) {
     var hasRange = nullDisallowed || !isNullish(range);
-    var col = opType === 'count' ? 'key' : opType; // It doesn't matter which column we use for 'count' as long as it is valid
+    var col = opType === "count" ? "key" : opType; // It doesn't matter which column we use for 'count' as long as it is valid
 
-    var sql = ['SELECT', sqlQuote(col) + (index.multiEntry ? ', ' + escapeIndexNameForSQL(index.name) : ''), 'FROM', escapeStoreNameForSQL(index.objectStore.__currentName), 'WHERE', escapeIndexNameForSQL(index.name), 'NOT NULL'];
+    var sql = ["SELECT", sqlQuote(col) + (index.multiEntry ? ", " + escapeIndexNameForSQL(index.name) : ""), "FROM", escapeStoreNameForSQL(index.objectStore.__currentName), "WHERE", escapeIndexNameForSQL(index.name), "NOT NULL"];
     var sqlValues = [];
 
     if (hasRange) {
       if (multiChecks) {
-        sql.push('AND (');
-        range.forEach(function (innerKey, i) {
-          if (i > 0) sql.push('OR');
+        sql.push("AND (");
+        range.forEach(function(innerKey, i) {
+          if (i > 0) sql.push("OR");
           sql.push(escapeIndexNameForSQL(index.name), "LIKE ? ESCAPE '^' ");
-          sqlValues.push('%' + sqlLIKEEscape(_encode(innerKey, index.multiEntry)) + '%');
+          sqlValues.push("%" + sqlLIKEEscape(_encode(innerKey, index.multiEntry)) + "%");
         });
-        sql.push(')');
+        sql.push(")");
       } else if (index.multiEntry) {
-        sql.push('AND', escapeIndexNameForSQL(index.name), "LIKE ? ESCAPE '^'");
-        sqlValues.push('%' + sqlLIKEEscape(_encode(range, index.multiEntry)) + '%');
+        sql.push("AND", escapeIndexNameForSQL(index.name), "LIKE ? ESCAPE '^'");
+        sqlValues.push("%" + sqlLIKEEscape(_encode(range, index.multiEntry)) + "%");
       } else {
         var convertedRange = convertValueToKeyRange(range, nullDisallowed);
         setSQLForKeyRange(convertedRange, escapeIndexNameForSQL(index.name), sql, sqlValues, true, false);
@@ -8425,7 +8483,8 @@
     return [nullDisallowed, index, hasRange, range, opType, multiChecks, sql, sqlValues];
   }
 
-  var readonlyProperties$1 = ['keyPath', 'indexNames', 'transaction', 'autoIncrement'];
+  var readonlyProperties$1 = ["keyPath", "indexNames", "transaction", "autoIncrement"];
+
   /* eslint-disable jsdoc/check-param-names */
 
   /**
@@ -8438,15 +8497,15 @@
 
   function IDBObjectStore() {
     /* eslint-enable jsdoc/check-param-names */
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
   var IDBObjectStoreAlias = IDBObjectStore;
 
-  IDBObjectStore.__createInstance = function (storeProperties, transaction) {
+  IDBObjectStore.__createInstance = function(storeProperties, transaction) {
     function IDBObjectStore() {
       var me = this;
-      me[Symbol.toStringTag] = 'IDBObjectStore';
+      me[Symbol.toStringTag] = "IDBObjectStore";
       defineReadonlyProperties(this, readonlyProperties$1);
       me.__name = me.__originalName = storeProperties.name;
       me.__keyPath = Array.isArray(storeProperties.keyPath) ? storeProperties.keyPath.slice() : storeProperties.keyPath;
@@ -8473,12 +8532,12 @@
       }
 
       me.__oldIndexNames = me.indexNames.clone();
-      Object.defineProperty(this, '__currentName', {
+      Object.defineProperty(this, "__currentName", {
         get: function get() {
-          return '__pendingName' in this ? this.__pendingName : this.name;
-        }
+          return "__pendingName" in this ? this.__pendingName : this.name;
+        },
       });
-      Object.defineProperty(this, 'name', {
+      Object.defineProperty(this, "name", {
         enumerable: false,
         configurable: false,
         get: function get() {
@@ -8500,7 +8559,7 @@
           }
 
           if (me.__idbdb.__objectStores[name] && !me.__idbdb.__objectStores[name].__pendingDelete) {
-            throw createDOMException('ConstraintError', 'Object store "' + name + '" already exists in ' + me.__idbdb.name);
+            throw createDOMException("ConstraintError", "Object store \"" + name + "\" already exists in " + me.__idbdb.name);
           }
 
           me.__name = name;
@@ -8519,24 +8578,24 @@
           me.transaction.__storeHandles[name] = oldHandle; // Ensure new reference accessible
 
           me.__pendingName = oldName;
-          var sql = 'UPDATE __sys__ SET "name" = ? WHERE "name" = ?';
+          var sql = "UPDATE __sys__ SET \"name\" = ? WHERE \"name\" = ?";
           var sqlValues = [escapeSQLiteStatement(name), escapeSQLiteStatement(oldName)];
           CFG.DEBUG && console.log(sql, sqlValues);
 
           me.transaction.__addNonRequestToTransactionQueue(function objectStoreClear(tx, args, success, error) {
-            tx.executeSql(sql, sqlValues, function (tx, data) {
+            tx.executeSql(sql, sqlValues, function(tx, data) {
               // This SQL preserves indexes per https://www.sqlite.org/lang_altertable.html
-              var sql = 'ALTER TABLE ' + escapeStoreNameForSQL(oldName) + ' RENAME TO ' + escapeStoreNameForSQL(name);
+              var sql = "ALTER TABLE " + escapeStoreNameForSQL(oldName) + " RENAME TO " + escapeStoreNameForSQL(name);
               CFG.DEBUG && console.log(sql);
-              tx.executeSql(sql, [], function (tx, data) {
+              tx.executeSql(sql, [], function(tx, data) {
                 delete me.__pendingName;
                 success();
               });
-            }, function (tx, err) {
+            }, function(tx, err) {
               error(err);
             });
           });
-        }
+        },
       });
     }
 
@@ -8552,25 +8611,25 @@
    */
 
 
-  IDBObjectStore.__clone = function (store, transaction) {
+  IDBObjectStore.__clone = function(store, transaction) {
     var newStore = IDBObjectStore.__createInstance({
       name: store.__currentName,
       keyPath: Array.isArray(store.keyPath) ? store.keyPath.slice() : store.keyPath,
       autoInc: store.autoIncrement,
       indexList: {},
       idbdb: store.__idbdb,
-      cursors: store.__cursors
+      cursors: store.__cursors,
     }, transaction);
 
-    ['__indexes', '__indexNames', '__oldIndexNames', '__deleted', '__pendingDelete', '__pendingCreate', '__originalName'].forEach(function (p) {
+    ["__indexes", "__indexNames", "__oldIndexNames", "__deleted", "__pendingDelete", "__pendingCreate", "__originalName"].forEach(function(p) {
       newStore[p] = store[p];
     });
     return newStore;
   };
 
-  IDBObjectStore.__invalidStateIfDeleted = function (store, msg) {
+  IDBObjectStore.__invalidStateIfDeleted = function(store, msg) {
     if (store.__deleted || store.__pendingDelete || store.__pendingCreate && store.transaction && store.transaction.__errored) {
-      throw createDOMException('InvalidStateError', msg || 'This store has been deleted');
+      throw createDOMException("InvalidStateError", msg || "This store has been deleted");
     }
   };
   /**
@@ -8582,7 +8641,7 @@
    */
 
 
-  IDBObjectStore.__createObjectStore = function (db, store) {
+  IDBObjectStore.__createObjectStore = function(db, store) {
     // Add the object store to the IDBDatabase
     var storeName = store.__currentName;
     store.__pendingCreate = true;
@@ -8593,28 +8652,28 @@
     var storeHandles = transaction.__storeHandles;
 
     if (!storeHandles[storeName] || // These latter conditions are to allow store
-    //   recreation to create new clone object
-    storeHandles[storeName].__pendingDelete || storeHandles[storeName].__deleted) {
+      //   recreation to create new clone object
+      storeHandles[storeName].__pendingDelete || storeHandles[storeName].__deleted) {
       storeHandles[storeName] = IDBObjectStore.__clone(store, transaction);
     }
 
     transaction.__addNonRequestToTransactionQueue(function createObjectStore(tx, args, success, failure) {
       function error(tx, err) {
         CFG.DEBUG && console.log(err);
-        failure(createDOMException('UnknownError', 'Could not create object store "' + storeName + '"', err));
+        failure(createDOMException("UnknownError", "Could not create object store \"" + storeName + "\"", err));
       }
 
       var escapedStoreNameSQL = escapeStoreNameForSQL(storeName); // key INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE
 
-      var sql = ['CREATE TABLE', escapedStoreNameSQL, '(key BLOB', store.autoIncrement ? 'UNIQUE, inc INTEGER PRIMARY KEY AUTOINCREMENT' : 'PRIMARY KEY', ', value BLOB)'].join(' ');
+      var sql = ["CREATE TABLE", escapedStoreNameSQL, "(key BLOB", store.autoIncrement ? "UNIQUE, inc INTEGER PRIMARY KEY AUTOINCREMENT" : "PRIMARY KEY", ", value BLOB)"].join(" ");
       CFG.DEBUG && console.log(sql);
-      tx.executeSql(sql, [], function (tx, data) {
+      tx.executeSql(sql, [], function(tx, data) {
         function insertStoreInfo() {
           var encodedKeyPath = JSON.stringify(store.keyPath);
-          tx.executeSql('INSERT INTO __sys__ VALUES (?,?,?,?,?)', [escapeSQLiteStatement(storeName), encodedKeyPath, // For why converting here, see comment and following
-          //  discussion at:
-          //  https://github.com/axemclion/IndexedDBShim/issues/313#issuecomment-590086778
-          Number(store.autoIncrement), '{}', 1], function () {
+          tx.executeSql("INSERT INTO __sys__ VALUES (?,?,?,?,?)", [escapeSQLiteStatement(storeName), encodedKeyPath, // For why converting here, see comment and following
+            //  discussion at:
+            //  https://github.com/axemclion/IndexedDBShim/issues/313#issuecomment-590086778
+            Number(store.autoIncrement), "{}", 1], function() {
             delete store.__pendingCreate;
             delete store.__deleted;
             success(store);
@@ -8626,7 +8685,7 @@
           return;
         }
 
-        tx.executeSql('CREATE INDEX IF NOT EXISTS ' + sqlQuote('sk_' + escapedStoreNameSQL.slice(1, -1)) + ' ON ' + escapedStoreNameSQL + '("key")', [], insertStoreInfo, error);
+        tx.executeSql("CREATE INDEX IF NOT EXISTS " + sqlQuote("sk_" + escapedStoreNameSQL.slice(1, -1)) + " ON " + escapedStoreNameSQL + "(\"key\")", [], insertStoreInfo, error);
       }, error);
     });
 
@@ -8641,7 +8700,7 @@
    */
 
 
-  IDBObjectStore.__deleteObjectStore = function (db, store) {
+  IDBObjectStore.__deleteObjectStore = function(db, store) {
     // Remove the object store from the IDBDatabase
     store.__pendingDelete = true; // We don't delete the other index holders in case need reversion
 
@@ -8660,13 +8719,13 @@
     transaction.__addNonRequestToTransactionQueue(function deleteObjectStore(tx, args, success, failure) {
       function error(tx, err) {
         CFG.DEBUG && console.log(err);
-        failure(createDOMException('UnknownError', 'Could not delete ObjectStore', err));
+        failure(createDOMException("UnknownError", "Could not delete ObjectStore", err));
       }
 
-      tx.executeSql('SELECT "name" FROM __sys__ WHERE "name" = ?', [escapeSQLiteStatement(store.__currentName)], function (tx, data) {
+      tx.executeSql("SELECT \"name\" FROM __sys__ WHERE \"name\" = ?", [escapeSQLiteStatement(store.__currentName)], function(tx, data) {
         if (data.rows.length > 0) {
-          tx.executeSql('DROP TABLE ' + escapeStoreNameForSQL(store.__currentName), [], function () {
-            tx.executeSql('DELETE FROM __sys__ WHERE "name" = ?', [escapeSQLiteStatement(store.__currentName)], function () {
+          tx.executeSql("DROP TABLE " + escapeStoreNameForSQL(store.__currentName), [], function() {
+            tx.executeSql("DELETE FROM __sys__ WHERE \"name\" = ?", [escapeSQLiteStatement(store.__currentName)], function() {
               delete store.__pendingDelete;
               store.__deleted = true;
 
@@ -8683,10 +8742,10 @@
     });
   };
   /**
-  * @typedef {GenericArray} KeyValueArray
-  * @property {module:Key.Key} 0
-  * @property {*} 1
-  */
+   * @typedef {GenericArray} KeyValueArray
+   * @property {module:Key.Key} 0
+   * @property {*} 1
+   */
   // Todo: Although we may end up needing to do cloning genuinely asynchronously (for Blobs and FileLists),
   //   and we'll want to ensure the queue starts up synchronously, we nevertheless do the cloning
   //   before entering the queue and its callback since the encoding we do is preceded by validation
@@ -8708,12 +8767,12 @@
    */
 
 
-  IDBObjectStore.prototype.__validateKeyAndValueAndCloneValue = function (value, key, cursorUpdate) {
+  IDBObjectStore.prototype.__validateKeyAndValueAndCloneValue = function(value, key, cursorUpdate) {
     var me = this;
 
     if (me.keyPath !== null) {
       if (key !== undefined) {
-        throw createDOMException('DataError', 'The object store uses in-line keys and the key parameter was provided', me);
+        throw createDOMException("DataError", "The object store uses in-line keys and the key parameter was provided", me);
       } // Todo Binary: Avoid blobs loading async to ensure cloning (and errors therein)
       //   occurs sync; then can make cloning and this method without callbacks (except where ok
       //   to be async)
@@ -8724,24 +8783,24 @@
       key = extractKeyValueDecodedFromValueUsingKeyPath(_clonedValue, me.keyPath); // May throw so "rethrow"
 
       if (key.invalid) {
-        throw createDOMException('DataError', 'KeyPath was specified, but key was invalid.');
+        throw createDOMException("DataError", "KeyPath was specified, but key was invalid.");
       }
 
       if (key.failure) {
         if (!cursorUpdate) {
           if (!me.autoIncrement) {
-            throw createDOMException('DataError', 'Could not evaluate a key from keyPath and there is no key generator');
+            throw createDOMException("DataError", "Could not evaluate a key from keyPath and there is no key generator");
           }
 
           if (!checkKeyCouldBeInjectedIntoValue(_clonedValue, me.keyPath)) {
-            throw createDOMException('DataError', 'A key could not be injected into a value');
+            throw createDOMException("DataError", "A key could not be injected into a value");
           } // A key will be generated
 
 
           return [undefined, _clonedValue];
         }
 
-        throw createDOMException('DataError', 'Could not evaluate a key from keyPath');
+        throw createDOMException("DataError", "Could not evaluate a key from keyPath");
       } // An `IDBCursor.update` call will also throw if not equal to the cursor’s effective key
 
 
@@ -8750,7 +8809,7 @@
 
     if (key === undefined) {
       if (!me.autoIncrement) {
-        throw createDOMException('DataError', 'The object store uses out-of-line keys and has no key generator and the key parameter was not provided.', me);
+        throw createDOMException("DataError", "The object store uses out-of-line keys and has no key generator and the key parameter was not provided.", me);
       } // A key will be generated
 
 
@@ -8776,12 +8835,12 @@
    */
 
 
-  IDBObjectStore.prototype.__deriveKey = function (tx, value, key, success, failCb) {
+  IDBObjectStore.prototype.__deriveKey = function(tx, value, key, success, failCb) {
     var me = this; // Only run if cloning is needed
 
     function keyCloneThenSuccess(oldCn) {
       // We want to return the original key, so we don't need to accept an argument here
-      encode(key, function (key) {
+      encode(key, function(key) {
         key = decode(key);
         success(key, oldCn);
       });
@@ -8790,9 +8849,9 @@
     if (me.autoIncrement) {
       // If auto-increment and no valid primaryKey found on the keyPath, get and set the new value, and use
       if (key === undefined) {
-        generateKeyForStore(tx, me, function (failure, key, oldCn) {
+        generateKeyForStore(tx, me, function(failure, key, oldCn) {
           if (failure) {
-            failCb(createDOMException('ConstraintError', 'The key generator\'s current number has reached the maximum safe integer limit'));
+            failCb(createDOMException("ConstraintError", "The key generator's current number has reached the maximum safe integer limit"));
             return;
           }
 
@@ -8812,34 +8871,34 @@
     }
   };
 
-  IDBObjectStore.prototype.__insertData = function (tx, encoded, value, clonedKeyOrCurrentNumber, oldCn, success, error) {
+  IDBObjectStore.prototype.__insertData = function(tx, encoded, value, clonedKeyOrCurrentNumber, oldCn, success, error) {
     var me = this; // The `ConstraintError` to occur for `add` upon a duplicate will occur naturally in attempting an insert
     // We process the index information first as it will stored in the same table as the store
 
     var paramMap = {};
     var indexPromises = Object.keys( // We do not iterate `indexNames` as those can be modified synchronously (e.g.,
-    //   `deleteIndex` could, by its synchronous removal from `indexNames`, prevent
-    //   iteration here of an index though per IndexedDB test
-    //   `idbobjectstore_createIndex4-deleteIndex-event_order.js`, `createIndex`
-    //   should be allowed to first fail even in such a case).
-    me.__indexes).map(function (indexName) {
+      //   `deleteIndex` could, by its synchronous removal from `indexNames`, prevent
+      //   iteration here of an index though per IndexedDB test
+      //   `idbobjectstore_createIndex4-deleteIndex-event_order.js`, `createIndex`
+      //   should be allowed to first fail even in such a case).
+      me.__indexes).map(function(indexName) {
       // While this may sometimes resolve sync and sometimes async, the
       //   idea is to avoid, where possible, unnecessary delays (and
       //   consuming code ought to only see a difference in the browser
       //   where we can't control the transaction timeout anyways).
-      return new syncPromiseCommonjs(function (resolve, reject) {
+      return new syncPromiseCommonjs(function(resolve, reject) {
         var index = me.__indexes[indexName];
 
         if ( // `createIndex` was called synchronously after the current insertion was added to
-        //  the transaction queue so although it was added to `__indexes`, it is not yet
-        //  ready to be checked here for the insertion as it will be when running the
-        //  `createIndex` operation (e.g., if two items with the same key were added and
-        //  *then* a unique index was created, it should not continue to err and abort
-        //  yet, as we're still handling the insertions which must be processed (e.g., to
-        //  add duplicates which then cause a unique index to fail))
-        index.__pendingCreate || // If already deleted (and not just slated for deletion (by `__pendingDelete`
-        //  after this add), we avoid checks
-        index.__deleted) {
+          //  the transaction queue so although it was added to `__indexes`, it is not yet
+          //  ready to be checked here for the insertion as it will be when running the
+          //  `createIndex` operation (e.g., if two items with the same key were added and
+          //  *then* a unique index was created, it should not continue to err and abort
+          //  yet, as we're still handling the insertions which must be processed (e.g., to
+          //  add duplicates which then cause a unique index to fail))
+          index.__pendingCreate || // If already deleted (and not just slated for deletion (by `__pendingDelete`
+          //  after this add), we avoid checks
+          index.__deleted) {
           resolve();
           return;
         }
@@ -8850,7 +8909,7 @@
           indexKey = extractKeyValueDecodedFromValueUsingKeyPath(value, index.keyPath, index.multiEntry); // Add as necessary to this and skip past this index if exceptions here)
 
           if (indexKey.invalid || indexKey.failure) {
-            throw new Error('Go to catch');
+            throw new Error("Go to catch");
           }
         } catch (err) {
           resolve();
@@ -8869,7 +8928,7 @@
 
         if (index.unique) {
           var multiCheck = index.multiEntry && Array.isArray(indexKey);
-          var fetchArgs = buildFetchIndexDataSQL(true, index, indexKey, 'key', multiCheck);
+          var fetchArgs = buildFetchIndexDataSQL(true, index, indexKey, "key", multiCheck);
           executeFetchIndexData.apply(void 0, [null].concat(_toConsumableArray(fetchArgs), [tx, null, function success(key) {
             if (key === undefined) {
               setIndexInfo(index);
@@ -8877,7 +8936,7 @@
               return;
             }
 
-            reject(createDOMException('ConstraintError', 'Index already contains a record equal to ' + (multiCheck ? 'one of the subkeys of' : '') + '`indexKey`'));
+            reject(createDOMException("ConstraintError", "Index already contains a record equal to " + (multiCheck ? "one of the subkeys of" : "") + "`indexKey`"));
           }, reject]));
         } else {
           setIndexInfo(index);
@@ -8885,48 +8944,48 @@
         }
       });
     });
-    return syncPromiseCommonjs.all(indexPromises).then(function () {
-      var sqlStart = ['INSERT INTO', escapeStoreNameForSQL(me.__currentName), '('];
-      var sqlEnd = [' VALUES ('];
+    return syncPromiseCommonjs.all(indexPromises).then(function() {
+      var sqlStart = ["INSERT INTO", escapeStoreNameForSQL(me.__currentName), "("];
+      var sqlEnd = [" VALUES ("];
       var insertSqlValues = [];
 
       if (clonedKeyOrCurrentNumber !== undefined) {
         // Key.convertValueToKey(primaryKey); // Already run
-        sqlStart.push(sqlQuote('key'), ',');
-        sqlEnd.push('?,');
+        sqlStart.push(sqlQuote("key"), ",");
+        sqlEnd.push("?,");
         insertSqlValues.push(escapeSQLiteStatement(_encode(clonedKeyOrCurrentNumber)));
       }
 
-      Object.entries(paramMap).forEach(function (_ref) {
+      Object.entries(paramMap).forEach(function(_ref) {
         var _ref2 = _slicedToArray(_ref, 2),
-            key = _ref2[0],
-            stmt = _ref2[1];
+          key = _ref2[0],
+          stmt = _ref2[1];
 
-        sqlStart.push(escapeIndexNameForSQL(key) + ',');
-        sqlEnd.push('?,');
+        sqlStart.push(escapeIndexNameForSQL(key) + ",");
+        sqlEnd.push("?,");
         insertSqlValues.push(escapeSQLiteStatement(stmt));
       }); // removing the trailing comma
 
-      sqlStart.push(sqlQuote('value') + ' )');
-      sqlEnd.push('?)');
+      sqlStart.push(sqlQuote("value") + " )");
+      sqlEnd.push("?)");
       insertSqlValues.push(escapeSQLiteStatement(encoded));
-      var insertSql = sqlStart.join(' ') + sqlEnd.join(' ');
-      CFG.DEBUG && console.log('SQL for adding', insertSql, insertSqlValues);
-      tx.executeSql(insertSql, insertSqlValues, function (tx, data) {
+      var insertSql = sqlStart.join(" ") + sqlEnd.join(" ");
+      CFG.DEBUG && console.log("SQL for adding", insertSql, insertSqlValues);
+      tx.executeSql(insertSql, insertSqlValues, function(tx, data) {
         success(clonedKeyOrCurrentNumber);
-      }, function (tx, err) {
+      }, function(tx, err) {
         // Should occur for `add` operation
-        error(createDOMException('ConstraintError', err.message, err));
+        error(createDOMException("ConstraintError", err.message, err));
       });
       return undefined;
-    })["catch"](function (err) {
+    })["catch"](function(err) {
       function fail() {
         // Todo: Add a different error object here if `assignCurrentNumber`
         //  fails in reverting?
         error(err);
       }
 
-      if (typeof oldCn === 'number') {
+      if (typeof oldCn === "number") {
         assignCurrentNumber(tx, me, oldCn, fail, fail);
         return;
       }
@@ -8935,19 +8994,19 @@
     });
   };
 
-  IDBObjectStore.prototype.add = function (value
-  /* , key */
+  IDBObjectStore.prototype.add = function(value,
+                                          /* , key */
   ) {
     var me = this; // eslint-disable-next-line prefer-rest-params
 
     var key = arguments[1];
 
     if (!(me instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (arguments.length === 0) {
-      throw new TypeError('No value was specified');
+      throw new TypeError("No value was specified");
     }
 
     IDBObjectStore.__invalidStateIfDeleted(me);
@@ -8959,28 +9018,28 @@
     var request = me.transaction.__createRequest(me);
 
     var _me$__validateKeyAndV = me.__validateKeyAndValueAndCloneValue(value, key, false),
-        _me$__validateKeyAndV2 = _slicedToArray(_me$__validateKeyAndV, 2),
-        ky = _me$__validateKeyAndV2[0],
-        clonedValue = _me$__validateKeyAndV2[1];
+      _me$__validateKeyAndV2 = _slicedToArray(_me$__validateKeyAndV, 2),
+      ky = _me$__validateKeyAndV2[0],
+      clonedValue = _me$__validateKeyAndV2[1];
 
     IDBObjectStore.__storingRecordObjectStore(request, me, true, clonedValue, true, ky);
 
     return request;
   };
 
-  IDBObjectStore.prototype.put = function (value
-  /*, key */
+  IDBObjectStore.prototype.put = function(value,
+                                          /*, key */
   ) {
     var me = this; // eslint-disable-next-line prefer-rest-params
 
     var key = arguments[1];
 
     if (!(me instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (arguments.length === 0) {
-      throw new TypeError('No value was specified');
+      throw new TypeError("No value was specified");
     }
 
     IDBObjectStore.__invalidStateIfDeleted(me);
@@ -8992,42 +9051,42 @@
     var request = me.transaction.__createRequest(me);
 
     var _me$__validateKeyAndV3 = me.__validateKeyAndValueAndCloneValue(value, key, false),
-        _me$__validateKeyAndV4 = _slicedToArray(_me$__validateKeyAndV3, 2),
-        ky = _me$__validateKeyAndV4[0],
-        clonedValue = _me$__validateKeyAndV4[1];
+      _me$__validateKeyAndV4 = _slicedToArray(_me$__validateKeyAndV3, 2),
+      ky = _me$__validateKeyAndV4[0],
+      clonedValue = _me$__validateKeyAndV4[1];
 
     IDBObjectStore.__storingRecordObjectStore(request, me, true, clonedValue, false, ky);
 
     return request;
   };
 
-  IDBObjectStore.prototype.__overwrite = function (tx, key, cb, error) {
+  IDBObjectStore.prototype.__overwrite = function(tx, key, cb, error) {
     var me = this; // First try to delete if the record exists
     // Key.convertValueToKey(key); // Already run
 
-    var sql = 'DELETE FROM ' + escapeStoreNameForSQL(me.__currentName) + ' WHERE "key" = ?';
+    var sql = "DELETE FROM " + escapeStoreNameForSQL(me.__currentName) + " WHERE \"key\" = ?";
     var encodedKey = _encode(key);
-    tx.executeSql(sql, [escapeSQLiteStatement(encodedKey)], function (tx, data) {
-      CFG.DEBUG && console.log('Did the row with the', key, 'exist?', data.rowsAffected);
+    tx.executeSql(sql, [escapeSQLiteStatement(encodedKey)], function(tx, data) {
+      CFG.DEBUG && console.log("Did the row with the", key, "exist?", data.rowsAffected);
       cb(tx);
-    }, function (tx, err) {
+    }, function(tx, err) {
       error(err);
     });
   };
 
-  IDBObjectStore.__storingRecordObjectStore = function (request, store, invalidateCache, value, noOverwrite
-  /* , key */
+  IDBObjectStore.__storingRecordObjectStore = function(request, store, invalidateCache, value, noOverwrite,
+                                                       /* , key */
   ) {
     // eslint-disable-next-line prefer-rest-params
     var key = arguments[5];
 
-    store.transaction.__pushToQueue(request, function (tx, args, success, error) {
-      store.__deriveKey(tx, value, key, function (clonedKeyOrCurrentNumber, oldCn) {
-        encode(value, function (encoded) {
+    store.transaction.__pushToQueue(request, function(tx, args, success, error) {
+      store.__deriveKey(tx, value, key, function(clonedKeyOrCurrentNumber, oldCn) {
+        encode(value, function(encoded) {
           function insert(tx) {
-            store.__insertData(tx, encoded, value, clonedKeyOrCurrentNumber, oldCn, function () {
+            store.__insertData(tx, encoded, value, clonedKeyOrCurrentNumber, oldCn, function() {
               if (invalidateCache) {
-                store.__cursors.forEach(function (cursor) {
+                store.__cursors.forEach(function(cursor) {
                   cursor.__invalidateCache();
                 });
               }
@@ -9048,11 +9107,11 @@
     });
   };
 
-  IDBObjectStore.prototype.__get = function (query, getKey, getAll, count) {
+  IDBObjectStore.prototype.__get = function(query, getKey, getAll, count) {
     var me = this;
 
     if (count !== undefined) {
-      count = enforceRange(count, 'unsigned long');
+      count = enforceRange(count, "unsigned long");
     }
 
     IDBObjectStore.__invalidStateIfDeleted(me);
@@ -9060,13 +9119,13 @@
     IDBTransaction.__assertActive(me.transaction);
 
     var range = convertValueToKeyRange(query, !getAll);
-    var col = getKey ? 'key' : 'value';
-    var sql = ['SELECT', sqlQuote(col), 'FROM', escapeStoreNameForSQL(me.__currentName)];
+    var col = getKey ? "key" : "value";
+    var sql = ["SELECT", sqlQuote(col), "FROM", escapeStoreNameForSQL(me.__currentName)];
     var sqlValues = [];
 
     if (range !== undefined) {
-      sql.push('WHERE');
-      setSQLForKeyRange(range, sqlQuote('key'), sql, sqlValues);
+      sql.push("WHERE");
+      setSQLForKeyRange(range, sqlQuote("key"), sql, sqlValues);
     }
 
     if (!getAll) {
@@ -9075,17 +9134,17 @@
 
     if (count) {
       if (!Number.isFinite(count)) {
-        throw new TypeError('The count parameter must be a finite number');
+        throw new TypeError("The count parameter must be a finite number");
       }
 
-      sql.push('LIMIT', count);
+      sql.push("LIMIT", count);
     }
 
-    sql = sql.join(' ');
+    sql = sql.join(" ");
     return me.transaction.__addToTransactionQueue(function objectStoreGet(tx, args, success, error) {
-      CFG.DEBUG && console.log('Fetching', me.__currentName, sqlValues);
-      tx.executeSql(sql, sqlValues, function (tx, data) {
-        CFG.DEBUG && console.log('Fetched data', data);
+      CFG.DEBUG && console.log("Fetching", me.__currentName, sqlValues);
+      tx.executeSql(sql, sqlValues, function(tx, data) {
+        CFG.DEBUG && console.log("Fetched data", data);
         var ret;
 
         try {
@@ -9122,23 +9181,23 @@
         }
 
         success(ret);
-      }, function (tx, err) {
+      }, function(tx, err) {
         error(err);
       });
     }, undefined, me);
   };
 
-  IDBObjectStore.prototype.get = function (query) {
+  IDBObjectStore.prototype.get = function(query) {
     if (!arguments.length) {
-      throw new TypeError('A parameter was missing for `IDBObjectStore.get`.');
+      throw new TypeError("A parameter was missing for `IDBObjectStore.get`.");
     }
 
     return this.__get(query);
   };
 
-  IDBObjectStore.prototype.getKey = function (query) {
+  IDBObjectStore.prototype.getKey = function(query) {
     if (!arguments.length) {
-      throw new TypeError('A parameter was missing for `IDBObjectStore.getKey`.');
+      throw new TypeError("A parameter was missing for `IDBObjectStore.getKey`.");
     }
 
     return this.__get(query, true);
@@ -9146,35 +9205,35 @@
 
   IDBObjectStore.prototype.getAll = function
     /* query, count */
-  () {
+    () {
     // eslint-disable-next-line prefer-rest-params
     var _arguments = Array.prototype.slice.call(arguments),
-        query = _arguments[0],
-        count = _arguments[1];
+      query = _arguments[0],
+      count = _arguments[1];
 
     return this.__get(query, false, true, count);
   };
 
   IDBObjectStore.prototype.getAllKeys = function
     /* query, count */
-  () {
+    () {
     // eslint-disable-next-line prefer-rest-params
     var _arguments2 = Array.prototype.slice.call(arguments),
-        query = _arguments2[0],
-        count = _arguments2[1];
+      query = _arguments2[0],
+      count = _arguments2[1];
 
     return this.__get(query, true, true, count);
   };
 
-  IDBObjectStore.prototype["delete"] = function (query) {
+  IDBObjectStore.prototype["delete"] = function(query) {
     var me = this;
 
     if (!(this instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (!arguments.length) {
-      throw new TypeError('A parameter was missing for `IDBObjectStore.delete`.');
+      throw new TypeError("A parameter was missing for `IDBObjectStore.delete`.");
     }
 
     IDBObjectStore.__invalidStateIfDeleted(me);
@@ -9184,32 +9243,32 @@
     me.transaction.__assertWritable();
 
     var range = convertValueToKeyRange(query, true);
-    var sqlArr = ['DELETE FROM', escapeStoreNameForSQL(me.__currentName), 'WHERE'];
+    var sqlArr = ["DELETE FROM", escapeStoreNameForSQL(me.__currentName), "WHERE"];
     var sqlValues = [];
-    setSQLForKeyRange(range, sqlQuote('key'), sqlArr, sqlValues);
-    var sql = sqlArr.join(' ');
+    setSQLForKeyRange(range, sqlQuote("key"), sqlArr, sqlValues);
+    var sql = sqlArr.join(" ");
     return me.transaction.__addToTransactionQueue(function objectStoreDelete(tx, args, success, error) {
-      CFG.DEBUG && console.log('Deleting', me.__currentName, sqlValues);
-      tx.executeSql(sql, sqlValues, function (tx, data) {
-        CFG.DEBUG && console.log('Deleted from database', data.rowsAffected);
+      CFG.DEBUG && console.log("Deleting", me.__currentName, sqlValues);
+      tx.executeSql(sql, sqlValues, function(tx, data) {
+        CFG.DEBUG && console.log("Deleted from database", data.rowsAffected);
 
-        me.__cursors.forEach(function (cursor) {
+        me.__cursors.forEach(function(cursor) {
           cursor.__invalidateCache(); // Delete
 
         });
 
         success();
-      }, function (tx, err) {
+      }, function(tx, err) {
         error(err);
       });
     }, undefined, me);
   };
 
-  IDBObjectStore.prototype.clear = function () {
+  IDBObjectStore.prototype.clear = function() {
     var me = this;
 
     if (!(this instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     IDBObjectStore.__invalidStateIfDeleted(me);
@@ -9219,16 +9278,16 @@
     me.transaction.__assertWritable();
 
     return me.transaction.__addToTransactionQueue(function objectStoreClear(tx, args, success, error) {
-      tx.executeSql('DELETE FROM ' + escapeStoreNameForSQL(me.__currentName), [], function (tx, data) {
-        CFG.DEBUG && console.log('Cleared all records from database', data.rowsAffected);
+      tx.executeSql("DELETE FROM " + escapeStoreNameForSQL(me.__currentName), [], function(tx, data) {
+        CFG.DEBUG && console.log("Cleared all records from database", data.rowsAffected);
 
-        me.__cursors.forEach(function (cursor) {
+        me.__cursors.forEach(function(cursor) {
           cursor.__invalidateCache(); // Clear
 
         });
 
         success();
-      }, function (tx, err) {
+      }, function(tx, err) {
         error(err);
       });
     }, undefined, me);
@@ -9236,13 +9295,13 @@
 
   IDBObjectStore.prototype.count = function
     /* query */
-  () {
+    () {
     var me = this; // eslint-disable-next-line prefer-rest-params
 
     var query = arguments[0];
 
     if (!(me instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     IDBObjectStore.__invalidStateIfDeleted(me);
@@ -9250,25 +9309,25 @@
     IDBTransaction.__assertActive(me.transaction); // We don't need to add to cursors array since has the count parameter which won't cache
 
 
-    return IDBCursorWithValue.__createInstance(query, 'next', me, me, 'key', 'value', true).__request;
+    return IDBCursorWithValue.__createInstance(query, "next", me, me, "key", "value", true).__request;
   };
 
   IDBObjectStore.prototype.openCursor = function
     /* query, direction */
-  () {
+    () {
     var me = this; // eslint-disable-next-line prefer-rest-params
 
     var _arguments3 = Array.prototype.slice.call(arguments),
-        query = _arguments3[0],
-        direction = _arguments3[1];
+      query = _arguments3[0],
+      direction = _arguments3[1];
 
     if (!(me instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     IDBObjectStore.__invalidStateIfDeleted(me);
 
-    var cursor = IDBCursorWithValue.__createInstance(query, direction, me, me, 'key', 'value');
+    var cursor = IDBCursorWithValue.__createInstance(query, direction, me, me, "key", "value");
 
     me.__cursors.push(cursor);
 
@@ -9277,36 +9336,36 @@
 
   IDBObjectStore.prototype.openKeyCursor = function
     /* query, direction */
-  () {
+    () {
     var me = this;
 
     if (!(me instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     IDBObjectStore.__invalidStateIfDeleted(me); // eslint-disable-next-line prefer-rest-params
 
 
     var _arguments4 = Array.prototype.slice.call(arguments),
-        query = _arguments4[0],
-        direction = _arguments4[1];
+      query = _arguments4[0],
+      direction = _arguments4[1];
 
-    var cursor = IDBCursor.__createInstance(query, direction, me, me, 'key', 'key');
+    var cursor = IDBCursor.__createInstance(query, direction, me, me, "key", "key");
 
     me.__cursors.push(cursor);
 
     return cursor.__request;
   };
 
-  IDBObjectStore.prototype.index = function (indexName) {
+  IDBObjectStore.prototype.index = function(indexName) {
     var me = this;
 
     if (!(me instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (arguments.length === 0) {
-      throw new TypeError('No index name was specified');
+      throw new TypeError("No index name was specified");
     }
 
     IDBObjectStore.__invalidStateIfDeleted(me);
@@ -9316,7 +9375,7 @@
     var index = me.__indexes[indexName];
 
     if (!index || index.__deleted) {
-      throw createDOMException('NotFoundError', 'Index "' + indexName + '" does not exist on ' + me.__currentName);
+      throw createDOMException("NotFoundError", "Index \"" + indexName + "\" does not exist on " + me.__currentName);
     }
 
     if (!me.__indexHandles[indexName] || me.__indexes[indexName].__pendingDelete || me.__indexes[indexName].__deleted) {
@@ -9336,8 +9395,8 @@
    */
 
 
-  IDBObjectStore.prototype.createIndex = function (indexName, keyPath
-  /* , optionalParameters */
+  IDBObjectStore.prototype.createIndex = function(indexName, keyPath,
+                                                  /* , optionalParameters */
   ) {
     /* eslint-enable jsdoc/check-param-names */
     var me = this; // eslint-disable-next-line prefer-rest-params
@@ -9345,17 +9404,17 @@
     var optionalParameters = arguments[2];
 
     if (!(me instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     indexName = String(indexName); // W3C test within IDBObjectStore.js seems to accept string conversion
 
     if (arguments.length === 0) {
-      throw new TypeError('No index name was specified');
+      throw new TypeError("No index name was specified");
     }
 
     if (arguments.length === 1) {
-      throw new TypeError('No key path was specified');
+      throw new TypeError("No key path was specified");
     }
 
     IDBTransaction.__assertVersionChange(me.transaction);
@@ -9365,17 +9424,17 @@
     IDBTransaction.__assertActive(me.transaction);
 
     if (me.__indexes[indexName] && !me.__indexes[indexName].__deleted && !me.__indexes[indexName].__pendingDelete) {
-      throw createDOMException('ConstraintError', 'Index "' + indexName + '" already exists on ' + me.__currentName);
+      throw createDOMException("ConstraintError", "Index \"" + indexName + "\" already exists on " + me.__currentName);
     }
 
     keyPath = convertToSequenceDOMString(keyPath);
 
     if (!isValidKeyPath(keyPath)) {
-      throw createDOMException('SyntaxError', 'A valid keyPath must be supplied');
+      throw createDOMException("SyntaxError", "A valid keyPath must be supplied");
     }
 
     if (Array.isArray(keyPath) && optionalParameters && optionalParameters.multiEntry) {
-      throw createDOMException('InvalidAccessError', 'The keyPath argument was an array and the multiEntry option is true.');
+      throw createDOMException("InvalidAccessError", "The keyPath argument was an array and the multiEntry option is true.");
     }
 
     optionalParameters = optionalParameters || {};
@@ -9386,8 +9445,8 @@
       keyPath: keyPath,
       optionalParams: {
         unique: Boolean(optionalParameters.unique),
-        multiEntry: Boolean(optionalParameters.multiEntry)
-      }
+        multiEntry: Boolean(optionalParameters.multiEntry),
+      },
     };
 
     var index = IDBIndex.__createInstance(me, indexProperties);
@@ -9397,15 +9456,15 @@
     return index;
   };
 
-  IDBObjectStore.prototype.deleteIndex = function (name) {
+  IDBObjectStore.prototype.deleteIndex = function(name) {
     var me = this;
 
     if (!(me instanceof IDBObjectStore)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (arguments.length === 0) {
-      throw new TypeError('No index name was specified');
+      throw new TypeError("No index name was specified");
     }
 
     IDBTransaction.__assertVersionChange(me.transaction);
@@ -9417,17 +9476,17 @@
     var index = me.__indexes[name];
 
     if (!index) {
-      throw createDOMException('NotFoundError', 'Index "' + name + '" does not exist on ' + me.__currentName);
+      throw createDOMException("NotFoundError", "Index \"" + name + "\" does not exist on " + me.__currentName);
     }
 
     IDBIndex.__deleteIndex(me, index);
   };
 
   defineReadonlyOuterInterface(IDBObjectStore.prototype, readonlyProperties$1);
-  defineOuterInterface(IDBObjectStore.prototype, ['name']);
-  IDBObjectStore.prototype[Symbol.toStringTag] = 'IDBObjectStorePrototype';
-  Object.defineProperty(IDBObjectStore, 'prototype', {
-    writable: false
+  defineOuterInterface(IDBObjectStore.prototype, ["name"]);
+  IDBObjectStore.prototype[Symbol.toStringTag] = "IDBObjectStorePrototype";
+  Object.defineProperty(IDBObjectStore, "prototype", {
+    writable: false,
   });
 
   // Copyright Joyent, Inc. and other Node contributors.
@@ -9461,9 +9520,9 @@
     for (var i = parts.length - 1; i >= 0; i--) {
       var last = parts[i];
 
-      if (last === '.') {
+      if (last === ".") {
         parts.splice(i, 1);
-      } else if (last === '..') {
+      } else if (last === "..") {
         parts.splice(i, 1);
         up++;
       } else if (up) {
@@ -9475,7 +9534,7 @@
 
     if (allowAboveRoot) {
       for (; up--; up) {
-        parts.unshift('..');
+        parts.unshift("..");
       }
     }
 
@@ -9493,64 +9552,65 @@
 
 
   function resolve() {
-    var resolvedPath = '',
-        resolvedAbsolute = false;
+    var resolvedPath = "",
+      resolvedAbsolute = false;
 
     for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
-      var path = i >= 0 ? arguments[i] : '/'; // Skip empty and invalid entries
+      var path = i >= 0 ? arguments[i] : "/"; // Skip empty and invalid entries
 
-      if (typeof path !== 'string') {
-        throw new TypeError('Arguments to path.resolve must be strings');
+      if (typeof path !== "string") {
+        throw new TypeError("Arguments to path.resolve must be strings");
       } else if (!path) {
         continue;
       }
 
-      resolvedPath = path + '/' + resolvedPath;
-      resolvedAbsolute = path.charAt(0) === '/';
+      resolvedPath = path + "/" + resolvedPath;
+      resolvedAbsolute = path.charAt(0) === "/";
     } // At this point the path should be resolved to a full absolute path, but
     // handle relative paths to be safe (might happen when process.cwd() fails)
     // Normalize the path
 
 
-    resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
+    resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
       return !!p;
-    }), !resolvedAbsolute).join('/');
-    return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
+    }), !resolvedAbsolute).join("/");
+    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
   }
+
   // posix version
 
   function normalize(path) {
     var isPathAbsolute = isAbsolute(path),
-        trailingSlash = substr(path, -1) === '/'; // Normalize the path
+      trailingSlash = substr(path, -1) === "/"; // Normalize the path
 
-    path = normalizeArray(filter(path.split('/'), function (p) {
+    path = normalizeArray(filter(path.split("/"), function(p) {
       return !!p;
-    }), !isPathAbsolute).join('/');
+    }), !isPathAbsolute).join("/");
 
     if (!path && !isPathAbsolute) {
-      path = '.';
+      path = ".";
     }
 
     if (path && trailingSlash) {
-      path += '/';
+      path += "/";
     }
 
-    return (isPathAbsolute ? '/' : '') + path;
+    return (isPathAbsolute ? "/" : "") + path;
   }
 
   function isAbsolute(path) {
-    return path.charAt(0) === '/';
+    return path.charAt(0) === "/";
   } // posix version
 
   function join() {
     var paths = Array.prototype.slice.call(arguments, 0);
-    return normalize(filter(paths, function (p, index) {
-      if (typeof p !== 'string') {
-        throw new TypeError('Arguments to path.join must be strings');
+    return normalize(filter(paths, function(p, index) {
+      if (typeof p !== "string") {
+        throw new TypeError("Arguments to path.join must be strings");
       }
 
       return p;
-    }).join('/'));
+    }).join("/"));
   } // path.relative(from, to)
   // posix version
 
@@ -9562,21 +9622,21 @@
       var start = 0;
 
       for (; start < arr.length; start++) {
-        if (arr[start] !== '') break;
+        if (arr[start] !== "") break;
       }
 
       var end = arr.length - 1;
 
       for (; end >= 0; end--) {
-        if (arr[end] !== '') break;
+        if (arr[end] !== "") break;
       }
 
       if (start > end) return [];
       return arr.slice(start, end - start + 1);
     }
 
-    var fromParts = trim(from.split('/'));
-    var toParts = trim(to.split('/'));
+    var fromParts = trim(from.split("/"));
+    var toParts = trim(to.split("/"));
     var length = Math.min(fromParts.length, toParts.length);
     var samePartsLength = length;
 
@@ -9590,22 +9650,24 @@
     var outputParts = [];
 
     for (var i = samePartsLength; i < fromParts.length; i++) {
-      outputParts.push('..');
+      outputParts.push("..");
     }
 
     outputParts = outputParts.concat(toParts.slice(samePartsLength));
-    return outputParts.join('/');
+    return outputParts.join("/");
   }
-  var sep = '/';
-  var delimiter = ':';
+
+  var sep = "/";
+  var delimiter = ":";
+
   function dirname(path) {
     var result = splitPath(path),
-        root = result[0],
-        dir = result[1];
+      root = result[0],
+      dir = result[1];
 
     if (!root && !dir) {
       // No dirname whatsoever
-      return '.';
+      return ".";
     }
 
     if (dir) {
@@ -9615,6 +9677,7 @@
 
     return root + dir;
   }
+
   function basename(path, ext) {
     var f = splitPath(path)[2]; // TODO: make this comparison case-insensitive on windows?
 
@@ -9624,9 +9687,11 @@
 
     return f;
   }
+
   function extname(path) {
     return splitPath(path)[3];
   }
+
   var path = {
     extname: extname,
     basename: basename,
@@ -9637,7 +9702,7 @@
     join: join,
     isAbsolute: isAbsolute,
     normalize: normalize,
-    resolve: resolve
+    resolve: resolve,
   };
 
   function filter(xs, f) {
@@ -9652,15 +9717,16 @@
   } // String.prototype.substr - negative index don't work in IE8
 
 
-  var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
+  var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
     return str.substr(start, len);
-  } : function (str, start, len) {
+  } : function(str, start, len) {
     if (start < 0) start = str.length + start;
     return str.substr(start, len);
   };
 
-  var listeners = ['onabort', 'onclose', 'onerror', 'onversionchange'];
-  var readonlyProperties = ['name', 'version', 'objectStoreNames'];
+  var listeners = ["onabort", "onclose", "onerror", "onversionchange"];
+  var readonlyProperties = ["name", "version", "objectStoreNames"];
+
   /**
    * IDB Database Object.
    * @see http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#database-interface
@@ -9668,16 +9734,16 @@
    */
 
   function IDBDatabase() {
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
   var IDBDatabaseAlias = IDBDatabase;
 
-  IDBDatabase.__createInstance = function (db, name, oldVersion, version, storeProperties) {
+  IDBDatabase.__createInstance = function(db, name, oldVersion, version, storeProperties) {
     function IDBDatabase() {
       var _this = this;
 
-      this[Symbol.toStringTag] = 'IDBDatabase';
+      this[Symbol.toStringTag] = "IDBDatabase";
       defineReadonlyProperties(this, readonlyProperties);
       this.__db = db;
       this.__closePending = false;
@@ -9688,7 +9754,7 @@
       defineListenerProperties(this, listeners);
 
       this.__setOptions({
-        legacyOutputDidListenersThrowFlag: true // Event hook for IndexedB
+        legacyOutputDidListenersThrowFlag: true, // Event hook for IndexedB
 
       });
 
@@ -9709,7 +9775,7 @@
         // `IDBObjectStore.__createInstance` will convert to a boolean
         // when setting the store's `autoIncrement`.
 
-        ['autoInc', 'indexList'].forEach(function (prop) {
+        ["autoInc", "indexList"].forEach(function(prop) {
           itemCopy[prop] = JSON.parse(item[prop]);
         });
         itemCopy.idbdb = _this;
@@ -9733,7 +9799,7 @@
   };
 
   IDBDatabase.prototype = EventTargetFactory.createInstance();
-  IDBDatabase.prototype[Symbol.toStringTag] = 'IDBDatabasePrototype';
+  IDBDatabase.prototype[Symbol.toStringTag] = "IDBDatabasePrototype";
   /* eslint-disable jsdoc/check-param-names */
 
   /**
@@ -9743,8 +9809,8 @@
    * @returns {IDBObjectStore}
    */
 
-  IDBDatabase.prototype.createObjectStore = function (storeName
-  /* , createOptions */
+  IDBDatabase.prototype.createObjectStore = function(storeName,
+                                                     /* , createOptions */
   ) {
     /* eslint-enable jsdoc/check-param-names */
     // eslint-disable-next-line prefer-rest-params
@@ -9752,11 +9818,11 @@
     storeName = String(storeName); // W3C test within IDBObjectStore.js seems to accept string conversion
 
     if (!(this instanceof IDBDatabase)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (arguments.length === 0) {
-      throw new TypeError('No object store name was specified');
+      throw new TypeError("No object store name was specified");
     }
 
     IDBTransaction.__assertVersionChange(this.__versionTransaction); // this.__versionTransaction may not exist if called mistakenly by user in onsuccess
@@ -9768,21 +9834,21 @@
 
     createOptions = _objectSpread2({}, createOptions);
     var _createOptions = createOptions,
-        keyPath = _createOptions.keyPath;
+      keyPath = _createOptions.keyPath;
     keyPath = keyPath === undefined ? null : convertToSequenceDOMString(keyPath);
 
     if (keyPath !== null && !isValidKeyPath(keyPath)) {
-      throw createDOMException('SyntaxError', 'The keyPath argument contains an invalid key path.');
+      throw createDOMException("SyntaxError", "The keyPath argument contains an invalid key path.");
     }
 
     if (this.__objectStores[storeName] && !this.__objectStores[storeName].__pendingDelete) {
-      throw createDOMException('ConstraintError', 'Object store "' + storeName + '" already exists in ' + this.name);
+      throw createDOMException("ConstraintError", "Object store \"" + storeName + "\" already exists in " + this.name);
     }
 
     var autoInc = createOptions.autoIncrement;
 
-    if (autoInc && (keyPath === '' || Array.isArray(keyPath))) {
-      throw createDOMException('InvalidAccessError', 'With autoIncrement set, the keyPath argument must not be an array or empty string.');
+    if (autoInc && (keyPath === "" || Array.isArray(keyPath))) {
+      throw createDOMException("InvalidAccessError", "With autoIncrement set, the keyPath argument must not be an array or empty string.");
     }
     /** @name IDBObjectStoreProperties */
 
@@ -9792,7 +9858,7 @@
       keyPath: keyPath,
       autoInc: autoInc,
       indexList: {},
-      idbdb: this
+      idbdb: this,
     };
 
     var store = IDBObjectStore.__createInstance(storeProperties, this.__versionTransaction);
@@ -9807,13 +9873,13 @@
    */
 
 
-  IDBDatabase.prototype.deleteObjectStore = function (storeName) {
+  IDBDatabase.prototype.deleteObjectStore = function(storeName) {
     if (!(this instanceof IDBDatabase)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (arguments.length === 0) {
-      throw new TypeError('No object store name was specified');
+      throw new TypeError("No object store name was specified");
     }
 
     IDBTransaction.__assertVersionChange(this.__versionTransaction);
@@ -9825,15 +9891,15 @@
     var store = this.__objectStores[storeName];
 
     if (!store) {
-      throw createDOMException('NotFoundError', 'Object store "' + storeName + '" does not exist in ' + this.name);
+      throw createDOMException("NotFoundError", "Object store \"" + storeName + "\" does not exist in " + this.name);
     }
 
     IDBObjectStore.__deleteObjectStore(this, store);
   };
 
-  IDBDatabase.prototype.close = function () {
+  IDBDatabase.prototype.close = function() {
     if (!(this instanceof IDBDatabase)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     this.__closePending = true;
@@ -9852,23 +9918,23 @@
    */
 
 
-  IDBDatabase.prototype.transaction = function (storeNames
-  /* , mode */
+  IDBDatabase.prototype.transaction = function(storeNames,
+                                               /* , mode */
   ) {
     var _this2 = this;
 
     /* eslint-enable jsdoc/check-param-names */
     if (arguments.length === 0) {
-      throw new TypeError('You must supply a valid `storeNames` to `IDBDatabase.transaction`');
+      throw new TypeError("You must supply a valid `storeNames` to `IDBDatabase.transaction`");
     } // eslint-disable-next-line prefer-rest-params
 
 
     var mode = arguments[1];
     storeNames = isIterable(storeNames) // Creating new array also ensures sequence is passed by value: https://heycam.github.io/webidl/#idl-sequence
-    ? _toConsumableArray(new Set( // to be unique
-    convertToSequenceDOMString(storeNames) // iterables have `ToString` applied (and we convert to array for convenience)
-    )).sort() // must be sorted
-    : [convertToDOMString(storeNames)];
+      ? _toConsumableArray(new Set( // to be unique
+        convertToSequenceDOMString(storeNames), // iterables have `ToString` applied (and we convert to array for convenience)
+      )).sort() // must be sorted
+      : [convertToDOMString(storeNames)];
     /* (function () {
         throw new TypeError('You must supply a valid `storeNames` to `IDBDatabase.transaction`');
     }())); */
@@ -9880,30 +9946,30 @@
     // Even for readonly transactions, due to [issue 17](https://github.com/nolanlawson/node-websql/issues/17),
     //   we're not currently actually running the SQL requests in parallel.
 
-    mode = mode || 'readonly';
+    mode = mode || "readonly";
 
     IDBTransaction.__assertNotVersionChange(this.__versionTransaction);
 
     if (this.__closePending) {
-      throw createDOMException('InvalidStateError', 'An attempt was made to start a new transaction on a database connection that is not open');
+      throw createDOMException("InvalidStateError", "An attempt was made to start a new transaction on a database connection that is not open");
     }
 
     var objectStoreNames = DOMStringList.__createInstance();
 
-    storeNames.forEach(function (storeName) {
+    storeNames.forEach(function(storeName) {
       if (!_this2.objectStoreNames.contains(storeName)) {
-        throw createDOMException('NotFoundError', 'The "' + storeName + '" object store does not exist');
+        throw createDOMException("NotFoundError", "The \"" + storeName + "\" object store does not exist");
       }
 
       objectStoreNames.push(storeName);
     });
 
     if (storeNames.length === 0) {
-      throw createDOMException('InvalidAccessError', 'No valid object store names were specified');
+      throw createDOMException("InvalidAccessError", "No valid object store names were specified");
     }
 
-    if (mode !== 'readonly' && mode !== 'readwrite') {
-      throw new TypeError('Invalid transaction mode: ' + mode);
+    if (mode !== "readonly" && mode !== "readwrite") {
+      throw new TypeError("Invalid transaction mode: " + mode);
     } // Do not set transaction state to "inactive" yet (will be set after
     //   timeout on creating transaction instance):
     //   https://github.com/w3c/IndexedDB/issues/87
@@ -9917,9 +9983,9 @@
   }; // See https://github.com/w3c/IndexedDB/issues/192
 
 
-  IDBDatabase.prototype.throwIfUpgradeTransactionNull = function () {
+  IDBDatabase.prototype.throwIfUpgradeTransactionNull = function() {
     if (this.__upgradeTransaction === null) {
-      throw createDOMException('InvalidStateError', 'No upgrade transaction associated with database.');
+      throw createDOMException("InvalidStateError", "No upgrade transaction associated with database.");
     }
   }; // Todo __forceClose: Add tests for `__forceClose`
 
@@ -9930,38 +9996,38 @@
    */
 
 
-  IDBDatabase.prototype.__forceClose = function (msg) {
+  IDBDatabase.prototype.__forceClose = function(msg) {
     var me = this;
     me.close();
     var ct = 0;
 
-    me.__transactions.forEach(function (trans) {
-      trans.on__abort = function () {
+    me.__transactions.forEach(function(trans) {
+      trans.on__abort = function() {
         ct++;
 
         if (ct === me.__transactions.length) {
           // Todo __forceClose: unblock any pending `upgradeneeded` or `deleteDatabase` calls
-          var evt = createEvent('close');
-          setTimeout(function () {
+          var evt = createEvent("close");
+          setTimeout(function() {
             me.dispatchEvent(evt);
           });
         }
       };
 
-      trans.__abortTransaction(createDOMException('AbortError', 'The connection was force-closed: ' + (msg || '')));
+      trans.__abortTransaction(createDOMException("AbortError", "The connection was force-closed: " + (msg || "")));
     });
   };
 
   defineOuterInterface(IDBDatabase.prototype, listeners);
   defineReadonlyOuterInterface(IDBDatabase.prototype, readonlyProperties);
-  Object.defineProperty(IDBDatabase.prototype, 'constructor', {
+  Object.defineProperty(IDBDatabase.prototype, "constructor", {
     enumerable: false,
     writable: true,
     configurable: true,
-    value: IDBDatabase
+    value: IDBDatabase,
   });
-  Object.defineProperty(IDBDatabase, 'prototype', {
-    writable: false
+  Object.defineProperty(IDBDatabase, "prototype", {
+    writable: false,
   });
 
   var fs;
@@ -9971,11 +10037,11 @@
   };
 
   var getOrigin = function getOrigin() {
-    return (typeof location === "undefined" ? "undefined" : _typeof$1(location)) !== 'object' || !location ? 'null' : location.origin;
+    return (typeof location === "undefined" ? "undefined" : _typeof$1(location)) !== "object" || !location ? undefined : location.origin;
   };
 
   var hasNullOrigin = function hasNullOrigin() {
-    return CFG.checkOrigin !== false && getOrigin() === 'null';
+    return CFG.checkOrigin !== false && getOrigin() === "null";
   }; // Todo: This really should be process and tab-independent so the
   //  origin could vary; in the browser, this might be through a
   //  `SharedWorker`
@@ -9993,16 +10059,16 @@
     }
 
     var _queueItems$ = queueItems[0],
-        req = _queueItems$.req,
-        cb = _queueItems$.cb; // Keep in queue to prevent continuation
+      req = _queueItems$.req,
+      cb = _queueItems$.cb; // Keep in queue to prevent continuation
 
     function removeFromQueue() {
       queueItems.shift();
       processNextInConnectionQueue(name, origin);
     }
 
-    req.addEventListener('success', removeFromQueue);
-    req.addEventListener('error', removeFromQueue);
+    req.addEventListener("success", removeFromQueue);
+    req.addEventListener("error", removeFromQueue);
     cb(req);
   } // eslint-disable-next-line default-param-last
 
@@ -10017,7 +10083,7 @@
 
     connectionQueue[origin][name].push({
       req: req,
-      cb: cb
+      cb: cb,
     });
 
     if (connectionQueue[origin][name].length === 1) {
@@ -10035,56 +10101,56 @@
     };
 
     var connectionsClosed = function connectionsClosed() {
-      return openConnections.every(function (conn) {
+      return openConnections.every(function(conn) {
         return connectionIsClosed(conn);
       });
     };
 
-    return openConnections.reduce(function (promises, entry) {
+    return openConnections.reduce(function(promises, entry) {
       if (connectionIsClosed(entry)) {
         return promises;
       }
 
-      return promises.then(function () {
+      return promises.then(function() {
         if (connectionIsClosed(entry)) {
           // Prior onversionchange must have caused this connection to be closed
           return undefined;
         }
 
-        var e = new IDBVersionChangeEvent('versionchange', {
+        var e = new IDBVersionChangeEvent("versionchange", {
           oldVersion: oldVersion,
-          newVersion: newVersion
+          newVersion: newVersion,
         });
-        return new syncPromiseCommonjs(function (resolve) {
-          setTimeout(function () {
+        return new syncPromiseCommonjs(function(resolve) {
+          setTimeout(function() {
             entry.dispatchEvent(e); // No need to catch errors
 
             resolve();
           });
         });
       });
-    }, syncPromiseCommonjs.resolve()).then(function () {
+    }, syncPromiseCommonjs.resolve()).then(function() {
       if (connectionsClosed()) {
         return undefined;
       }
 
-      return new syncPromiseCommonjs(function (resolve) {
+      return new syncPromiseCommonjs(function(resolve) {
         var unblocking = {
           check: function check() {
             if (connectionsClosed()) {
               resolve();
             }
-          }
+          },
         };
-        var e = new IDBVersionChangeEvent('blocked', {
+        var e = new IDBVersionChangeEvent("blocked", {
           oldVersion: oldVersion,
-          newVersion: newVersion
+          newVersion: newVersion,
         });
-        setTimeout(function () {
+        setTimeout(function() {
           req.dispatchEvent(e); // No need to catch errors
 
           if (!connectionsClosed()) {
-            openConnections.forEach(function (connection) {
+            openConnections.forEach(function(connection) {
               if (!connectionIsClosed(connection)) {
                 connection.__unblocking = unblocking;
               }
@@ -10102,9 +10168,9 @@
   var nameCounter = 0;
 
   function getLatestCachedWebSQLVersion(name) {
-    return Object.keys(websqlDBCache[name]).map(function (version) {
+    return Object.keys(websqlDBCache[name]).map(function(version) {
       return Number(version);
-    }).reduce(function (prev, curr) {
+    }).reduce(function(prev, curr) {
       return curr > prev ? curr : prev;
     }, 0);
   }
@@ -10114,13 +10180,13 @@
   }
 
   function cleanupDatabaseResources(__openDatabase, name, escapedDatabaseName, databaseDeleted, dbError) {
-    var useMemoryDatabase = typeof CFG.memoryDatabase === 'string';
+    var useMemoryDatabase = typeof CFG.memoryDatabase === "string";
 
     if (useMemoryDatabase) {
       var latestSQLiteDBCached = websqlDBCache[name] ? getLatestCachedWebSQLDB(name) : null;
 
       if (!latestSQLiteDBCached) {
-        console.warn('Could not find a memory database instance to delete.');
+        console.warn("Could not find a memory database instance to delete.");
         databaseDeleted();
         return;
       }
@@ -10128,13 +10194,13 @@
       var _sqliteDB = latestSQLiteDBCached._db && latestSQLiteDBCached._db._db;
 
       if (!_sqliteDB || !_sqliteDB.close) {
-        console.error('The `openDatabase` implementation does not have the expected `._db._db.close` method for closing the database');
+        console.error("The `openDatabase` implementation does not have the expected `._db._db.close` method for closing the database");
         return;
       }
 
-      _sqliteDB.close(function (err) {
+      _sqliteDB.close(function(err) {
         if (err) {
-          console.warn('Error closing (destroying) memory database');
+          console.warn("Error closing (destroying) memory database");
           return;
         }
 
@@ -10145,12 +10211,12 @@
     }
 
     if (fs && CFG.deleteDatabaseFiles !== false) {
-      fs.unlink(path.join(CFG.databaseBasePath || '', escapedDatabaseName), function (err) {
-        if (err && err.code !== 'ENOENT') {
+      fs.unlink(path.join(CFG.databaseBasePath || "", escapedDatabaseName), function(err) {
+        if (err && err.code !== "ENOENT") {
           // Ignore if file is already deleted
           dbError({
             code: 0,
-            message: 'Error removing database file: ' + escapedDatabaseName + ' ' + err
+            message: "Error removing database file: " + escapedDatabaseName + " " + err,
           });
           return;
         }
@@ -10160,38 +10226,39 @@
       return;
     }
 
-    var sqliteDB = __openDatabase(path.join(CFG.databaseBasePath || '', escapedDatabaseName), 1, name, CFG.DEFAULT_DB_SIZE);
+    __openDatabase(path.join(CFG.databaseBasePath || "", escapedDatabaseName), 1, name, CFG.DEFAULT_DB_SIZE, (sqliteDB) => {
+      sqliteDB.transaction(function(tx) {
+        tx.executeSql("SELECT \"name\" FROM __sys__", [], function(tx, data) {
+          var tables = data.rows;
 
-    sqliteDB.transaction(function (tx) {
-      tx.executeSql('SELECT "name" FROM __sys__', [], function (tx, data) {
-        var tables = data.rows;
-
-        (function deleteTables(i) {
-          if (i >= tables.length) {
-            // If all tables are deleted, delete the housekeeping tables
-            tx.executeSql('DROP TABLE IF EXISTS __sys__', [], function () {
-              databaseDeleted();
-            }, dbError);
-          } else {
-            // Delete all tables in this database, maintained in the sys table
-            tx.executeSql('DROP TABLE ' + escapeStoreNameForSQL(unescapeSQLiteResponse( // Avoid double-escaping
-            tables.item(i).name)), [], function () {
-              deleteTables(i + 1);
-            }, function () {
-              deleteTables(i + 1);
-            });
-          }
-        })(0);
-      }, function (e) {
-        // __sys__ table does not exist, but that does not mean delete did not happen
-        databaseDeleted();
+          (function deleteTables(i) {
+            if (i >= tables.length) {
+              // If all tables are deleted, delete the housekeeping tables
+              tx.executeSql("DROP TABLE IF EXISTS __sys__", [], function() {
+                databaseDeleted();
+              }, dbError);
+            } else {
+              // Delete all tables in this database, maintained in the sys table
+              tx.executeSql("DROP TABLE " + escapeStoreNameForSQL(unescapeSQLiteResponse( // Avoid double-escaping
+                tables.item(i).name)), [], function() {
+                deleteTables(i + 1);
+              }, function() {
+                deleteTables(i + 1);
+              });
+            }
+          })(0);
+        }, function(e) {
+          // __sys__ table does not exist, but that does not mean delete did not happen
+          databaseDeleted();
+        });
       });
     });
   }
+
   /**
-  * @callback CreateSysDBSuccessCallback
-  * @returns {void}
-  */
+   * @callback CreateSysDBSuccessCallback
+   * @returns {void}
+   */
 
   /**
    * Creates the sysDB to keep track of version numbers for databases.
@@ -10205,26 +10272,29 @@
   function createSysDB(__openDatabase, success, failure) {
     function sysDbCreateError(tx, err) {
       err = webSQLErrback(err || tx);
-      CFG.DEBUG && console.log('Error in sysdb transaction - when creating dbVersions', err);
+      CFG.DEBUG && console.log("Error in sysdb transaction - when creating dbVersions", err);
       failure(err);
     }
 
     if (sysdb) {
       success();
     } else {
-      sysdb = __openDatabase(typeof CFG.memoryDatabase === 'string' ? CFG.memoryDatabase : path.join(typeof CFG.sysDatabaseBasePath === 'string' ? CFG.sysDatabaseBasePath : CFG.databaseBasePath || '', '__sysdb__' + (CFG.addSQLiteExtension !== false ? '.sqlite' : '')), 1, 'System Database', CFG.DEFAULT_DB_SIZE);
-      sysdb.transaction(function (systx) {
-        systx.executeSql('CREATE TABLE IF NOT EXISTS dbVersions (name BLOB, version INT);', [], function (systx) {
-          if (!CFG.useSQLiteIndexes) {
-            success();
-            return;
-          }
+      __openDatabase(typeof CFG.memoryDatabase === "string" ? CFG.memoryDatabase : path.join(typeof CFG.sysDatabaseBasePath === "string" ? CFG.sysDatabaseBasePath : CFG.databaseBasePath || "", "__sysdb__" + (CFG.addSQLiteExtension !== false ? ".sqlite" : "")), 1, "System Database", CFG.DEFAULT_DB_SIZE, (sysdb_) => {
+        sysdb = sysdb_;
+        sysdb.transaction(function(systx) {
+          systx.executeSql("CREATE TABLE IF NOT EXISTS dbVersions (name BLOB, version INT);", [], function(systx) {
+            if (!CFG.useSQLiteIndexes) {
+              success();
+              return;
+            }
 
-          systx.executeSql('CREATE INDEX IF NOT EXISTS dbvname ON dbVersions(name)', [], success, sysDbCreateError);
+            systx.executeSql("CREATE INDEX IF NOT EXISTS dbvname ON dbVersions(name)", [], success, sysDbCreateError);
+          }, sysDbCreateError);
         }, sysDbCreateError);
-      }, sysDbCreateError);
+      });
     }
   }
+
   /**
    * IDBFactory Class.
    * @see https://w3c.github.io/IndexedDB/#idl-def-IDBFactory
@@ -10233,14 +10303,14 @@
 
 
   function IDBFactory() {
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
   var IDBFactoryAlias = IDBFactory;
 
-  IDBFactory.__createInstance = function () {
+  IDBFactory.__createInstance = function() {
     function IDBFactory() {
-      this[Symbol.toStringTag] = 'IDBFactory';
+      this[Symbol.toStringTag] = "IDBFactory";
       this.__connections = {};
     }
 
@@ -10258,47 +10328,47 @@
    */
 
 
-  IDBFactory.prototype.open = function (name
-  /* , version */
+  IDBFactory.prototype.open = function(name,
+                                       /* , version */
   ) {
     /* eslint-enable jsdoc/check-param-names */
     var me = this;
 
     if (!(me instanceof IDBFactory)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     } // eslint-disable-next-line prefer-rest-params
 
 
     var version = arguments[1];
 
     if (arguments.length === 0) {
-      throw new TypeError('Database name is required');
+      throw new TypeError("Database name is required");
     }
 
     if (version !== undefined) {
-      version = enforceRange(version, 'unsigned long long');
+      version = enforceRange(version, "unsigned long long");
 
       if (version === 0) {
-        throw new TypeError('Version cannot be 0');
+        throw new TypeError("Version cannot be 0");
       }
     }
 
     if (hasNullOrigin()) {
-      throw createDOMException('SecurityError', 'Cannot open an IndexedDB database from an opaque origin.');
+      throw createDOMException("SecurityError", "Cannot open an IndexedDB database from an opaque origin.");
     }
 
     var req = IDBOpenDBRequest.__createInstance();
 
     var calledDbCreateError = false;
 
-    if (CFG.autoName && name === '') {
-      name = 'autoNamedDatabase_' + nameCounter++;
+    if (CFG.autoName && name === "") {
+      name = "autoNamedDatabase_" + nameCounter++;
     }
 
     name = String(name); // cast to a string
 
     var sqlSafeName = escapeSQLiteStatement(name);
-    var useMemoryDatabase = typeof CFG.memoryDatabase === 'string';
+    var useMemoryDatabase = typeof CFG.memoryDatabase === "string";
     var useDatabaseCache = CFG.cacheDatabaseInstances !== false || useMemoryDatabase;
     var escapedDatabaseName; // eslint-disable-next-line no-useless-catch
 
@@ -10316,9 +10386,9 @@
       err = err ? webSQLErrback(err) : tx;
       calledDbCreateError = true; // Re: why bubbling here (and how cancelable is only really relevant for `window.onerror`) see: https://github.com/w3c/IndexedDB/issues/86
 
-      var evt = createEvent('error', err, {
+      var evt = createEvent("error", err, {
         bubbles: true,
-        cancelable: true
+        cancelable: true,
       });
       req.__done = true;
       req.__error = err;
@@ -10328,7 +10398,7 @@
     }
 
     function setupDatabase(tx, db, oldVersion) {
-      tx.executeSql('SELECT "name", "keyPath", "autoInc", "indexList" FROM __sys__', [], function (tx, data) {
+      tx.executeSql("SELECT \"name\", \"keyPath\", \"autoInc\", \"indexList\" FROM __sys__", [], function(tx, data) {
         function finishRequest() {
           req.__result = connection;
           req.__done = true;
@@ -10345,27 +10415,27 @@
         if (oldVersion < version) {
           var openConnections = me.__connections[name].slice(0, -1);
 
-          triggerAnyVersionChangeAndBlockedEvents(openConnections, req, oldVersion, version).then(function () {
+          triggerAnyVersionChangeAndBlockedEvents(openConnections, req, oldVersion, version).then(function() {
             // DB Upgrade in progress
             var sysdbFinishedCb = function sysdbFinishedCb(systx, err, cb) {
               if (err) {
                 try {
-                  systx.executeSql('ROLLBACK', [], cb, cb);
+                  systx.executeSql("ROLLBACK", [], cb, cb);
                 } catch (er) {
                   // Browser may fail with expired transaction above so
                   //     no choice but to manually revert
-                  sysdb.transaction(function (systx) {
+                  sysdb.transaction(function(systx) {
                     function reportError(msg) {
-                      throw new Error('Unable to roll back upgrade transaction!' + (msg || ''));
+                      throw new Error("Unable to roll back upgrade transaction!" + (msg || ""));
                     } // Attempt to revert
 
 
                     if (oldVersion === 0) {
-                      systx.executeSql('DELETE FROM dbVersions WHERE "name" = ?', [sqlSafeName], function () {
+                      systx.executeSql("DELETE FROM dbVersions WHERE \"name\" = ?", [sqlSafeName], function() {
                         cb(reportError); // eslint-disable-line promise/no-callback-in-promise
                       }, reportError);
                     } else {
-                      systx.executeSql('UPDATE dbVersions SET "version" = ? WHERE "name" = ?', [oldVersion, sqlSafeName], cb, reportError);
+                      systx.executeSql("UPDATE dbVersions SET \"version\" = ? WHERE \"name\" = ?", [oldVersion, sqlSafeName], cb, reportError);
                     }
                   });
                 }
@@ -10377,23 +10447,23 @@
               cb(); // eslint-disable-line promise/no-callback-in-promise
             };
 
-            sysdb.transaction(function (systx) {
+            sysdb.transaction(function(systx) {
               function versionSet() {
-                var e = new IDBVersionChangeEvent('upgradeneeded', {
+                var e = new IDBVersionChangeEvent("upgradeneeded", {
                   oldVersion: oldVersion,
-                  newVersion: version
+                  newVersion: version,
                 });
                 req.__result = connection;
-                connection.__upgradeTransaction = req.__transaction = req.__result.__versionTransaction = IDBTransaction.__createInstance(req.__result, req.__result.objectStoreNames, 'versionchange');
+                connection.__upgradeTransaction = req.__transaction = req.__result.__versionTransaction = IDBTransaction.__createInstance(req.__result, req.__result.objectStoreNames, "versionchange");
                 req.__done = true;
 
                 req.transaction.__addNonRequestToTransactionQueue(function onupgradeneeded(tx, args, finished, error) {
                   req.dispatchEvent(e);
 
                   if (e.__legacyOutputDidListenersThrowError) {
-                    logError('Error', 'An error occurred in an upgradeneeded handler attached to request chain', e.__legacyOutputDidListenersThrowError); // We do nothing else with this error as per spec
+                    logError("Error", "An error occurred in an upgradeneeded handler attached to request chain", e.__legacyOutputDidListenersThrowError); // We do nothing else with this error as per spec
 
-                    req.transaction.__abortTransaction(createDOMException('AbortError', 'A request was aborted.'));
+                    req.transaction.__abortTransaction(createDOMException("AbortError", "A request was aborted."));
 
                     return;
                   }
@@ -10401,18 +10471,18 @@
                   finished();
                 });
 
-                req.transaction.on__beforecomplete = function (ev) {
+                req.transaction.on__beforecomplete = function(ev) {
                   connection.__upgradeTransaction = null;
                   req.__result.__versionTransaction = null;
-                  sysdbFinishedCb(systx, false, function () {
-                    req.transaction.__transFinishedCb(false, function () {
+                  sysdbFinishedCb(systx, false, function() {
+                    req.transaction.__transFinishedCb(false, function() {
                       ev.complete();
                       req.__transaction = null;
                     });
                   });
                 };
 
-                req.transaction.on__preabort = function () {
+                req.transaction.on__preabort = function() {
                   connection.__upgradeTransaction = null; // We ensure any cache is deleted before any request error events fire and try to reopen
 
                   if (useDatabaseCache) {
@@ -10422,15 +10492,15 @@
                   }
                 };
 
-                req.transaction.on__abort = function () {
+                req.transaction.on__abort = function() {
                   req.__transaction = null; // `readyState` and `result` will be reset anyways by `dbCreateError` but we follow spec.
 
                   req.__result = undefined;
                   req.__done = false;
                   connection.close();
-                  setTimeout(function () {
-                    var err = createDOMException('AbortError', 'The upgrade transaction was aborted.');
-                    sysdbFinishedCb(systx, err, function (reportError) {
+                  setTimeout(function() {
+                    var err = createDOMException("AbortError", "The upgrade transaction was aborted.");
+                    sysdbFinishedCb(systx, err, function(reportError) {
                       if (oldVersion === 0) {
                         cleanupDatabaseResources(me.__openDatabase, name, escapedDatabaseName, dbCreateError.bind(null, err), reportError || dbCreateError);
                         return;
@@ -10441,10 +10511,10 @@
                   });
                 };
 
-                req.transaction.on__complete = function () {
+                req.transaction.on__complete = function() {
                   if (req.__result.__closePending) {
                     req.__transaction = null;
-                    var err = createDOMException('AbortError', 'The connection has been closed.');
+                    var err = createDOMException("AbortError", "The connection has been closed.");
                     dbCreateError(err);
                     return;
                   } // Since this is running directly after `IDBTransaction.complete`,
@@ -10462,17 +10532,17 @@
 
                   finishRequest();
                   req.__transaction = null;
-                  var e = createEvent('success');
+                  var e = createEvent("success");
                   req.dispatchEvent(e); // });
                 };
               }
 
               if (oldVersion === 0) {
-                systx.executeSql('INSERT INTO dbVersions VALUES (?,?)', [sqlSafeName, version], versionSet, dbCreateError);
+                systx.executeSql("INSERT INTO dbVersions VALUES (?,?)", [sqlSafeName, version], versionSet, dbCreateError);
               } else {
-                systx.executeSql('UPDATE dbVersions SET "version" = ? WHERE "name" = ?', [version, sqlSafeName], versionSet, dbCreateError);
+                systx.executeSql("UPDATE dbVersions SET \"version\" = ? WHERE \"name\" = ?", [version, sqlSafeName], versionSet, dbCreateError);
               }
-            }, dbCreateError, null, function (currentTask, err, done, rollback, commit) {
+            }, dbCreateError, null, function(currentTask, err, done, rollback, commit) {
               if (currentTask.readOnly || err) {
                 return true;
               }
@@ -10488,13 +10558,13 @@
               return false;
             });
             return undefined;
-          })["catch"](function (err) {
-            console.log('Error within `triggerAnyVersionChangeAndBlockedEvents`');
+          })["catch"](function(err) {
+            console.log("Error within `triggerAnyVersionChangeAndBlockedEvents`");
             throw err;
           });
         } else {
           finishRequest();
-          var e = createEvent('success');
+          var e = createEvent("success");
           req.dispatchEvent(e);
         }
       }, dbCreateError);
@@ -10506,8 +10576,7 @@
       if ((useMemoryDatabase || useDatabaseCache) && name in websqlDBCache && websqlDBCache[name][version]) {
         db = websqlDBCache[name][version];
       } else {
-        db = me.__openDatabase(useMemoryDatabase ? CFG.memoryDatabase : path.join(CFG.databaseBasePath || '', escapedDatabaseName), 1, name, CFG.DEFAULT_DB_SIZE);
-
+        db = me.__openDatabase(useMemoryDatabase ? CFG.memoryDatabase : path.join(CFG.databaseBasePath || "", escapedDatabaseName), 1, name, CFG.DEFAULT_DB_SIZE);
         if (useDatabaseCache) {
           if (!(name in websqlDBCache)) {
             websqlDBCache[name] = {};
@@ -10522,10 +10591,10 @@
       }
 
       if (oldVersion > version) {
-        var err = createDOMException('VersionError', 'An attempt was made to open a database using a lower version than the existing version.', version);
+        var err = createDOMException("VersionError", "An attempt was made to open a database using a lower version than the existing version.", version);
 
         if (useDatabaseCache) {
-          setTimeout(function () {
+          setTimeout(function() {
             dbCreateError(err);
           });
         } else {
@@ -10535,8 +10604,8 @@
         return;
       }
 
-      db.transaction(function (tx) {
-        tx.executeSql('CREATE TABLE IF NOT EXISTS __sys__ (name BLOB, keyPath BLOB, autoInc BOOLEAN, indexList BLOB, currNum INTEGER)', [], function () {
+      db.transaction(function(tx) {
+        tx.executeSql("CREATE TABLE IF NOT EXISTS __sys__ (name BLOB, keyPath BLOB, autoInc BOOLEAN, indexList BLOB, currNum INTEGER)", [], function() {
           function setup() {
             setupDatabase(tx, db, oldVersion);
           }
@@ -10546,41 +10615,41 @@
             return;
           }
 
-          tx.executeSql('CREATE INDEX IF NOT EXISTS sysname ON __sys__(name)', [], setup, dbCreateError);
+          tx.executeSql("CREATE INDEX IF NOT EXISTS sysname ON __sys__(name)", [], setup, dbCreateError);
         }, dbCreateError);
       }, dbCreateError);
     }
 
     addRequestToConnectionQueue(req, name,
-    /* origin */
-    undefined, function (req) {
-      var latestCachedVersion;
+      /* origin */
+      undefined, function(req) {
+        var latestCachedVersion;
 
-      if (useDatabaseCache) {
-        if (!(name in websqlDBCache)) {
-          websqlDBCache[name] = {};
-        }
+        if (useDatabaseCache) {
+          if (!(name in websqlDBCache)) {
+            websqlDBCache[name] = {};
+          }
 
-        latestCachedVersion = getLatestCachedWebSQLVersion(name);
-      }
+          latestCachedVersion = getLatestCachedWebSQLVersion(name);
+        }
 
-      if (latestCachedVersion) {
-        openDB(latestCachedVersion);
-      } else {
-        createSysDB(me.__openDatabase, function () {
-          sysdb.readTransaction(function (sysReadTx) {
-            sysReadTx.executeSql('SELECT "version" FROM dbVersions WHERE "name" = ?', [sqlSafeName], function (sysReadTx, data) {
-              if (data.rows.length === 0) {
-                // Database with this name does not exist
-                openDB(0);
-              } else {
-                openDB(data.rows.item(0).version);
-              }
+        if (latestCachedVersion) {
+          openDB(latestCachedVersion);
+        } else {
+          createSysDB(me.__openDatabase, function() {
+            sysdb.readTransaction(function(sysReadTx) {
+              sysReadTx.executeSql("SELECT \"version\" FROM dbVersions WHERE \"name\" = ?", [sqlSafeName], function(sysReadTx, data) {
+                if (data.rows.length === 0) {
+                  // Database with this name does not exist
+                  openDB(0);
+                } else {
+                  openDB(data.rows.item(0).version);
+                }
+              }, dbCreateError);
             }, dbCreateError);
           }, dbCreateError);
-        }, dbCreateError);
-      }
-    });
+        }
+      });
     return req;
   };
   /**
@@ -10590,19 +10659,19 @@
    */
 
 
-  IDBFactory.prototype.deleteDatabase = function (name) {
+  IDBFactory.prototype.deleteDatabase = function(name) {
     var me = this;
 
     if (!(me instanceof IDBFactory)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (arguments.length === 0) {
-      throw new TypeError('Database name is required');
+      throw new TypeError("Database name is required");
     }
 
     if (hasNullOrigin()) {
-      throw createDOMException('SecurityError', 'Cannot delete an IndexedDB database from an opaque origin.');
+      throw createDOMException("SecurityError", "Cannot delete an IndexedDB database from an opaque origin.");
     }
 
     name = String(name); // cast to a string
@@ -10616,7 +10685,7 @@
       throw err; // throw new TypeError('You have supplied a database name which does not match the currently supported configuration, possibly due to a length limit enforced for Node compatibility.');
     }
 
-    var useMemoryDatabase = typeof CFG.memoryDatabase === 'string';
+    var useMemoryDatabase = typeof CFG.memoryDatabase === "string";
     var useDatabaseCache = CFG.cacheDatabaseInstances !== false || useMemoryDatabase;
 
     var req = IDBOpenDBRequest.__createInstance();
@@ -10637,15 +10706,15 @@
       }
 
       err = webSQLErrback(err || tx);
-      sysdbFinishedCbDelete(true, function () {
+      sysdbFinishedCbDelete(true, function() {
         req.__done = true;
         req.__error = err;
         req.__result = undefined; // Must be undefined if an error per `result` getter
         // Re: why bubbling here (and how cancelable is only really relevant for `window.onerror`) see: https://github.com/w3c/IndexedDB/issues/86
 
-        var e = createEvent('error', err, {
+        var e = createEvent("error", err, {
           bubbles: true,
-          cancelable: true
+          cancelable: true,
         });
         req.dispatchEvent(e);
         calledDBError = true;
@@ -10653,90 +10722,90 @@
     }
 
     addRequestToConnectionQueue(req, name,
-    /* origin */
-    undefined, function (req) {
-      createSysDB(me.__openDatabase, function () {
-        // function callback (cb) { cb(); }
-        // callback(function () {
-        function completeDatabaseDelete() {
-          req.__result = undefined;
-          req.__done = true;
-          var e = new IDBVersionChangeEvent('success', {
-            oldVersion: version,
-            newVersion: null
-          });
-          req.dispatchEvent(e);
-        }
-
-        function databaseDeleted() {
-          sysdbFinishedCbDelete(false, function () {
-            if (useDatabaseCache && name in websqlDBCache) {
-              delete websqlDBCache[name]; // New calls will treat as though never existed
-            }
+      /* origin */
+      undefined, function(req) {
+        createSysDB(me.__openDatabase, function() {
+          // function callback (cb) { cb(); }
+          // callback(function () {
+          function completeDatabaseDelete() {
+            req.__result = undefined;
+            req.__done = true;
+            var e = new IDBVersionChangeEvent("success", {
+              oldVersion: version,
+              newVersion: null,
+            });
+            req.dispatchEvent(e);
+          }
 
-            delete me.__connections[name];
-            completeDatabaseDelete();
-          });
-        }
+          function databaseDeleted() {
+            sysdbFinishedCbDelete(false, function() {
+              if (useDatabaseCache && name in websqlDBCache) {
+                delete websqlDBCache[name]; // New calls will treat as though never existed
+              }
 
-        sysdb.readTransaction(function (sysReadTx) {
-          sysReadTx.executeSql('SELECT "version" FROM dbVersions WHERE "name" = ?', [sqlSafeName], function (sysReadTx, data) {
-            if (data.rows.length === 0) {
+              delete me.__connections[name];
               completeDatabaseDelete();
-              return undefined;
-            }
+            });
+          }
 
-            var _data$rows$item = data.rows.item(0);
-
-            version = _data$rows$item.version;
-            var openConnections = me.__connections[name] || [];
-            triggerAnyVersionChangeAndBlockedEvents(openConnections, req, version, null).then(function () {
-              // eslint-disable-line promise/catch-or-return
-              // Since we need two databases which can't be in a single transaction, we
-              //  do this deleting from `dbVersions` first since the `__sys__` deleting
-              //  only impacts file memory whereas this one is critical for avoiding it
-              //  being found via `open` or `databases`; however, we will
-              //  avoid committing anyways until all deletions are made and rollback the
-              //  `dbVersions` change if they fail
-              sysdb.transaction(function (systx) {
-                systx.executeSql('DELETE FROM dbVersions WHERE "name" = ? ', [sqlSafeName], function () {
-                  // Todo: We should also check whether `dbVersions` is empty and if so, delete upon
-                  //    `deleteDatabaseFiles` config. We also ought to do this when aborting (see
-                  //    above code with `DELETE FROM dbVersions`)
-                  cleanupDatabaseResources(me.__openDatabase, name, escapedDatabaseName, databaseDeleted, dbError);
-                }, dbError);
-              }, dbError, null, function (currentTask, err, done, rollback, commit) {
-                if (currentTask.readOnly || err) {
-                  return true;
-                }
+          sysdb.readTransaction(function(sysReadTx) {
+            sysReadTx.executeSql("SELECT \"version\" FROM dbVersions WHERE \"name\" = ?", [sqlSafeName], function(sysReadTx, data) {
+              if (data.rows.length === 0) {
+                completeDatabaseDelete();
+                return undefined;
+              }
 
-                sysdbFinishedCbDelete = function sysdbFinishedCbDelete(err, cb) {
-                  if (err) {
-                    rollback(err, cb);
-                  } else {
-                    commit(cb);
+              var _data$rows$item = data.rows.item(0);
+
+              version = _data$rows$item.version;
+              var openConnections = me.__connections[name] || [];
+              triggerAnyVersionChangeAndBlockedEvents(openConnections, req, version, null).then(function() {
+                // eslint-disable-line promise/catch-or-return
+                // Since we need two databases which can't be in a single transaction, we
+                //  do this deleting from `dbVersions` first since the `__sys__` deleting
+                //  only impacts file memory whereas this one is critical for avoiding it
+                //  being found via `open` or `databases`; however, we will
+                //  avoid committing anyways until all deletions are made and rollback the
+                //  `dbVersions` change if they fail
+                sysdb.transaction(function(systx) {
+                  systx.executeSql("DELETE FROM dbVersions WHERE \"name\" = ? ", [sqlSafeName], function() {
+                    // Todo: We should also check whether `dbVersions` is empty and if so, delete upon
+                    //    `deleteDatabaseFiles` config. We also ought to do this when aborting (see
+                    //    above code with `DELETE FROM dbVersions`)
+                    cleanupDatabaseResources(me.__openDatabase, name, escapedDatabaseName, databaseDeleted, dbError);
+                  }, dbError);
+                }, dbError, null, function(currentTask, err, done, rollback, commit) {
+                  if (currentTask.readOnly || err) {
+                    return true;
                   }
-                };
 
-                return false;
-              });
+                  sysdbFinishedCbDelete = function sysdbFinishedCbDelete(err, cb) {
+                    if (err) {
+                      rollback(err, cb);
+                    } else {
+                      commit(cb);
+                    }
+                  };
+
+                  return false;
+                });
+                return undefined;
+              }, dbError);
               return undefined;
             }, dbError);
-            return undefined;
-          }, dbError);
-        });
-      }, dbError);
-    });
+          });
+        }, dbError);
+      });
     return req;
   };
 
-  IDBFactory.prototype.cmp = function (key1, key2) {
+  IDBFactory.prototype.cmp = function(key1, key2) {
     if (!(this instanceof IDBFactory)) {
-      throw new TypeError('Illegal invocation');
+      throw new TypeError("Illegal invocation");
     }
 
     if (arguments.length < 2) {
-      throw new TypeError('You must provide two keys to be compared');
+      throw new TypeError("You must provide two keys to be compared");
     } // We use encoding facilities already built for proper sorting;
     //   the following "conversions" are for validation only
 
@@ -10746,23 +10815,23 @@
     return cmp(key1, key2);
   };
   /**
-  * May return outdated information if a database has since been deleted.
-  * @see https://github.com/w3c/IndexedDB/pull/240/files
-  * @returns {Promise<string[]>}
-  */
+   * May return outdated information if a database has since been deleted.
+   * @see https://github.com/w3c/IndexedDB/pull/240/files
+   * @returns {Promise<string[]>}
+   */
 
 
-  IDBFactory.prototype.databases = function () {
+  IDBFactory.prototype.databases = function() {
     var me = this;
     var calledDbCreateError = false;
-    return new Promise(function (resolve, reject) {
+    return new Promise(function(resolve, reject) {
       // eslint-disable-line promise/avoid-new
       if (!(me instanceof IDBFactory)) {
-        throw new TypeError('Illegal invocation');
+        throw new TypeError("Illegal invocation");
       }
 
       if (hasNullOrigin()) {
-        throw createDOMException('SecurityError', 'Cannot get IndexedDB database names from an opaque origin.');
+        throw createDOMException("SecurityError", "Cannot get IndexedDB database names from an opaque origin.");
       }
 
       function dbGetDatabaseNamesError(tx, err) {
@@ -10775,19 +10844,19 @@
         reject(err);
       }
 
-      createSysDB(me.__openDatabase, function () {
-        sysdb.readTransaction(function (sysReadTx) {
-          sysReadTx.executeSql('SELECT "name", "version" FROM dbVersions', [], function (sysReadTx, data) {
+      createSysDB(me.__openDatabase, function() {
+        sysdb.readTransaction(function(sysReadTx) {
+          sysReadTx.executeSql("SELECT \"name\", \"version\" FROM dbVersions", [], function(sysReadTx, data) {
             var dbNames = [];
 
             for (var i = 0; i < data.rows.length; i++) {
               var _data$rows$item2 = data.rows.item(i),
-                  name = _data$rows$item2.name,
-                  version = _data$rows$item2.version;
+                name = _data$rows$item2.name,
+                version = _data$rows$item2.version;
 
               dbNames.push({
                 name: unescapeSQLiteResponse(name),
-                version: version
+                version: version,
               });
             }
 
@@ -10798,19 +10867,19 @@
     });
   };
   /**
-  * @todo forceClose: Test
-  * This is provided to facilitate unit-testing of the
-  *  closing of a database connection with a forced flag:
-  * <http://w3c.github.io/IndexedDB/#steps-for-closing-a-database-connection>
-  * @param {string} dbName
-  * @param {Integer} connIdx
-  * @param {string} msg
-  * @throws {TypeError}
-  * @returns {void}
-  */
+   * @todo forceClose: Test
+   * This is provided to facilitate unit-testing of the
+   *  closing of a database connection with a forced flag:
+   * <http://w3c.github.io/IndexedDB/#steps-for-closing-a-database-connection>
+   * @param {string} dbName
+   * @param {Integer} connIdx
+   * @param {string} msg
+   * @throws {TypeError}
+   * @returns {void}
+   */
 
 
-  IDBFactory.prototype.__forceClose = function (dbName, connIdx, msg) {
+  IDBFactory.prototype.__forceClose = function(dbName, connIdx, msg) {
     var me = this;
 
     function forceClose(conn) {
@@ -10818,36 +10887,36 @@
     }
 
     if (isNullish(dbName)) {
-      Object.values(me.__connections).forEach(function (conn) {
+      Object.values(me.__connections).forEach(function(conn) {
         forceClose(conn);
       });
     } else if (!me.__connections[dbName]) {
-      console.log('No database connections with that name to force close');
+      console.log("No database connections with that name to force close");
     } else if (isNullish(connIdx)) {
-      me.__connections[dbName].forEach(function (conn) {
+      me.__connections[dbName].forEach(function(conn) {
         forceClose(conn);
       });
     } else if (!Number.isInteger(connIdx) || connIdx < 0 || connIdx > me.__connections[dbName].length - 1) {
-      throw new TypeError('If providing an argument, __forceClose must be called with a ' + 'numeric index to indicate a specific connection to lose');
+      throw new TypeError("If providing an argument, __forceClose must be called with a " + "numeric index to indicate a specific connection to lose");
     } else {
       forceClose(me.__connections[dbName][connIdx]);
     }
   };
 
-  IDBFactory.prototype.__setConnectionQueueOrigin = function () {
+  IDBFactory.prototype.__setConnectionQueueOrigin = function() {
     var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getOrigin();
     connectionQueue[origin] = {};
   };
 
-  IDBFactory.prototype[Symbol.toStringTag] = 'IDBFactoryPrototype';
-  Object.defineProperty(IDBFactory, 'prototype', {
-    writable: false
+  IDBFactory.prototype[Symbol.toStringTag] = "IDBFactoryPrototype";
+  Object.defineProperty(IDBFactory, "prototype", {
+    writable: false,
   });
 
   var shimIndexedDB = IDBFactory.__createInstance();
 
   function IDBCursor() {
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
   var IDBCursorAlias = IDBCursor;
@@ -10868,8 +10937,8 @@
 
   IDBCursor.__super = function IDBCursor(query, direction, store, source, keyColumnName, valueColumnName, count) {
     /* eslint-enable func-name-matching */
-    this[Symbol.toStringTag] = 'IDBCursor';
-    defineReadonlyProperties(this, ['key', 'primaryKey', 'request']);
+    this[Symbol.toStringTag] = "IDBCursor";
+    defineReadonlyProperties(this, ["key", "primaryKey", "request"]);
 
     IDBObjectStore.__invalidStateIfDeleted(store);
 
@@ -10880,20 +10949,20 @@
 
     var range = convertValueToKeyRange(query);
 
-    if (direction !== undefined && !['next', 'prev', 'nextunique', 'prevunique'].includes(direction)) {
-      throw new TypeError(direction + 'is not a valid cursor direction');
+    if (direction !== undefined && !["next", "prev", "nextunique", "prevunique"].includes(direction)) {
+      throw new TypeError(direction + "is not a valid cursor direction");
     }
 
     Object.defineProperties(this, {
       // Babel is not respecting default writable false here, so make explicit
       source: {
         writable: false,
-        value: source
+        value: source,
       },
       direction: {
         writable: false,
-        value: direction || 'next'
-      }
+        value: direction || "next",
+      },
     });
     this.__key = undefined;
     this.__primaryKey = undefined;
@@ -10904,13 +10973,13 @@
     this.__request.__transaction = this.__store.transaction;
     this.__keyColumnName = keyColumnName;
     this.__valueColumnName = valueColumnName;
-    this.__keyOnly = valueColumnName === 'key';
+    this.__keyOnly = valueColumnName === "key";
     this.__valueDecoder = this.__keyOnly ? Key : Sca;
     this.__count = count;
     this.__prefetchedIndex = -1;
     this.__multiEntryIndex = this.__indexSource ? source.multiEntry : false;
-    this.__unique = this.direction.includes('unique');
-    this.__sqlDirection = ['prev', 'prevunique'].includes(this.direction) ? 'DESC' : 'ASC';
+    this.__unique = this.direction.includes("unique");
+    this.__sqlDirection = ["prev", "prevunique"].includes(this.direction) ? "DESC" : "ASC";
 
     if (range !== undefined) {
       // Encode the key range and cache the encoded values, so we don't have to re-encode them over and over
@@ -10922,7 +10991,7 @@
     this["continue"]();
   };
 
-  IDBCursor.__createInstance = function () {
+  IDBCursor.__createInstance = function() {
     var IDBCursor = IDBCursorAlias.__super;
     IDBCursor.prototype = IDBCursorAlias.prototype;
 
@@ -10933,7 +11002,7 @@
     return _construct(IDBCursor, args);
   };
 
-  IDBCursor.prototype.__find = function () {
+  IDBCursor.prototype.__find = function() {
     if (this.__multiEntryIndex) {
       this.__findMultiEntry.apply(this, arguments);
     } else {
@@ -10941,146 +11010,146 @@
     }
   };
 
-  IDBCursor.prototype.__findBasic = function (key, primaryKey, tx, success, error, recordsToLoad) {
+  IDBCursor.prototype.__findBasic = function(key, primaryKey, tx, success, error, recordsToLoad) {
     var continueCall = recordsToLoad !== undefined;
     recordsToLoad = recordsToLoad || 1;
     var me = this;
     var quotedKeyColumnName = sqlQuote(me.__keyColumnName);
-    var quotedKey = sqlQuote('key');
-    var sql = ['SELECT * FROM', escapeStoreNameForSQL(me.__store.__currentName)];
+    var quotedKey = sqlQuote("key");
+    var sql = ["SELECT * FROM", escapeStoreNameForSQL(me.__store.__currentName)];
     var sqlValues = [];
-    sql.push('WHERE', quotedKeyColumnName, 'NOT NULL');
+    sql.push("WHERE", quotedKeyColumnName, "NOT NULL");
     setSQLForKeyRange(me.__range, quotedKeyColumnName, sql, sqlValues, true, true); // Determine the ORDER BY direction based on the cursor.
 
     var direction = me.__sqlDirection;
-    var op = direction === 'ASC' ? '>' : '<';
+    var op = direction === "ASC" ? ">" : "<";
 
     if (primaryKey !== undefined) {
-      sql.push('AND', quotedKey, op + '= ?'); // Key.convertValueToKey(primaryKey); // Already checked by `continuePrimaryKey`
+      sql.push("AND", quotedKey, op + "= ?"); // Key.convertValueToKey(primaryKey); // Already checked by `continuePrimaryKey`
 
       sqlValues.push(_encode(primaryKey));
     }
 
     if (key !== undefined) {
-      sql.push('AND', quotedKeyColumnName, op + '= ?'); // Key.convertValueToKey(key); // Already checked by `continue` or `continuePrimaryKey`
+      sql.push("AND", quotedKeyColumnName, op + "= ?"); // Key.convertValueToKey(key); // Already checked by `continue` or `continuePrimaryKey`
 
       sqlValues.push(_encode(key));
     } else if (continueCall && me.__key !== undefined) {
-      sql.push('AND', quotedKeyColumnName, op + ' ?'); // Key.convertValueToKey(me.__key); // Already checked when stored
+      sql.push("AND", quotedKeyColumnName, op + " ?"); // Key.convertValueToKey(me.__key); // Already checked when stored
 
       sqlValues.push(_encode(me.__key));
     }
 
     if (!me.__count) {
       // 1. Sort by key
-      sql.push('ORDER BY', quotedKeyColumnName, direction);
+      sql.push("ORDER BY", quotedKeyColumnName, direction);
 
-      if (me.__keyColumnName !== 'key') {
+      if (me.__keyColumnName !== "key") {
         // Avoid adding 'key' twice
         if (!me.__unique) {
           // 2. Sort by primaryKey (if defined and not unique)
           // 3. Sort by position (if defined)
-          sql.push(',', quotedKey, direction);
-        } else if (me.direction === 'prevunique') {
+          sql.push(",", quotedKey, direction);
+        } else if (me.direction === "prevunique") {
           // Sort by first record with key matching
-          sql.push(',', quotedKey, 'ASC');
+          sql.push(",", quotedKey, "ASC");
         }
       }
 
       if (!me.__unique && me.__indexSource) {
         // 4. Sort by object store position (if defined and not unique)
-        sql.push(',', sqlQuote(me.__valueColumnName), direction);
+        sql.push(",", sqlQuote(me.__valueColumnName), direction);
       }
 
-      sql.push('LIMIT', recordsToLoad);
+      sql.push("LIMIT", recordsToLoad);
     }
 
-    sql = sql.join(' ');
+    sql = sql.join(" ");
     CFG.DEBUG && console.log(sql, sqlValues);
-    tx.executeSql(sql, sqlValues, function (tx, data) {
+    tx.executeSql(sql, sqlValues, function(tx, data) {
       if (me.__count) {
         success(undefined, data.rows.length, undefined);
       } else if (data.rows.length > 1) {
         me.__prefetchedIndex = 0;
         me.__prefetchedData = data.rows;
-        CFG.DEBUG && console.log('Preloaded ' + me.__prefetchedData.length + ' records for cursor');
+        CFG.DEBUG && console.log("Preloaded " + me.__prefetchedData.length + " records for cursor");
 
         me.__decode(data.rows.item(0), success);
       } else if (data.rows.length === 1) {
         me.__decode(data.rows.item(0), success);
       } else {
-        CFG.DEBUG && console.log('Reached end of cursors');
+        CFG.DEBUG && console.log("Reached end of cursors");
         success(undefined, undefined, undefined);
       }
-    }, function (tx, err) {
-      CFG.DEBUG && console.log('Could not execute Cursor.continue', sql, sqlValues);
+    }, function(tx, err) {
+      CFG.DEBUG && console.log("Could not execute Cursor.continue", sql, sqlValues);
       error(err);
     });
   };
 
   var leftBracketRegex = /\[/g;
 
-  IDBCursor.prototype.__findMultiEntry = function (key, primaryKey, tx, success, error) {
+  IDBCursor.prototype.__findMultiEntry = function(key, primaryKey, tx, success, error) {
     var me = this;
 
     if (me.__prefetchedData && me.__prefetchedData.length === me.__prefetchedIndex) {
-      CFG.DEBUG && console.log('Reached end of multiEntry cursor');
+      CFG.DEBUG && console.log("Reached end of multiEntry cursor");
       success(undefined, undefined, undefined);
       return;
     }
 
     var quotedKeyColumnName = sqlQuote(me.__keyColumnName);
-    var sql = ['SELECT * FROM', escapeStoreNameForSQL(me.__store.__currentName)];
+    var sql = ["SELECT * FROM", escapeStoreNameForSQL(me.__store.__currentName)];
     var sqlValues = [];
-    sql.push('WHERE', quotedKeyColumnName, 'NOT NULL');
+    sql.push("WHERE", quotedKeyColumnName, "NOT NULL");
 
     if (me.__range && me.__range.lower !== undefined && Array.isArray(me.__range.upper)) {
       if (me.__range.upper.indexOf(me.__range.lower) === 0) {
-        sql.push('AND', quotedKeyColumnName, "LIKE ? ESCAPE '^'");
-        sqlValues.push('%' + sqlLIKEEscape(me.__range.__lowerCached.slice(0, -1)) + '%');
+        sql.push("AND", quotedKeyColumnName, "LIKE ? ESCAPE '^'");
+        sqlValues.push("%" + sqlLIKEEscape(me.__range.__lowerCached.slice(0, -1)) + "%");
       }
     } // Determine the ORDER BY direction based on the cursor.
 
 
     var direction = me.__sqlDirection;
-    var op = direction === 'ASC' ? '>' : '<';
-    var quotedKey = sqlQuote('key');
+    var op = direction === "ASC" ? ">" : "<";
+    var quotedKey = sqlQuote("key");
 
     if (primaryKey !== undefined) {
-      sql.push('AND', quotedKey, op + '= ?'); // Key.convertValueToKey(primaryKey); // Already checked by `continuePrimaryKey`
+      sql.push("AND", quotedKey, op + "= ?"); // Key.convertValueToKey(primaryKey); // Already checked by `continuePrimaryKey`
 
       sqlValues.push(_encode(primaryKey));
     }
 
     if (key !== undefined) {
-      sql.push('AND', quotedKeyColumnName, op + '= ?'); // Key.convertValueToKey(key); // Already checked by `continue` or `continuePrimaryKey`
+      sql.push("AND", quotedKeyColumnName, op + "= ?"); // Key.convertValueToKey(key); // Already checked by `continue` or `continuePrimaryKey`
 
       sqlValues.push(_encode(key));
     } else if (me.__key !== undefined) {
-      sql.push('AND', quotedKeyColumnName, op + ' ?'); // Key.convertValueToKey(me.__key); // Already checked when entered
+      sql.push("AND", quotedKeyColumnName, op + " ?"); // Key.convertValueToKey(me.__key); // Already checked when entered
 
       sqlValues.push(_encode(me.__key));
     }
 
     if (!me.__count) {
       // 1. Sort by key
-      sql.push('ORDER BY', quotedKeyColumnName, direction); // 2. Sort by primaryKey (if defined and not unique)
+      sql.push("ORDER BY", quotedKeyColumnName, direction); // 2. Sort by primaryKey (if defined and not unique)
 
-      if (!me.__unique && me.__keyColumnName !== 'key') {
+      if (!me.__unique && me.__keyColumnName !== "key") {
         // Avoid adding 'key' twice
-        sql.push(',', sqlQuote('key'), direction);
+        sql.push(",", sqlQuote("key"), direction);
       } // 3. Sort by position (if defined)
 
 
       if (!me.__unique && me.__indexSource) {
         // 4. Sort by object store position (if defined and not unique)
-        sql.push(',', sqlQuote(me.__valueColumnName), direction);
+        sql.push(",", sqlQuote(me.__valueColumnName), direction);
       }
     }
 
-    sql = sql.join(' ');
+    sql = sql.join(" ");
     CFG.DEBUG && console.log(sql, sqlValues);
-    tx.executeSql(sql, sqlValues, function (tx, data) {
+    tx.executeSql(sql, sqlValues, function(tx, data) {
       if (data.rows.length > 0) {
         if (me.__count) {
           // Avoid caching and other processing below
@@ -11107,14 +11176,14 @@
           var _matches = findMultiEntryMatches(_rowKey, me.__range);
 
           var _iterator = _createForOfIteratorHelper(_matches),
-              _step;
+            _step;
 
           try {
             for (_iterator.s(); !(_step = _iterator.n()).done;) {
               var matchingKey = _step.value;
               var clone = {
                 matchingKey: _encode(matchingKey, true),
-                key: _rowItem.key
+                key: _rowItem.key,
               };
               clone[me.__keyColumnName] = _rowItem[me.__keyColumnName];
               clone[me.__valueColumnName] = _rowItem[me.__valueColumnName];
@@ -11127,22 +11196,22 @@
           }
         }
 
-        var reverse = me.direction.indexOf('prev') === 0;
-        rows.sort(function (a, b) {
-          if (a.matchingKey.replace(leftBracketRegex, 'z') < b.matchingKey.replace(leftBracketRegex, 'z')) {
+        var reverse = me.direction.indexOf("prev") === 0;
+        rows.sort(function(a, b) {
+          if (a.matchingKey.replace(leftBracketRegex, "z") < b.matchingKey.replace(leftBracketRegex, "z")) {
             return reverse ? 1 : -1;
           }
 
-          if (a.matchingKey.replace(leftBracketRegex, 'z') > b.matchingKey.replace(leftBracketRegex, 'z')) {
+          if (a.matchingKey.replace(leftBracketRegex, "z") > b.matchingKey.replace(leftBracketRegex, "z")) {
             return reverse ? -1 : 1;
           }
 
           if (a.key < b.key) {
-            return me.direction === 'prev' ? 1 : -1;
+            return me.direction === "prev" ? 1 : -1;
           }
 
           if (a.key > b.key) {
-            return me.direction === 'prev' ? -1 : 1;
+            return me.direction === "prev" ? -1 : 1;
           }
 
           return 0;
@@ -11155,42 +11224,42 @@
             length: rows.length,
             item: function item(index) {
               return this.data[index];
-            }
+            },
           };
-          CFG.DEBUG && console.log('Preloaded ' + me.__prefetchedData.length + ' records for multiEntry cursor');
+          CFG.DEBUG && console.log("Preloaded " + me.__prefetchedData.length + " records for multiEntry cursor");
 
           me.__decode(rows[0], success);
         } else if (rows.length === 1) {
-          CFG.DEBUG && console.log('Reached end of multiEntry cursor');
+          CFG.DEBUG && console.log("Reached end of multiEntry cursor");
 
           me.__decode(rows[0], success);
         } else {
-          CFG.DEBUG && console.log('Reached end of multiEntry cursor');
+          CFG.DEBUG && console.log("Reached end of multiEntry cursor");
           success(undefined, undefined, undefined);
         }
       } else {
-        CFG.DEBUG && console.log('Reached end of multiEntry cursor');
+        CFG.DEBUG && console.log("Reached end of multiEntry cursor");
         success(undefined, undefined, undefined);
       }
-    }, function (tx, err) {
-      CFG.DEBUG && console.log('Could not execute Cursor.continue', sql, sqlValues);
+    }, function(tx, err) {
+      CFG.DEBUG && console.log("Could not execute Cursor.continue", sql, sqlValues);
       error(err);
     });
   };
   /**
-  * @callback module:IDBCursor.SuccessArg
-  * @param value
-  * @param {IDBRequest} req
-  * @returns {void}
-  */
+   * @callback module:IDBCursor.SuccessArg
+   * @param value
+   * @param {IDBRequest} req
+   * @returns {void}
+   */
 
   /**
-  * @callback module:IDBCursor.SuccessCallback
-  * @param key
-  * @param value
-  * @param primaryKey
-  * @returns {void}
-  */
+   * @callback module:IDBCursor.SuccessCallback
+   * @param key
+   * @param value
+   * @param primaryKey
+   * @returns {void}
+   */
 
   /**
    * Creates an "onsuccess" callback.
@@ -11200,9 +11269,9 @@
    */
 
 
-  IDBCursor.prototype.__onsuccess = function (success) {
+  IDBCursor.prototype.__onsuccess = function(success) {
     var me = this;
-    return function (key, value, primaryKey) {
+    return function(key, value, primaryKey) {
       if (me.__count) {
         success(value, me.__request);
       } else {
@@ -11219,7 +11288,7 @@
     };
   };
 
-  IDBCursor.prototype.__decode = function (rowItem, callback) {
+  IDBCursor.prototype.__decode = function(rowItem, callback) {
     var me = this;
 
     if (me.__multiEntryIndex && me.__unique) {
@@ -11243,22 +11312,22 @@
     var val = me.__valueDecoder.decode(encVal);
 
     var primaryKey = _decode(encPrimaryKey);
-    callback(key, val, primaryKey, encKey
-    /*, encVal, encPrimaryKey */
+    callback(key, val, primaryKey, encKey,
+      /*, encVal, encPrimaryKey */
     );
   };
 
-  IDBCursor.prototype.__sourceOrEffectiveObjStoreDeleted = function () {
+  IDBCursor.prototype.__sourceOrEffectiveObjStoreDeleted = function() {
     IDBObjectStore.__invalidStateIfDeleted(this.__store, "The cursor's effective object store has been deleted");
 
     if (this.__indexSource) IDBIndex.__invalidStateIfDeleted(this.source, "The cursor's index source has been deleted");
   };
 
-  IDBCursor.prototype.__invalidateCache = function () {
+  IDBCursor.prototype.__invalidateCache = function() {
     this.__prefetchedData = null;
   };
 
-  IDBCursor.prototype.__continue = function (key, advanceContinue) {
+  IDBCursor.prototype.__continue = function(key, advanceContinue) {
     var me = this;
     var advanceState = me.__advanceCount !== undefined;
 
@@ -11267,22 +11336,22 @@
     me.__sourceOrEffectiveObjStoreDeleted();
 
     if (!me.__gotValue && !advanceContinue) {
-      throw createDOMException('InvalidStateError', 'The cursor is being iterated or has iterated past its end.');
+      throw createDOMException("InvalidStateError", "The cursor is being iterated or has iterated past its end.");
     }
 
     if (key !== undefined) {
       convertValueToKeyRethrowingAndIfInvalid(key);
       var cmpResult = cmp(key, me.key);
 
-      if (cmpResult === 0 || me.direction.includes('next') && cmpResult === -1 || me.direction.includes('prev') && cmpResult === 1) {
-        throw createDOMException('DataError', 'Cannot ' + (advanceState ? 'advance' : 'continue') + ' the cursor in an unexpected direction');
+      if (cmpResult === 0 || me.direction.includes("next") && cmpResult === -1 || me.direction.includes("prev") && cmpResult === 1) {
+        throw createDOMException("DataError", "Cannot " + (advanceState ? "advance" : "continue") + " the cursor in an unexpected direction");
       }
     }
 
     this.__continueFinish(key, undefined, advanceState);
   };
 
-  IDBCursor.prototype.__continueFinish = function (key, primaryKey, advanceState) {
+  IDBCursor.prototype.__continueFinish = function(key, primaryKey, advanceState) {
     var me = this;
     var recordsToPreloadOnContinue = me.__advanceCount || CFG.cursorPreloadPackSize || 100;
     me.__gotValue = false;
@@ -11313,7 +11382,7 @@
         me.__prefetchedIndex++;
 
         if (me.__prefetchedIndex < me.__prefetchedData.length) {
-          me.__decode(me.__prefetchedData.item(me.__prefetchedIndex), function (k, val, primKey, encKey) {
+          me.__decode(me.__prefetchedData.item(me.__prefetchedIndex), function(k, val, primKey, encKey) {
             function checkKey() {
               var cmpResult = key === undefined || cmp(k, key);
 
@@ -11338,7 +11407,7 @@
       } // No (or not enough) pre-fetched data, do query
 
 
-      me.__find(key, primaryKey, tx, triggerSuccess, function () {
+      me.__find(key, primaryKey, tx, triggerSuccess, function() {
         me.__advanceCount = undefined;
         error.apply(void 0, arguments);
       }, recordsToPreloadOnContinue);
@@ -11347,12 +11416,12 @@
 
   IDBCursor.prototype["continue"] = function
     /* key */
-  () {
+    () {
     // eslint-disable-next-line prefer-rest-params
     this.__continue(arguments[0]);
   };
 
-  IDBCursor.prototype.continuePrimaryKey = function (key, primaryKey) {
+  IDBCursor.prototype.continuePrimaryKey = function(key, primaryKey) {
     var me = this;
 
     IDBTransaction.__assertActive(me.__store.transaction);
@@ -11360,23 +11429,23 @@
     me.__sourceOrEffectiveObjStoreDeleted();
 
     if (!me.__indexSource) {
-      throw createDOMException('InvalidAccessError', '`continuePrimaryKey` may only be called on an index source.');
+      throw createDOMException("InvalidAccessError", "`continuePrimaryKey` may only be called on an index source.");
     }
 
-    if (!['next', 'prev'].includes(me.direction)) {
-      throw createDOMException('InvalidAccessError', '`continuePrimaryKey` may not be called with unique cursors.');
+    if (!["next", "prev"].includes(me.direction)) {
+      throw createDOMException("InvalidAccessError", "`continuePrimaryKey` may not be called with unique cursors.");
     }
 
     if (!me.__gotValue) {
-      throw createDOMException('InvalidStateError', 'The cursor is being iterated or has iterated past its end.');
+      throw createDOMException("InvalidStateError", "The cursor is being iterated or has iterated past its end.");
     }
 
     convertValueToKeyRethrowingAndIfInvalid(key);
     convertValueToKeyRethrowingAndIfInvalid(primaryKey);
     var cmpResult = cmp(key, me.key);
 
-    if (me.direction === 'next' && cmpResult === -1 || me.direction === 'prev' && cmpResult === 1) {
-      throw createDOMException('DataError', 'Cannot continue the cursor in an unexpected direction');
+    if (me.direction === "next" && cmpResult === -1 || me.direction === "prev" && cmpResult === 1) {
+      throw createDOMException("DataError", "Cannot continue the cursor in an unexpected direction");
     }
 
     function noErrors() {
@@ -11384,10 +11453,10 @@
     }
 
     if (cmpResult === 0) {
-      encode(primaryKey, function (encPrimaryKey) {
-        encode(me.primaryKey, function (encObjectStorePos) {
-          if (encPrimaryKey === encObjectStorePos || me.direction === 'next' && encPrimaryKey < encObjectStorePos || me.direction === 'prev' && encPrimaryKey > encObjectStorePos) {
-            throw createDOMException('DataError', 'Cannot continue the cursor in an unexpected direction');
+      encode(primaryKey, function(encPrimaryKey) {
+        encode(me.primaryKey, function(encObjectStorePos) {
+          if (encPrimaryKey === encObjectStorePos || me.direction === "next" && encPrimaryKey < encObjectStorePos || me.direction === "prev" && encPrimaryKey > encObjectStorePos) {
+            throw createDOMException("DataError", "Cannot continue the cursor in an unexpected direction");
           }
 
           noErrors();
@@ -11398,12 +11467,12 @@
     }
   };
 
-  IDBCursor.prototype.advance = function (count) {
+  IDBCursor.prototype.advance = function(count) {
     var me = this;
-    count = enforceRange(count, 'unsigned long');
+    count = enforceRange(count, "unsigned long");
 
     if (count === 0) {
-      throw new TypeError('Calling advance() with count argument 0');
+      throw new TypeError("Calling advance() with count argument 0");
     }
 
     if (me.__gotValue) {
@@ -11414,9 +11483,9 @@
     me.__continue();
   };
 
-  IDBCursor.prototype.update = function (valueToUpdate) {
+  IDBCursor.prototype.update = function(valueToUpdate) {
     var me = this;
-    if (!arguments.length) throw new TypeError('A value must be passed to update()');
+    if (!arguments.length) throw new TypeError("A value must be passed to update()");
 
     IDBTransaction.__assertActive(me.__store.transaction);
 
@@ -11425,11 +11494,11 @@
     me.__sourceOrEffectiveObjStoreDeleted();
 
     if (!me.__gotValue) {
-      throw createDOMException('InvalidStateError', 'The cursor is being iterated or has iterated past its end.');
+      throw createDOMException("InvalidStateError", "The cursor is being iterated or has iterated past its end.");
     }
 
     if (me.__keyOnly) {
-      throw createDOMException('InvalidStateError', 'This cursor method cannot be called when the key only flag has been set.');
+      throw createDOMException("InvalidStateError", "This cursor method cannot be called when the key only flag has been set.");
     }
 
     var request = me.__store.transaction.__createRequest(me);
@@ -11443,12 +11512,12 @@
 
     if (me.__store.keyPath !== null) {
       var _me$__store$__validat = me.__store.__validateKeyAndValueAndCloneValue(valueToUpdate, undefined, true),
-          _me$__store$__validat2 = _slicedToArray(_me$__store$__validat, 2),
-          evaluatedKey = _me$__store$__validat2[0],
-          clonedValue = _me$__store$__validat2[1];
+        _me$__store$__validat2 = _slicedToArray(_me$__store$__validat, 2),
+        evaluatedKey = _me$__store$__validat2[0],
+        clonedValue = _me$__store$__validat2[1];
 
       if (cmp(me.primaryKey, evaluatedKey) !== 0) {
-        throw createDOMException('DataError', 'The key of the supplied value to `update` is not equal to the cursor\'s effective key');
+        throw createDOMException("DataError", "The key of the supplied value to `update` is not equal to the cursor's effective key");
       }
 
       addToQueue(clonedValue);
@@ -11461,7 +11530,7 @@
     return request;
   };
 
-  IDBCursor.prototype["delete"] = function () {
+  IDBCursor.prototype["delete"] = function() {
     var me = this;
 
     IDBTransaction.__assertActive(me.__store.transaction);
@@ -11471,53 +11540,53 @@
     me.__sourceOrEffectiveObjStoreDeleted();
 
     if (!me.__gotValue) {
-      throw createDOMException('InvalidStateError', 'The cursor is being iterated or has iterated past its end.');
+      throw createDOMException("InvalidStateError", "The cursor is being iterated or has iterated past its end.");
     }
 
     if (me.__keyOnly) {
-      throw createDOMException('InvalidStateError', 'This cursor method cannot be called when the key only flag has been set.');
+      throw createDOMException("InvalidStateError", "This cursor method cannot be called when the key only flag has been set.");
     }
 
     return this.__store.transaction.__addToTransactionQueue(function cursorDelete(tx, args, success, error) {
-      me.__find(undefined, undefined, tx, function (key, value, primaryKey) {
-        var sql = 'DELETE FROM  ' + escapeStoreNameForSQL(me.__store.__currentName) + ' WHERE "key" = ?';
+      me.__find(undefined, undefined, tx, function(key, value, primaryKey) {
+        var sql = "DELETE FROM  " + escapeStoreNameForSQL(me.__store.__currentName) + " WHERE \"key\" = ?";
         CFG.DEBUG && console.log(sql, key, primaryKey); // Key.convertValueToKey(primaryKey); // Already checked when entered
 
-        tx.executeSql(sql, [escapeSQLiteStatement(_encode(primaryKey))], function (tx, data) {
+        tx.executeSql(sql, [escapeSQLiteStatement(_encode(primaryKey))], function(tx, data) {
           if (data.rowsAffected === 1) {
             // We don't invalidate the cache (as we don't access it anymore
             //    and it will set the index off)
             success(undefined);
           } else {
-            error('No rows with key found' + key);
+            error("No rows with key found" + key);
           }
-        }, function (tx, data) {
+        }, function(tx, data) {
           error(data);
         });
       }, error);
     }, undefined, me);
   };
 
-  IDBCursor.prototype[Symbol.toStringTag] = 'IDBCursorPrototype';
-  defineReadonlyOuterInterface(IDBCursor.prototype, ['source', 'direction', 'key', 'primaryKey', 'request']);
-  Object.defineProperty(IDBCursor, 'prototype', {
-    writable: false
+  IDBCursor.prototype[Symbol.toStringTag] = "IDBCursorPrototype";
+  defineReadonlyOuterInterface(IDBCursor.prototype, ["source", "direction", "key", "primaryKey", "request"]);
+  Object.defineProperty(IDBCursor, "prototype", {
+    writable: false,
   });
 
   function IDBCursorWithValue() {
-    throw new TypeError('Illegal constructor');
+    throw new TypeError("Illegal constructor");
   }
 
   IDBCursorWithValue.prototype = Object.create(IDBCursor.prototype);
-  Object.defineProperty(IDBCursorWithValue.prototype, 'constructor', {
+  Object.defineProperty(IDBCursorWithValue.prototype, "constructor", {
     enumerable: false,
     writable: true,
     configurable: true,
-    value: IDBCursorWithValue
+    value: IDBCursorWithValue,
   });
   var IDBCursorWithValueAlias = IDBCursorWithValue;
 
-  IDBCursorWithValue.__createInstance = function () {
+  IDBCursorWithValue.__createInstance = function() {
     for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
       args[_key2] = arguments[_key2];
     }
@@ -11527,26 +11596,26 @@
 
       (_IDBCursor$__super = IDBCursor.__super).call.apply(_IDBCursor$__super, [this].concat(args));
 
-      this[Symbol.toStringTag] = 'IDBCursorWithValue';
-      defineReadonlyProperties(this, 'value');
+      this[Symbol.toStringTag] = "IDBCursorWithValue";
+      defineReadonlyProperties(this, "value");
     }
 
     IDBCursorWithValue.prototype = IDBCursorWithValueAlias.prototype;
     return new IDBCursorWithValue();
   };
 
-  defineReadonlyOuterInterface(IDBCursorWithValue.prototype, ['value']);
-  IDBCursorWithValue.prototype[Symbol.toStringTag] = 'IDBCursorWithValuePrototype';
-  Object.defineProperty(IDBCursorWithValue, 'prototype', {
-    writable: false
+  defineReadonlyOuterInterface(IDBCursorWithValue.prototype, ["value"]);
+  IDBCursorWithValue.prototype[Symbol.toStringTag] = "IDBCursorWithValuePrototype";
+  Object.defineProperty(IDBCursorWithValue, "prototype", {
+    writable: false,
   });
 
   function setConfig(prop, val) {
-    if (prop && _typeof$1(prop) === 'object') {
-      Object.entries(prop).forEach(function (_ref) {
+    if (prop && _typeof$1(prop) === "object") {
+      Object.entries(prop).forEach(function(_ref) {
         var _ref2 = _slicedToArray(_ref, 2),
-            p = _ref2[0],
-            val = _ref2[1];
+          p = _ref2[0],
+          val = _ref2[1];
 
         setConfig(p, val);
       });
@@ -11554,12 +11623,12 @@
     }
 
     if (!(prop in CFG)) {
-      throw new Error(prop + ' is not a valid configuration property');
+      throw new Error(prop + " is not a valid configuration property");
     }
 
     CFG[prop] = val;
 
-    if (prop === 'registerSCA' && typeof val === 'function') {
+    if (prop === "registerSCA" && typeof val === "function") {
       register(val);
     }
   }
@@ -11569,7 +11638,7 @@
       setConfig(initialConfig);
     }
 
-    var IDB = idb || (typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : typeof global$1 !== 'undefined' ? global$1 : {});
+    var IDB = idb || (typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : typeof global$1 !== "undefined" ? global$1 : {});
 
     function shim(name, value, propDesc) {
       if (!propDesc || !Object.defineProperty) {
@@ -11586,18 +11655,18 @@
         try {
           var desc = propDesc || {};
 
-          if (!('get' in desc)) {
-            if (!('value' in desc)) {
+          if (!("get" in desc)) {
+            if (!("value" in desc)) {
               desc.value = value;
             }
 
-            if (!('writable' in desc)) {
+            if (!("writable" in desc)) {
               desc.writable = true;
             }
           } else {
             var _o, _mutatorMap;
 
-            var o = (_o = {}, _mutatorMap = {}, _mutatorMap[name] = _mutatorMap[name] || {}, _mutatorMap[name].get = function () {
+            var o = (_o = {}, _mutatorMap = {}, _mutatorMap[name] = _mutatorMap[name] || {}, _mutatorMap[name].get = function() {
               return propDesc.get.call(this);
             }, _defineEnumerableProperties(_o, _mutatorMap), _o);
             desc = Object.getOwnPropertyDescriptor(o, name);
@@ -11611,45 +11680,45 @@
       }
 
       if (IDB[name] !== value) {
-        typeof console !== 'undefined' && console.warn && console.warn('Unable to shim ' + name);
+        typeof console !== "undefined" && console.warn && console.warn("Unable to shim " + name);
       }
     }
 
     if (CFG.win.openDatabase !== undefined) {
-      shim('shimIndexedDB', shimIndexedDB, {
+      shim("shimIndexedDB", shimIndexedDB, {
         enumerable: false,
-        configurable: true
+        configurable: true,
       });
     }
 
     if (IDB.shimIndexedDB) {
-      IDB.shimIndexedDB.__useShim = function () {
+      IDB.shimIndexedDB.__useShim = function() {
         function setNonIDBGlobals() {
-          var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
-          shim(prefix + 'DOMException', ShimDOMException);
-          shim(prefix + 'DOMStringList', DOMStringList, {
+          var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
+          shim(prefix + "DOMException", ShimDOMException);
+          shim(prefix + "DOMStringList", DOMStringList, {
             enumerable: false,
             configurable: true,
             writable: true,
-            value: DOMStringList
+            value: DOMStringList,
           });
-          shim(prefix + 'Event', ShimEvent, {
+          shim(prefix + "Event", ShimEvent, {
             configurable: true,
             writable: true,
             value: ShimEvent,
-            enumerable: false
+            enumerable: false,
           });
-          shim(prefix + 'CustomEvent', ShimCustomEvent, {
+          shim(prefix + "CustomEvent", ShimCustomEvent, {
             configurable: true,
             writable: true,
             value: ShimCustomEvent,
-            enumerable: false
+            enumerable: false,
           });
-          shim(prefix + 'EventTarget', EventTarget, {
+          shim(prefix + "EventTarget", EventTarget, {
             configurable: true,
             writable: true,
             value: EventTarget,
-            enumerable: false
+            enumerable: false,
           });
         }
 
@@ -11659,26 +11728,26 @@
           shimIndexedDB.__openDatabase = CFG.win.openDatabase.bind(CFG.win); // We cache here in case the function is overwritten later as by the IndexedDB support promises tests
           // Polyfill ALL of IndexedDB, using WebSQL
 
-          shim('indexedDB', shimIndexedDB, {
+          shim("indexedDB", shimIndexedDB, {
             enumerable: true,
             configurable: true,
             get: function get() {
               if (this !== IDB && !isNullish(this) && !this.shimNS) {
                 // Latter is hack for test environment
-                throw new TypeError('Illegal invocation');
+                throw new TypeError("Illegal invocation");
               }
 
               return shimIndexedDB;
-            }
+            },
           });
-          [['IDBFactory', shimIDBFactory], ['IDBDatabase', IDBDatabase], ['IDBObjectStore', IDBObjectStore], ['IDBIndex', IDBIndex], ['IDBTransaction', IDBTransaction], ['IDBCursor', IDBCursor], ['IDBCursorWithValue', IDBCursorWithValue], ['IDBKeyRange', IDBKeyRange], ['IDBRequest', IDBRequest], ['IDBOpenDBRequest', IDBOpenDBRequest], ['IDBVersionChangeEvent', IDBVersionChangeEvent]].forEach(function (_ref3) {
+          [["IDBFactory", shimIDBFactory], ["IDBDatabase", IDBDatabase], ["IDBObjectStore", IDBObjectStore], ["IDBIndex", IDBIndex], ["IDBTransaction", IDBTransaction], ["IDBCursor", IDBCursor], ["IDBCursorWithValue", IDBCursorWithValue], ["IDBKeyRange", IDBKeyRange], ["IDBRequest", IDBRequest], ["IDBOpenDBRequest", IDBOpenDBRequest], ["IDBVersionChangeEvent", IDBVersionChangeEvent]].forEach(function(_ref3) {
             var _ref4 = _slicedToArray(_ref3, 2),
-                prop = _ref4[0],
-                obj = _ref4[1];
+              prop = _ref4[0],
+              obj = _ref4[1];
 
             shim(prop, obj, {
               enumerable: false,
-              configurable: true
+              configurable: true,
             });
           }); // For Node environments
 
@@ -11699,12 +11768,12 @@
             setPrototypeOfCustomEvent();
           }
 
-          if (IDB.indexedDB && !IDB.indexedDB.toString().includes('[native code]')) {
+          if (IDB.indexedDB && !IDB.indexedDB.toString().includes("[native code]")) {
             if (CFG.addNonIDBGlobals) {
               // As `DOMStringList` exists per IDL (and Chrome) in the global
               //   thread (but not in workers), we prefix the name to avoid
               //   shadowing or conflicts
-              setNonIDBGlobals('Shim');
+              setNonIDBGlobals("Shim");
             }
 
             if (CFG.replaceNonIDBGlobals) {
@@ -11716,26 +11785,26 @@
         }
       };
 
-      IDB.shimIndexedDB.__debug = function (val) {
+      IDB.shimIndexedDB.__debug = function(val) {
         CFG.DEBUG = val;
       };
 
       IDB.shimIndexedDB.__setConfig = setConfig;
 
-      IDB.shimIndexedDB.__getConfig = function (prop) {
+      IDB.shimIndexedDB.__getConfig = function(prop) {
         if (!(prop in CFG)) {
-          throw new Error(prop + ' is not a valid configuration property');
+          throw new Error(prop + " is not a valid configuration property");
         }
 
         return CFG[prop];
       };
 
-      IDB.shimIndexedDB.__setUnicodeIdentifiers = function (_ref5) {
+      IDB.shimIndexedDB.__setUnicodeIdentifiers = function(_ref5) {
         var UnicodeIDStart = _ref5.UnicodeIDStart,
-            UnicodeIDContinue = _ref5.UnicodeIDContinue;
+          UnicodeIDContinue = _ref5.UnicodeIDContinue;
         setConfig({
           UnicodeIDStart: UnicodeIDStart,
-          UnicodeIDContinue: UnicodeIDContinue
+          UnicodeIDContinue: UnicodeIDContinue,
         });
       };
     } else {
@@ -11743,15 +11812,15 @@
       //    however (including our non-standard methods), are not stubbed as they ought
       //    to fail earlier rather than potentially having side effects.
       IDB.shimIndexedDB = {};
-      ['__useShim', '__debug', '__setConfig', '__getConfig', '__setUnicodeIdentifiers'].forEach(function (prop) {
-        IDB.shimIndexedDB[prop] = function () {
-          console.warn('This browser does not have WebSQL to shim.');
+      ["__useShim", "__debug", "__setConfig", "__getConfig", "__setUnicodeIdentifiers"].forEach(function(prop) {
+        IDB.shimIndexedDB[prop] = function() {
+          console.warn("This browser does not have WebSQL to shim.");
         };
       });
     } // Workaround to prevent an error in Firefox
 
 
-    if (!('indexedDB' in IDB) && typeof window !== 'undefined') {
+    if (!("indexedDB" in IDB) && typeof window !== "undefined") {
       // 2nd condition avoids problems in Node
       IDB.indexedDB = IDB.indexedDB || IDB.webkitIndexedDB || IDB.mozIndexedDB || IDB.oIndexedDB || IDB.msIndexedDB;
     } // Detect browsers with known IndexedDB issues (e.g. Android pre-4.4)
@@ -11759,24 +11828,24 @@
 
     var poorIndexedDbSupport = false;
 
-    if (typeof navigator !== 'undefined' && // Not apparently defined in React Native
-    navigator.userAgent && ( // Ignore Node or other environments
-    // Bad non-Chrome Android support
-    /Android (?:2|3|4\.[0-3])/.test(navigator.userAgent) && !navigator.userAgent.includes('Chrome') || // Bad non-Safari iOS9 support (see <https://github.com/axemclion/IndexedDBShim/issues/252>)
-    (!navigator.userAgent.includes('Safari') || navigator.userAgent.includes('Chrome')) && // Exclude genuine Safari: http://stackoverflow.com/a/7768006/271577
-    // Detect iOS: http://stackoverflow.com/questions/9038625/detect-if-device-is-ios/9039885#9039885
-    // and detect version 9: http://stackoverflow.com/a/26363560/271577
-    /(iPad|iPhone|iPod)(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])* o[s\u017F] 9_/i.test(navigator.userAgent) && !window.MSStream // But avoid IE11
-    )) {
+    if (typeof navigator !== "undefined" && // Not apparently defined in React Native
+      navigator.userAgent && ( // Ignore Node or other environments
+        // Bad non-Chrome Android support
+        /Android (?:2|3|4\.[0-3])/.test(navigator.userAgent) && !navigator.userAgent.includes("Chrome") || // Bad non-Safari iOS9 support (see <https://github.com/axemclion/IndexedDBShim/issues/252>)
+        (!navigator.userAgent.includes("Safari") || navigator.userAgent.includes("Chrome")) && // Exclude genuine Safari: http://stackoverflow.com/a/7768006/271577
+        // Detect iOS: http://stackoverflow.com/questions/9038625/detect-if-device-is-ios/9039885#9039885
+        // and detect version 9: http://stackoverflow.com/a/26363560/271577
+        /(iPad|iPhone|iPod)(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])* o[s\u017F] 9_/i.test(navigator.userAgent) && !window.MSStream // But avoid IE11
+      )) {
       poorIndexedDbSupport = true;
     }
 
     if (!CFG.DEFAULT_DB_SIZE) {
       CFG.DEFAULT_DB_SIZE = ( // Safari currently requires larger size: (We don't need a larger size for Node as node-websql doesn't use this info)
-      // https://github.com/axemclion/IndexedDBShim/issues/41
-      // https://github.com/axemclion/IndexedDBShim/issues/115
-      typeof navigator !== 'undefined' && // React Native
-      navigator.userAgent && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome') ? 25 : 4) * 1024 * 1024;
+        // https://github.com/axemclion/IndexedDBShim/issues/41
+        // https://github.com/axemclion/IndexedDBShim/issues/115
+        typeof navigator !== "undefined" && // React Native
+        navigator.userAgent && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome") ? 25 : 4) * 1024 * 1024;
     }
 
     if (!CFG.avoidAutoShim && (!IDB.indexedDB || poorIndexedDbSupport) && CFG.win.openDatabase !== undefined) {
@@ -11792,7 +11861,7 @@
   } // Expose for ease in simulating such exceptions during testing
 
   /* eslint-env browser, worker */
-  CFG.win = typeof window !== 'undefined' ? window : self; // For Web Workers
+  CFG.win = typeof window !== "undefined" ? window : self; // For Web Workers
   // END: Same code as in browser.js
 
   CFG.UnicodeIDStart = UnicodeIDStart;
